diff --git a/config/webpack.config.js b/config/webpack.config.js
index b19ab7b3..94d2ff47 100644
--- a/config/webpack.config.js
+++ b/config/webpack.config.js
@@ -16,21 +16,27 @@ const NODE_ENV = process.env.NODE_ENV || 'prod';
 const REACT_APP = /^REACT_APP_/i;
 
 const appDirectory = fs.realpathSync(process.cwd());
+const miscDirectory = `${appDirectory}/misc`;
 const dotenv = path.resolve(appDirectory, '.env');
 const themeLessFileName = path.resolve(appDirectory, 'theme', 'theme.less');
 const isProductionMode = NODE_ENV !== 'development';
 const webpackMode = isProductionMode ? 'production' : 'development';
 const localIdentName = isProductionMode ? '[hash:base64]' : '[path][name]__[local]';
 const isBundleAnalyzerPlugin = false;
+const subModules = ['chats', 'employees'];
 
 const lessLoader = {
     loader: 'less-loader',
     options: {
-        modifyVars: {
-            'hack': `true; @import "${themeLessFileName}";`,
-        },
-        javascriptEnabled: true,
-    },
+        lessOptions: {
+            modifyVars: {
+                'hack': `true; @import "${themeLessFileName}"; ${
+                    subModules.map(module => `@import "${miscDirectory}/${module}/theme/theme.less"`).join('; ')
+                }`,
+            },
+            javascriptEnabled: true,
+        }
+    }
 };
 
 const fontsOptions = isProductionMode
@@ -157,12 +163,13 @@ const plugins = () => {
             ignoreOrder: true,
         }),
 
-        new ModuleFederationPlugin({
+        /*new ModuleFederationPlugin({
             name: 'shell',
             shared: ['react', 'react-dom'].reduce((shared, key) => {
                 shared[key] = {
                     requiredVersion: deps[key],
                     singleton: true,
+                    eager: true
                 };
                 return shared;
             }, {}),
@@ -170,7 +177,11 @@ const plugins = () => {
                 chats: `chats@${process.env.REACT_APP_MODULE_CHATS}/remoteEntry.js`,
                 employees: `employees@${process.env.REACT_APP_MODULE_EMPLOYEES}/employees/remoteEntry.js`,
             },
-        }),
+        }),*/
+
+        new webpack.optimize.LimitChunkCountPlugin({
+            maxChunks: 1
+        })
     ];
 
     if (isBundleAnalyzerPlugin) {
@@ -180,6 +191,13 @@ const plugins = () => {
     return pluginsList;
 };
 
+const createAliases = appDirectory => ({
+    '@': path.resolve(appDirectory, './src'),
+    '@models': path.resolve(appDirectory, './src/models'),
+    '@lib': path.resolve(appDirectory, './src/components/lib'),
+    '@hooks': path.resolve(appDirectory, './src/hooks'),
+});
+
 module.exports = {
     entry: './src/index.tsx',
     target: 'web',
@@ -199,6 +217,21 @@ module.exports = {
     module: {
         rules: [
             {
+                test: /\.js$/,
+                exclude: /node_modules(?!\/uis-softphone\/)/,
+                use: [{
+                    loader: 'babel-loader',
+                    options: {
+                        presets: ['@babel/preset-react', '@babel/preset-env'],
+                        comments: false,
+                        plugins: [
+                            '@babel/plugin-proposal-private-methods',
+                            '@babel/plugin-proposal-class-properties',
+                        ]
+                    }
+                }]
+            },
+            {
                 test: /\.(ts|tsx)$/,
                 use: {
                     loader: 'ts-loader',
@@ -269,12 +302,56 @@ module.exports = {
     resolve: {
         extensions: ['.tsx', '.ts', '.js'],
         alias: {
-            '@': path.resolve(appDirectory, './src'),
-            '@models': path.resolve(appDirectory, './src/models'),
-            '@lib': path.resolve(appDirectory, './src/components/lib'),
-            '@hooks': path.resolve(appDirectory, './src/hooks'),
+            ...createAliases(appDirectory),
             '@ant-design/icons/lib/dist$': path.resolve(appDirectory, './src/icons.ts'),
+            'employees/Root': 'employees/src/Root.tsx',
+            'softphone/Root': 'softphone/src/Root.tsx',
+            'chats/Root': 'chats/src/Root.tsx',
+            'chats/Account': 'chats/src/components/account/index.tsx',
+            'chats/ChatHistoryLog': 'chats/src/components/chats/chat-panel/HistoryLog.tsx',
+            'chats/HttpRpc': 'chats/src/httpRpc.ts',
+            'chats/ChatMessagesStore': 'chats/src/models/chats/ChatMessaagesStore.ts',
+            'chats/utils': 'chats/src/utils/index.ts',
         },
+        plugins: [{
+            apply: resolver => resolver.getHook('resolve').tapAsync('RelativeAliasResolvingPlugin', (
+                request,
+                resolveContext,
+                callback
+            ) =>  {
+                const target = resolver.ensureHook('resolve'),
+                    splitted = request.request.split('/');
+
+                const {
+                    directory,
+                    aliases
+                } = subModules.concat(['softphone']).map(module => {
+                    const directory = `${miscDirectory}/${module}`;
+
+                    return {
+                        directory,
+                        aliases: createAliases(directory)
+                    };
+                }).find(({
+                    directory,
+                    aliases
+                }) => request.path.indexOf(directory) === 0 && Object.keys(aliases).some(
+                    alias => splitted[0] == alias
+                )) || {};
+
+                if (!directory) {
+                    callback();
+                    return;
+                }
+
+                splitted[0] = aliases[splitted[0]]
+
+                return resolver.doResolve(target, {
+                    ...request,
+                    request: splitted.join('/') 
+                }, null, resolveContext, callback);
+            })
+        }]
     },
     output: {
         filename: isProductionMode ? 'static/js/[name].[contenthash:8].js' : 'static/js/bundle.js',
diff --git a/package.json b/package.json
index 3a0ef1cc..36eb89f5 100644
--- a/package.json
+++ b/package.json
@@ -60,7 +60,7 @@
     "husky": "^6.0.0",
     "json-server": "^0.16.0",
     "less": "^3.10.3",
-    "less-loader": "^5.0.0",
+    "less-loader": "^6.0.0",
     "mini-css-extract-plugin": "^1.3.9",
     "nanoid": "^2.1.11",
     "prettier": "^1.19.1",
@@ -79,6 +79,9 @@
     "webpack-merge": "^5.7.3"
   },
   "dependencies": {
+    "softphone": "./misc/softphone",
+    "employees": "./misc/employees",
+    "chats": "./misc/chats",
     "antd": "^3.26.7",
     "axios": "^0.19.2",
     "classnames": "^2.2.6",
@@ -105,11 +108,12 @@
     "react-intl": "^5.15.8",
     "react-list": "^0.8.13",
     "react-resizable": "^1.10.1",
-    "react-resize-detector": "^5.2.0",
+    "react-resize-detector": "^6.0.0",
     "react-router-dom": "^5.1.2",
     "react-transition-group": "^4.4.2",
     "short-uuid": "^4.2.0",
     "wavesurfer.js": "^4.0.1",
-    "yup": "^0.28.1"
+    "yup": "^0.28.1",
+    "babel-loader": "^8.0.4"
   }
 }
diff --git a/public/index.html b/public/index.html
index 98e0c107..0fe0c90f 100644
--- a/public/index.html
+++ b/public/index.html
@@ -22,6 +22,22 @@
     })(window, document, 'script', 'dataLayer', 'GTM-TJXG5CR');</script>
     <!-- End Google Tag Manager -->
     <% } %>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/jasmine.js"></script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/jasmine-html.js"></script>
+    <script>
+        var windowLoadHandler = window.onload;
+    </script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/boot.js"></script>
+    <script>
+        window.onload = windowLoadHandler;
+    </script>
+    <script src="/tests/utils/jasmine/lib/jasmine-ajax/lib/mock-ajax.js"></script>
+    <script src="/tests/utils/jasmine/console-reporter.js"></script>
+    <script src="/tests/utils/js-tester.js"></script>
+    <script type="text/javascript">
+        var tests = new JsTester_Tests(new JsTester_Factory());
+        tests.exposeDebugUtils('jsTestDebug');
+    </script>
 </head>
 <body>
     <% if (htmlWebpackPlugin.options.env.production) { %>
@@ -33,5 +49,8 @@
     <% } %>
     <noscript>You need to enable JavaScript to run this app.</noscript>
     <div id="root"></div>
+    <script src="/tests/utils/require.js"></script>
+    <script src="/tests/tests.js"></script>
+    <script src="/tests/utils/tests.js"></script>
 </body>
 </html>
\ No newline at end of file
diff --git a/src/bootstrap.tsx b/src/bootstrap.tsx
index 03e58fa0..54c80b7b 100644
--- a/src/bootstrap.tsx
+++ b/src/bootstrap.tsx
@@ -6,7 +6,10 @@ import { ConfigProvider } from 'antd';
 import { useMountEffect } from '@hooks';
 import { observer } from 'mobx-react-lite';
 
-import { Provider, rootStore } from '@models/RootStore';
+import { Provider, rootStore, createRootStore } from '@models/RootStore';
+import { createRootStore as createChatsRootStore } from 'chats/src/models/RootStore';
+import { createRootStore as createEmployeesRootStore } from 'employees/src/models/RootStore';
+import { createRootStore as createSoftphoneRootStore } from 'softphone/src/models/RootStore';
 
 import history from './history';
 import { getAntdLocale, getIntlLocale, getIntlMessages } from './i18n';
@@ -48,4 +51,33 @@ const Root: React.FC = observer(() => {
     );
 });
 
-ReactDOM.render(<Root />, document.getElementById('root'));
+window.application = {
+    run({
+        setHistory = () => null
+    }) {
+        createRootStore();
+        createChatsRootStore();
+        createEmployeesRootStore();
+        createSoftphoneRootStore();
+        setHistory(history);
+
+        this.exit();
+
+        const container = document.createElement('div');
+        container.id = 'root';
+        document.body.appendChild(container);
+
+        ReactDOM.render(<Root />, container);
+    },
+
+    exit() {
+        const container = document.getElementById('root');
+
+        if (!container) {
+            return;
+        }
+
+        container.firstChild && ReactDOM.unmountComponentAtNode(container);
+        container.remove();
+    }
+};
diff --git a/src/history.ts b/src/history.ts
index 33bf6a02..dceaff1c 100644
--- a/src/history.ts
+++ b/src/history.ts
@@ -1,6 +1,6 @@
-import { createBrowserHistory } from 'history';
+import { createMemoryHistory } from 'history';
 
-const history = createBrowserHistory();
+const history = createMemoryHistory();
 
 //TODO: может заменить на location.reload()?
 export const reloadPage = (): void => {
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 86f60ae1..015c1dc8 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -257,7 +257,8 @@ export type DependencyInjection = {
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({}, { httpRpc, httpRpcAuth });
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}, { httpRpc, httpRpcAuth }));
 
 type RootInstanceSnapshotOut = SnapshotOut<typeof RootStore>;
 
