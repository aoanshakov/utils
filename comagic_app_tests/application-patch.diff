diff --git a/config/webpack.config.js b/config/webpack.config.js
index 0579dd31..c2d71542 100644
--- a/config/webpack.config.js
+++ b/config/webpack.config.js
@@ -6,8 +6,9 @@ const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
 const MiniCssExtractPlugin = require('mini-css-extract-plugin');
 const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
 const TerserPlugin = require('terser-webpack-plugin');
-const ExternalRemotesPlugin = require('external-remotes-plugin');
+//const ExternalRemotesPlugin = require('external-remotes-plugin');
 const CopyPlugin = require('copy-webpack-plugin');
+const hash = require('string-hash');
 
 const { ModuleFederationPlugin } = webpack.container;
 const pkgJson = require('../package.json');
@@ -18,6 +19,8 @@ const BUILD_PLATFORM = process.env.BUILD_PLATFORM || 'windows';
 const REACT_APP = /^REACT_APP_/i;
 
 const appDirectory = fs.realpathSync(process.cwd());
+const miscDirectory = `${appDirectory}/misc`;
+const magicUIDirectory = `${miscDirectory}/magic_ui`;
 const publicDir = path.resolve(appDirectory, 'public');
 const buildDir = path.resolve(appDirectory, 'build');
 const dotenv = path.resolve(appDirectory, '.env');
@@ -25,9 +28,21 @@ const isProductionMode = NODE_ENV !== 'development';
 const webpackMode = isProductionMode ? 'production' : 'development';
 const localIdentName = isProductionMode ? '[hash:base64]' : '[path][name]__[local]';
 const isBundleAnalyzerPlugin = false;
+const subModules = ['chats'];
+const NodePolyfillPlugin = require("node-polyfill-webpack-plugin");
 
 const lessLoader = {
     loader: 'less-loader',
+    options: {
+        lessOptions: {
+            modifyVars: {
+                'hack': `true; ${
+                    subModules.map(module => `@import "${miscDirectory}/${module}/theme/theme.less"`).join('; ')
+                }`,
+            },
+            javascriptEnabled: true,
+        },
+    },
 };
 
 const fontsOptions = isProductionMode
@@ -104,10 +119,11 @@ const webpackDefinePlugin = () => {
     return opts;
 };
 
-const cssLoaders = extra => {
+const cssLoaders = (extra, loaderParams = {}) => {
     const loaders = [
         {
             loader: isProductionMode ? MiniCssExtractPlugin.loader : 'style-loader',
+            ...loaderParams
         },
         {
             loader: 'css-loader',
@@ -136,15 +152,11 @@ const getSharedDeps = () => {
         'react-router-dom',
         'history',
         'classnames',
-        'formik',
         'mobx',
         'mobx-react-lite',
         'mobx-state-tree',
-        'lodash.clonedeep',
         'react-intl',
         '@comagic/core',
-        '@sentry/react',
-        '@sentry/tracing',
     ].reduce((shared, key) => {
         shared[key] = {
             requiredVersion: deps[key],
@@ -158,7 +170,6 @@ const getSharedDeps = () => {
         ...baseDeps,
     };
 
-    delete(baseDeps['magic-ui']);
     return baseDeps;
 };
 
@@ -214,7 +225,9 @@ const plugins = () => {
             ignoreOrder: true,
         }),
 
-        new ModuleFederationPlugin({
+        new NodePolyfillPlugin(),
+
+        /*new ModuleFederationPlugin({
             name: 'shell',
             shared: getSharedDeps(),
             remotes: {
@@ -260,6 +273,11 @@ const plugins = () => {
             },
         }),
         new ExternalRemotesPlugin(),
+        }),*/
+
+        new webpack.optimize.LimitChunkCountPlugin({
+            maxChunks: 1
+        })
     ];
 
     if (isProductionMode) {
@@ -283,11 +301,27 @@ const plugins = () => {
     return pluginsList;
 };
 
+const createAliases = appDirectory => ({
+    '@': path.resolve(appDirectory, './src'),
+    '@models': path.resolve(appDirectory, './src/models'),
+    '@lib': path.resolve(appDirectory, './src/components/lib'),
+    '@hooks': path.resolve(appDirectory, './src/hooks'),
+});
+
+const iconsRegExp = new RegExp(
+    ['', '(softphone|softphone', 'src|call_history|uis_webrtc', 'src)', 'icons', ''].join('\\' + path.sep)
+);
+
 module.exports = {
     entry: './src/index.tsx',
     target: NODE_ENV == 'softphone' ? 'electron-renderer' : 'web',
     mode: webpackMode,
     devtool: 'inline-source-map',
+    snapshot: {
+        managedPaths: [
+            new RegExp('^(.*/node_modules/(?!react-draggable)/.*)$'),
+        ],
+    }, 
     optimization: isProductionMode
         ? {
               minimize: true,
@@ -303,6 +337,21 @@ module.exports = {
     },
     module: {
         rules: [
+            {
+                test: /\.js$/,
+                exclude: /node_modules(?!\/(uis-softphone|magic-ui)\/)/,
+                use: [{
+                    loader: 'babel-loader',
+                    options: {
+                        presets: ['@babel/preset-react', '@babel/preset-env'],
+                        comments: false,
+                        plugins: [
+                            '@babel/plugin-proposal-private-methods',
+                            '@babel/plugin-proposal-class-properties',
+                        ]
+                    }
+                }]
+            },
             {
                 test: /\.(ts|tsx)$/,
                 use: {
@@ -311,7 +360,7 @@ module.exports = {
                         transpileOnly: true,
                     },
                 },
-                exclude: /node_modules/,
+                exclude: /node_modules(?!\/(uis-softphone|magic-ui)\/)/,
             },
             {
                 test: /\.css$/,
@@ -321,6 +370,29 @@ module.exports = {
                 test: /\.less$/,
                 use: cssLoaders(lessLoader),
             },
+            {
+                test: /\.(sa|sc|c)ss$/,
+                include: `${magicUIDirectory}/src`,
+                use: [
+                    {
+                        loader: 'style-loader',
+                    },
+                    {
+                        loader: 'css-loader',
+                    },
+                    {
+                        loader: 'resolve-url-loader',
+                    },
+                    {
+                        loader: 'sass-loader',
+                        options: {
+                            sassOptions: {
+                                includePaths: [magicUIDirectory]
+                            }
+                        }
+                    },
+                ],
+            },
             {
                 test: /\.(png|jpg)$/,
                 loader: 'url-loader',
@@ -331,12 +403,13 @@ module.exports = {
                 },
             },
             {
-                test: /\.(woff|woff2)$/,
+                test: /\.(woff|woff2|otf)$/,
                 loader: 'file-loader',
                 options: fontsOptions,
             },
             {
                 test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
+                exclude: iconsRegExp,
                 use: [
                     {
                         loader: '@svgr/webpack',
@@ -352,17 +425,170 @@ module.exports = {
                     },
                 ],
             },
+            {
+                test: iconsRegExp,
+                use: ({resource}) => [{
+                    loader: 'babel-loader',
+                    options: {
+                        presets: ['@babel/preset-react', '@babel/preset-env'],
+                        comments: false
+                    }
+                }, {
+                    loader: '@svgr/webpack',
+                    options: {
+                        babel: false,
+                        icon: true,
+                        svgoConfig: {
+                            plugins: [{
+                                cleanupIDs: {
+                                    prefix: `svg${hash(path.relative(__dirname, resource))}`,
+                                    force: true
+                                }
+                            }]
+                        }
+                    }
+                }]
+            },
+            {
+                test: require.resolve('janus-gateway'),
+                loader: 'exports-loader',
+                options: {
+                    exports: 'Janus'
+                }
+            },
         ],
     },
     resolve: {
         extensions: ['.tsx', '.ts', '.js'],
 
         alias: {
-            '@': path.resolve(appDirectory, './src'),
-            '@models': path.resolve(appDirectory, './src/models'),
-            '@lib': path.resolve(appDirectory, './src/components/lib'),
-            '@hooks': path.resolve(appDirectory, './src/hooks'),
+            '@comagic/core/lib': `${miscDirectory}/core/src`,
+            ...createAliases(appDirectory),
+            'contacts/Root': `${miscDirectory}/contacts/src/Root.tsx`,
+            'contacts/ContactBar': `${miscDirectory}/contacts/src/components/contact-bar/ContactBarWrapper.tsx`,
+            'contacts/ContactSelect':
+                `${miscDirectory}/contacts/src/components/contact-bar/start-channel-select/ContactSelectWrapper.tsx`,
+            'contacts/ContactSettings': `${miscDirectory}/contacts/src/components/settings`,
+            'contacts/ContactList': 'contacts/src/components/contact-list-table',
+            'contacts/ContactListNew': 'contacts/src/components/contact-list',
+            'leadgen/Root': `${miscDirectory}/Stub.js`,
+            'leadgen/TemplatesSettings': `${miscDirectory}/Stub.js`,
+            'softphone/NewSoftphone': 'softphone/src/NewSoftphone.tsx',
+            'softphone/Root': 'softphone/src/Root.tsx',
+            'softphone/Account': 'softphone/src/Account.tsx',
+            'softphone/AccountHeader': 'softphone/src/AccountHeader.tsx',
+            'softphone/Settings': 'softphone/src/Settings.tsx',
+            'softphone/CallHistory': 'softphone/src/call_history/index.tsx',
+            'softphone/CallStats': 'softphone/src/call_stats/index.tsx',
+            'softphone/LostCallsCount': 'softphone/src/call_history/counter.tsx',
+            'softphone/FeedbackWebModal': 'softphone/src/feedback/feedbackWeb/index.tsx',
+            'chats/Root': 'chats/src/Root.tsx',
+            'chats/Account': 'chats/src/components/account/index.tsx',
+            'chats/BasicAccount': 'chats/src/components/account/BasicAccount.tsx',
+            'chats/ReportChatHistoryDrawer': 'chats/src/components/chats/chat-panel/ReportChatHistoryDrawer.tsx',
+            'chats/HistoryLogWrapped': 'chats/src/components/chats/chat-panel/HistoryLogWrapped.tsx',
+            'chats/AudioPlayerWrapped': 'chats/src/components/chats/chat-panel/AudioContentWrapped.tsx',
+            'chats/MessageWrapped': 'chats/src/components/chats/chat-panel/MessageWrapped.tsx',
+            'chats/QuoteWrapped': 'chats/src/components/chats/chat-panel/QuoteWrapped.tsx',
+            'chats/HistoryItemWrapped': 'chats/src/components/offline-messages/components/panel/components/history-item-wrapped/index.tsx',
+            'chats/Menu': 'chats/src/components/main/menu/index.tsx',
+            'chats/NotificationWrapper': `${miscDirectory}/Stub.js`,
+            'chats/Counter': 'chats/src/components/chats/chat-panel/Counter.tsx',
+            'chats/MenuItemCounter': 'chats/src/components/main/menu/counter.tsx',
+            'chatsDistribution/Root': `${miscDirectory}/Stub.js`,
+            'chats/ContactSelect': 'chats/src/components/chats/channel-search/start-channel-select/ContactSelectWrapped.tsx',
+            'callTracking/CalltrackingSubstitutionControl': `${miscDirectory}/Stub.js`,
+            'callTracking/CalltrackingTrafficControl': `${miscDirectory}/Stub.js`,
+            'callTracking/CalltrackingNumbers': `${miscDirectory}/Stub.js`,
+            'callTracking/CalltrackingSubstitutionRules': `${miscDirectory}/Stub.js`,
+            'callTracking/NumberPools': `${miscDirectory}/Stub.js`,
+            'callTracking/Sites': `${miscDirectory}/Stub.js`,
+            'callTracking/SitesV3': `${miscDirectory}/Stub.js`,
+            'callTracking/Root': `${miscDirectory}/Stub.js`,
+            'callTracking/SiteForm': `${miscDirectory}/Stub.js`,
+            'analytics/CreateDashboardButton': `${miscDirectory}/Stub.js`,
+            'analytics/AdAnalytics': `${miscDirectory}/Stub.js`,
+            'analytics/CreateReport': `${miscDirectory}/Stub.js`,
+            'analytics/Dashboards/ChiefDashboard': `${miscDirectory}/Stub.js`,
+            'analytics/Communications': `${miscDirectory}/Stub.js`,
+            'analytics/Dashboards/Dashboard': `${miscDirectory}/Stub.js`,
+            'analytics/DealsAnalytics': `${miscDirectory}/Stub.js`,
+            'analytics/Deals': `${miscDirectory}/Stub.js`,
+            'analytics/Leads': `${miscDirectory}/Stub.js`,
+            'analytics/Dashboards/MarketerDashboard': `${miscDirectory}/Stub.js`,
+            'analytics/SharedReport': `${miscDirectory}/Stub.js`,
+            'analytics/cancelPendingRequests': `${miscDirectory}/Stub.js`,
+            'analytics/ReportTable': `${miscDirectory}/Stub.js`,
+            'analytics/CalendarButton': `${miscDirectory}/Stub.js`,
+            'analytics/RadioButton': `${miscDirectory}/Stub.js`,
+            'analytics/RadioGroup': `${miscDirectory}/Stub.js`,
+            'analytics/Monitoring': `${miscDirectory}/Stub.js`,
+            'analytics/Visits': `${miscDirectory}/Stub.js`,
+            'supervisorWorkplace/Root': `${miscDirectory}/Stub.js`,
+            'supervisorWorkplace/Menu': `${miscDirectory}/Stub.js`,
+            'supervisorWorkplace/NotificationWorkplace': `${miscDirectory}/Stub.js`,
+            'marketplace/Auth': `${miscDirectory}/Stub.js`,
+            'marketplace/Root': `${miscDirectory}/Stub.js`,
+            'employees/getStore': 'employees/src/utils/getStore',
+            'employees/Root': 'employees/src/Root.tsx',
+        },
+
+        plugins: [{
+            apply: resolver => resolver.getHook('resolve').tapAsync('RelativeAliasResolvingPlugin', (
+                request,
+                resolveContext,
+                callback
+            ) =>  {
+                const target = resolver.ensureHook('resolve'),
+                    requestPath = request.request,
+                    splitted = requestPath.split('/');
+
+                if (['~magic-ui/lib/styles.css', '~@comagic/core/lib/styles.css'].includes(requestPath)) {
+                    splitted.splice(0, splitted.length);
+                    splitted.push(miscDirectory, 'stub.css');
+                } else if ([
+                    '@comagic/ui',
+                    'magic-ui',
+                    '@comagic/core',
+                ].some(path => requestPath.includes(`${path}/lib`))) {
+                    splitted[splitted.indexOf('lib')] = 'src';
+                } else {
+                    const {
+                        directory,
+                        aliases
+                    } = subModules.concat(['softphone', 'contacts', 'operator-workplace']).map(module => {
+                        const directory = `${miscDirectory}/${module}`;
+
+                        return {
+                            directory,
+                            aliases: createAliases(directory)
+                        };
+                    }).find(({
+                        directory,
+                        aliases
+                    }) => request.path.indexOf(directory) === 0 && Object.keys(aliases).some(
+                        alias => splitted[0] == alias
+                    )) || {};
+
+                    if (!directory) {
+                        callback();
+                        return;
+                    }
+
+                    splitted[0] = aliases[splitted[0]]
+                }
+
+                return resolver.doResolve(target, {
+                    ...request,
+                    request: splitted.join('/') 
+                }, null, resolveContext, callback);
+            }),
+        }],
+
+        fallback: {
+            fs: false,
         },
+
     },
     output: {
         clean: true,
diff --git a/package.json b/package.json
index 911d3426..6a4aca02 100644
--- a/package.json
+++ b/package.json
@@ -22,7 +22,6 @@
   "author": "",
   "license": "ISC",
   "devDependencies": {
-    "@sentry/webpack-plugin": "^1.18.5",
     "@svgr/webpack": "^5.1.0",
     "@trivago/prettier-plugin-sort-imports": "^3.3.0",
     "@types/classnames": "^2.2.9",
@@ -67,37 +66,55 @@
     "webpack-merge": "^5.7.3"
   },
   "dependencies": {
-    "@comagic/core": "1.5.0",
-    "@comagic/workplace-utils": "^1.0.13",
+    "@comagic/broadcast-channel": "./misc/broadcast-channel",
+    "@comagic/core": "./misc/core",
+    "@comagic/logger": "./misc/logger",
+    "@comagic/softphone-core": "./misc/softphone/misc/sip_lib/uis_webrtc",
+    "@comagic/softphone-widget": "./misc/softphone/misc/sip_lib",
+    "@comagic/ui": "./misc/ui",
+    "@comagic/workplace-utils": "./misc/logger",
+    "@sentry/integrations": "5.30.0",
     "@sentry/react": "^6.17.6",
     "@sentry/tracing": "^6.17.6",
     "@types/file-saver": "2.0.5",
+    "@uiscom/uis_webrtc": "./misc/softphone/misc/sip_lib/uis_webrtc",
     "archiver": "^5.3.0",
     "auto-launch": "^5.0.5",
     "axios": "^0.24.0",
+    "babel-loader": "^8.0.4",
+    "chats": "./misc/chats",
     "classnames": "^2.2.6",
+    "contacts": "./misc/contacts",
     "dotenv": "^8.2.0",
     "dotenv-expand": "^5.1.0",
     "electron-log": "^4.3.0",
     "electron-notarize": "1.2.2",
     "electron-store": "^6.0.1",
     "electron-updater": "^5.0.3",
+    "employees": "./misc/operator-workplace",
     "file-saver": "^2.0.5",
     "form-data": "^4.0.0",
     "formik": "^2.2.9",
     "history": "^5.3.0",
     "lodash.clonedeep": "^4.5.0",
-    "magic-ui": "0.0.0-int1",
+    "magic-ui": "./misc/magic_ui",
     "mobx": "^6.6.1",
     "mobx-react-lite": "^3.4.0",
     "mobx-state-tree": "^5.1.6",
     "moment": "^2.29.4",
+    "dayjs": "1.11.11",
     "nanoid": "^3.2.0",
+    "node-polyfill-webpack-plugin": "2.0.1",
+    "opus-recorder": "8.0.5",
     "react": "^18.2.0",
     "react-dom": "^18.2.0",
     "react-intl": "^6.0.5",
     "react-router-dom": "6.9.0",
+    "simplebar-react": "^2.4.1",
+    "softphone": "./misc/softphone",
     "stream-buffers": "^3.0.2",
+    "string-hash": "^1.1.3",
+    "uis-softphone": "./misc/softphone/misc/sip_lib",
     "yup": "^0.28.1"
   },
   "optionalDependencies": {
diff --git a/public/index.html b/public/index.html
index a82eebad..98306245 100644
--- a/public/index.html
+++ b/public/index.html
@@ -5,7 +5,8 @@
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">
     <title>Loading...</title>
-    <link rel="icon" href="">
+    <link rel="icon" href="/tests/utils/jasmine/lib/jasmine-3.4.0/jasmine.js">
+    <link rel="stylesheet" href="/tests/css/style.css">
     <% if (htmlWebpackPlugin.options.env.production) { %>
     <!-- Google Tag Manager -->
     <script>(function(w, d, s, l, i) {
@@ -23,7 +24,29 @@
     })(window, document, 'script', 'dataLayer', 'GTM-TJXG5CR');</script>
     <!-- End Google Tag Manager -->
     <% } %>
-    <script>window.rootConfig = <%= rootConfig %>;</script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/jasmine.js"></script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/jasmine-html.js"></script>
+    <script>
+        var windowLoadHandler = window.onload;
+    </script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/boot.js"></script>
+    <script>
+        window.onload = windowLoadHandler;
+    </script>
+    <script src="/tests/utils/jasmine/lib/jasmine-ajax/lib/mock-ajax.js"></script>
+    <script src="/tests/utils/jasmine/console-reporter.js"></script>
+    <script src="/tests/utils/js-tester.js"></script>
+    <script type="text/javascript">
+        var tests = new JsTester_Tests(new JsTester_Factory());
+        tests.exposeDebugUtils('jsTestDebug');
+    </script>
+    <script src="/tests/utils/require.js"></script>
+    <script src="/tests/{script}.js"></script>
+    <style>
+        #root {
+            position: static !important;
+        }
+    </style>
 </head>
 <body class="cm-body">
     <% if (htmlWebpackPlugin.options.env.production) { %>
@@ -35,5 +58,6 @@
     <% } %>
     <noscript>You need to enable JavaScript to run this app.</noscript>
     <div id="root"></div>
+    <script src="/tests/utils/tests.js"></script>
 </body>
 </html>
\ No newline at end of file
diff --git a/scripts/dev.js b/scripts/dev.js
index eb9c62ef..5fb7fee9 100644
--- a/scripts/dev.js
+++ b/scripts/dev.js
@@ -2,8 +2,6 @@
 
 process.env.NODE_ENV = 'development';
 
-const fs = require('fs');
-const path = require('path');
 const webpack = require('webpack');
 const WebpackDevServer = require('webpack-dev-server');
 
@@ -11,21 +9,11 @@ const configFactory = require('../config/webpack.config.js');
 
 const compiler = webpack(configFactory);
 
-const certsDir = `${path.dirname(require.main.filename)}/certs`;
-
 const devServer = new WebpackDevServer(
     {
-        allowedHosts: ['.localhost.uis.st'],
-        server: {
-            type: 'https',
-            options: {
-                key: fs.readFileSync(`${certsDir}/_wildcard.localhost.uis.st+5-key.pem`),
-                cert: fs.readFileSync(`${certsDir}/_wildcard.localhost.uis.st+5.pem`),
-                ca: fs.readFileSync(`${certsDir}/rootCA.cer`),
-            },
-        },
         port: parseInt(process.env.PORT, 10) || 8080,
-        hot: true,
+        hot: false,
+        liveReload: false,
         headers: { 'Access-Control-Allow-Origin': '*' },
         historyApiFallback: true,
         // для проксирования запросов на production
diff --git a/src/bootstrap.tsx b/src/bootstrap.tsx
index 32137f8d..258a9dda 100644
--- a/src/bootstrap.tsx
+++ b/src/bootstrap.tsx
@@ -1,13 +1,18 @@
-import { CoreProvider } from '@comagic/core';
+import { CoreProvider, eventBus } from '@comagic/core';
 import * as Sentry from '@sentry/react';
 import { Integrations } from '@sentry/tracing';
 import { observer } from 'mobx-react-lite';
 import React, { useEffect } from 'react';
+import ReactDOM from 'react-dom';
 import { createRoot } from 'react-dom/client';
 import { IntlProvider } from 'react-intl';
 import { unstable_HistoryRouter as HistoryRouter } from 'react-router-dom';
+import { notification, Modal } from 'magic-ui';
+import { notification as newNotification } from '@comagic/ui';
+import createIconFactory from '@/utils/createIcon';
+import { Provider as SoftphoneModeProvider } from '@/components/main/menu/softphone/index';
 
-import { Provider, rootStore } from '@models/RootStore';
+import { Provider, rootStore, createRootStore } from '@models/RootStore';
 
 import history from '@/history';
 
@@ -15,7 +20,7 @@ import App, { Props } from './App';
 import './global';
 import { getIntlLocale, getIntlMessages, getProject } from './i18n';
 
-const sentryDSN = process.env.SENTRY_DSN;
+const sentryDSN = process.env.REACT_APP_TEST_MODE == 'true' ? '' :  process.env.SENTRY_DSN;
 
 if (sentryDSN) {
     Sentry.init({
@@ -47,8 +52,8 @@ if (sentryDSN) {
     });
 }
 
-const Root: React.FC<Props> = observer(props => {
-    const { accountStore, notificationStore, isGodMode } = rootStore;
+const Root: React.FC<Props> = observer(({ shouldShowNewSoftphone, ...props }) => {
+    const { accountStore, notificationStore, isGodMode, authStore } = rootStore;
     const {
         projectData: { locale },
     } = accountStore;
@@ -63,23 +68,122 @@ const Root: React.FC<Props> = observer(props => {
         <HistoryRouter history={history}>
             <CoreProvider
                 isHostApp
+                isSSOAuth={authStore.hasSSOAuth()}
                 isGodMode={isGodMode}
                 accountStore={accountStore}
                 locale={locale}
                 history={history}
                 notificationStore={notificationStore}
             >
-                <Provider value={rootStore}>
-                    <IntlProvider locale={getIntlLocale(locale)} messages={getIntlMessages(locale)}>
-                        <App {...(props || {})} />
-                    </IntlProvider>
-                </Provider>
+                <SoftphoneModeProvider value={shouldShowNewSoftphone}>
+                    <Provider value={rootStore}>
+                        <IntlProvider locale={getIntlLocale(locale)} messages={getIntlMessages(locale)}>
+                            <App {...(props || {})} />
+                        </IntlProvider>
+                    </Provider>
+                </SoftphoneModeProvider>
             </CoreProvider>
         </HistoryRouter>
     );
 });
 
 const container = document.getElementById('root');
-const root = createRoot(container);
+const TestBody = ({children}) => <div className="cm-test-body">{children}</div>;
 
-root.render(<Root {...(window.rootConfig || {})} />);
+const platforms = {
+    mac: {
+        height: 88,
+        callback: () => {
+            const img = document.createElement('img');
+
+            img.src = '/tests/img/osx-icon.png'
+            img.className = 'cmg-osx-icon-screenshot';
+
+            document.body.appendChild(img);
+        },
+    },
+    windows: {
+        height: 16,
+        callback: () => {},
+    },
+};
+
+const Icon = () => {
+    useEffect(() => {
+        (async function () {
+            const os = 'windows';
+
+            const {
+                height,
+                callback,
+            } = platforms[os];
+
+            const src = await createIconFactory(os)(4),
+                img = document.createElement('img');
+
+            callback();
+
+            img.style.width = img.style.height = `${height}px`;
+            img.src = src;
+            img.className = `cmg-app-${os}-icon`;
+
+            document.body.appendChild(img);
+        })();
+    }, []);
+    return <></>;
+};
+
+const units = {
+    icon: Icon,
+};
+
+let root;
+
+window.application = {
+    run({
+        setReactDOM = () => null,
+        setEventBus = () => null,
+        setHistory = () => null,
+        setChatsRootStore = () => null,
+        setNotification = () => null,
+        setModal = () => null,
+        appName = '',
+        shouldShowNewSoftphone = false,
+    }) {
+        const Unit = units[appName];
+
+        if (!Unit) {
+            setReactDOM(ReactDOM);
+            setEventBus(eventBus);
+            createRootStore();
+            setHistory(history);
+            setNotification({
+                destroyAll: () => [
+                    notification,
+                    newNotification,
+                ].forEach(notification => notification.destroyAll()),
+            });
+            setModal(Modal);
+        }
+         
+        this.exit();
+
+        const container = document.createElement('div');
+        container.id = 'root';
+        document.body.appendChild(container);
+
+        root = createRoot(container);
+        root.render(Unit ? <TestBody><Unit /></TestBody> : <Root {...{ appName, shouldShowNewSoftphone }} />);
+    },
+
+    exit() {
+        const container = document.getElementById('root');
+
+        if (!container) {
+            return;
+        }
+
+        container.firstChild && root && root.unmount();
+        container.remove();
+    }
+};
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 8ae6e87b..538d9eec 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -5,6 +5,7 @@ import * as fileSaver from 'file-saver';
 import { Instance, SnapshotOut, applySnapshot, cast, getSnapshot, types } from 'mobx-state-tree';
 import moment from 'moment';
 import React from 'react';
+import { autorun } from 'mobx';
 
 import { AuthStore, getToken } from '@models/auth/AuthStore';
 import { MenuStore } from '@models/menu/MenuStore';
@@ -15,7 +16,7 @@ import { getProject } from '@/i18n';
 import { httpRpc, httpRpcAuth } from '@/rpc';
 import { HttpRpc } from '@/rpc/httpRpc';
 import { url as authUrl } from '@/rpc/httpRpcAuth';
-import { createIconFactory, getWorkplaceAvailability, isSoftphoneAvailable } from '@/utils';
+import { createIconFactory, getWorkplaceAvailability, isSoftphoneAvailable, getIpcRender } from '@/utils';
 
 const loginUrl = `${authUrl}?method=login`;
 const ACCESS_TOKEN_EXPIRED = 'access_token_expired';
@@ -36,12 +37,6 @@ type HttpRpcErrorModel = {
 
 type RequestToRefresh = (nextResolve: boolean) => void;
 
-const getIpcRender = () =>
-    (window.rootConfig?.appName === 'softphone' && (window.require || (() => null))('electron')?.ipcRenderer) || {
-        on: (): void => null,
-        send: (): void => null,
-    };
-
 const log = (message: string) =>
     getIpcRender().send('log', (typeof message === 'object' ? JSON.stringify(message) : `${message}`).trim());
 
@@ -101,15 +96,19 @@ const filterPassword = (messages: Array<string>) => {
     return messages;
 };
 
-const addClickListener = (() => {
+const createListenerAssigner = getTarget => {
     let previousHandler: () => void;
 
-    return (handler: () => void) => {
-        previousHandler && document.body.removeEventListener('click', handler);
+    return (eventName: string, handler: () => void) => {
+        previousHandler && getTarget().removeEventListener(eventName, handler);
         previousHandler = handler;
-        document.body.addEventListener('click', handler);
+        getTarget().addEventListener(eventName, handler);
     };
-})();
+};
+
+const addBodyListener = createListenerAssigner(() => document.body),
+    addClickListener = (handler: () => void) => addBodyListener('click', handler),
+    addWindowListener = createListenerAssigner(() => window);
 
 const Credentials = types.model({
     login: types.optional(types.maybeNull(types.string), null),
@@ -129,6 +128,7 @@ export const RootStore = types
         isGodMode: types.optional(types.boolean, isGodMode()),
         isIpDisallowed: types.optional(types.boolean, false),
         isLogDownloading: types.optional(types.boolean, false),
+        windowHeight: types.optional(types.number, 0),
         authStore: types.optional(AuthStore, {}),
         accountStore: types.optional(AccountStore, {}),
         menuStore: types.optional(MenuStore, {}),
@@ -158,9 +158,9 @@ export const RootStore = types
                 : new LoggerStrategy();
 
         const logger = new Logger(loggerStrategy);
+        localStorage.getItem('debugMode') === '1' && logger.enableDebugMode();
 
         logger.filter(filterPassword);
-        logger.applyToAxios(axios);
 
         const refreshAccessToken = (error: HttpRpcErrorModel, config: AxiosRequestConfig): Promise<any> => {
             const auth = getToken();
@@ -241,7 +241,7 @@ export const RootStore = types
                 }
             );
 
-            axios.interceptors.response.use(
+            window.axiosInterceptors = [axios.interceptors.response.use(
                 response => {
                     if (response.data.error) {
                         const {
@@ -298,7 +298,7 @@ export const RootStore = types
 
                     return Promise.reject(error);
                 }
-            );
+            ), logger.applyToAxios(axios)];
         };
 
         const collectLogs = (callback: (data: BlobPart) => void) => {
@@ -314,7 +314,25 @@ export const RootStore = types
             callbacks[index]?.(data);
         };
 
+        const updateWindowHeight = () => {
+            self.windowHeight = document.documentElement.clientHeight;
+        };
+
+        addWindowListener('resize', () => self.updateWindowHeight());
+
         const afterCreate = () => {
+            window.axiosInterceptors !== undefined && window.axiosInterceptors.forEach(
+                interceptor => axios.interceptors.response.eject(interceptor)
+            );
+
+            const classList = document?.body?.classList;
+
+            window.rootConfig?.appName === 'softphone' ?
+                classList?.add('cm-body-desktop') :
+                classList?.remove('cm-body-desktop');
+
+            self.updateWindowHeight();
+
             callbacks = [];
             let isMaximizedCurrently = false;
 
@@ -324,6 +342,7 @@ export const RootStore = types
             };
 
             const createIcon = createIconFactory(window.rootConfig?.platform === 'mac' ? 'mac' : 'windows');
+            const toNumber = value => (value ? (typeof value === 'number' ? value : parseInt(value, 0)) : 0);
 
             const setCounter = (values: Partial<typeof counters>) => {
                 let oldValue = 0,
@@ -331,7 +350,7 @@ export const RootStore = types
 
                 Object.keys(counters).forEach((key: keyof typeof counters) => {
                     oldValue += counters[key];
-                    key in values && (counters[key] = values[key]);
+                    key in values && (counters[key] = toNumber(values[key]));
                     newValue += counters[key];
                 });
 
@@ -339,6 +358,7 @@ export const RootStore = types
                     return;
                 }
 
+                logger.log('Set missing event counter', newValue);
                 getIpcRender().send('set-icon', createIcon(newValue));
             };
 
@@ -384,6 +404,8 @@ export const RootStore = types
                 getIpcRender().send('autolauncherchange', value)
             );
 
+            eventBus.subscribe('open-logs-dir', () => getIpcRender().send('open-logs-dir'));
+
             getIpcRender().on('maximize', () => (self as RootInstance).setMaximized(true));
             getIpcRender().on('unmaximize', () => (self as RootInstance).setMaximized(false));
 
@@ -408,6 +430,8 @@ export const RootStore = types
                     eventBus.broadcast('checkstartminimize', data.isStartMinimize)
                 );
 
+                getIpcRender().on('app-version', (event, version) => eventBus.broadcast('app-version', version));
+                getIpcRender().on('update-available', (event, data) => eventBus.broadcast('update-available', data));
                 getIpcRender().on('update-downloaded', () => (self as RootInstance).setUpdateReceived(true));
                 getIpcRender().on('maximize', () => eventBus.broadcast('maximize'));
                 getIpcRender().on('unmaximize', () => eventBus.broadcast('unmaximize'));
@@ -425,6 +449,8 @@ export const RootStore = types
 
             eventBus.subscribe('get-clicked', (callback: (clicked: boolean) => void) => callback(clicked));
             eventBus.subscribe('set-not-clicked', () => (clicked = false));
+
+            eventBus.subscribe('download', (url: string) => getIpcRender().send('download', url));
         };
 
         const resetStore = () => {
@@ -436,8 +462,14 @@ export const RootStore = types
             });
         };
 
-        const setMaximized = (value: boolean) => (self.isMaximized = value),
-            setAuthError = (value: string) => (self.authError = value),
+        const setMaximized = (value: boolean) => {
+            self.isMaximized = value;
+            const classList = document?.body?.classList;
+
+            value ? classList?.add('cm-body-maximized') : classList?.remove('cm-body-maximized');
+        };
+
+        const setAuthError = (value: string) => (self.authError = value),
             setUpdateReceived = (value: boolean) => (self.isUpdateReceived = !!value),
             setCredentials = (value: Array<CredentialsSnapshot>) => (self.credentials = cast(value));
 
@@ -465,6 +497,8 @@ export const RootStore = types
             handleLogsCollected,
             toggleSoftphoneVisiblity,
             setSoftphoneVisiblity,
+            updateWindowHeight,
+            log: (messages: Array<any>) => logger.log(messages),
         };
     });
 
@@ -475,7 +509,8 @@ export type DependencyInjection = {
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({}, { httpRpc, httpRpcAuth });
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}, { httpRpc, httpRpcAuth }));
 
 type RootInstanceSnapshotOut = SnapshotOut<typeof RootStore>;
 
diff --git a/src/models/auth/AuthStore.ts b/src/models/auth/AuthStore.ts
index fa214b30..0399e06a 100644
--- a/src/models/auth/AuthStore.ts
+++ b/src/models/auth/AuthStore.ts
@@ -1,19 +1,51 @@
 import { eventBus } from '@comagic/core';
 import axios from 'axios';
-import { flow, getEnv, getParent, getRoot, types } from 'mobx-state-tree';
+import { flow, getEnv, getRoot, types } from 'mobx-state-tree';
 
 import { getProject } from '@/i18n';
 import { cancelPendingRequests } from '@/rpc/httpRpc';
-import { deleteCookie, generateTraceId, getCookie, setCookie } from '@/utils';
+import { deleteCookie, getCookie, getIpcRender, setCookie } from '@/utils';
+import { generateTraceId } from '@/utils';
 import { Options } from '@/utils/cookie';
 
-import { RootInstance, RootStore } from '../RootStore';
+import { RootStore } from '../RootStore';
 import { Loader } from '../shared';
 
 export type LoginUser = {
     login: string;
     password: string;
-    dont_keep_me_signed_in: boolean;
+    is_checked: boolean;
+};
+
+export type RecoverParams = {
+    login: string;
+};
+
+export type ResetPasswordTypes = 'phone' | 'email';
+
+export type SendCodeParamsToRecoveryPassword = {
+    email: string | null;
+    phone: string | null;
+};
+
+export type SendCodeResponse = {
+    id: string | number;
+};
+
+export type SendCodeResponseToRecoveryPassword = {
+    email: string | null;
+    phone: string | null;
+    expire: number;
+    success: boolean;
+    comment: string | null;
+};
+
+export type CheckCodeParamsToRecoveryPassword = {
+    secret: string;
+};
+
+export type UpdatePasswordParams = {
+    password: string;
 };
 
 type Auth = {
@@ -21,7 +53,30 @@ type Auth = {
     refresh: string;
 };
 
-const AUTH_KEY = process.env.REACT_APP_AUTH_COOKIE || '$REACT_APP_AUTH_COOKIE';
+export type RecoveryPasswordResponse = {
+    email: string | null;
+    phone: string | null;
+};
+
+type ResponseCheckData = {
+    success: boolean;
+};
+
+const ssoAuthUrl: string = process.env.REACT_APP_SSO_AUTH_URL || '$REACT_APP_SSO_AUTH_URL';
+
+const httpSSOClient = async <D>(method: string, data?: D) => {
+    return await axios.post(method, data, { baseURL: ssoAuthUrl, withCredentials: true });
+};
+
+const isApp2 = ['analytics2.comagic.ru', 'go2.comagic.ru', 'analytics2.uiscom.ru', 'go2.uiscom.ru'].includes(
+    window.location.hostname
+);
+
+let AUTH_KEY = process.env.REACT_APP_AUTH_COOKIE || '$REACT_APP_AUTH_COOKIE';
+
+if (isApp2) {
+    AUTH_KEY += '_pp';
+}
 
 const getCookieDomain = () => {
     return window.location.hostname.split('.').slice(-2).join('.');
@@ -35,17 +90,17 @@ export const getToken = (): Auth => {
     return JSON.parse(token);
 };
 
-const setToken = (auth: Auth, dontKeepMeSignedIn = false) => {
+const setToken = (auth: Auth | string, remember_me = false) => {
     const options = {
         secure: true,
         domain: getCookieDomain(),
     } as Options;
-    if (!dontKeepMeSignedIn) {
-        const twoWeeks = new Date(Date.now() + 2 * 7 * 24 * 60 * 60 * 1000);
-        options.expires = twoWeeks;
+
+    if (remember_me) {
+        options.expires = new Date(Date.now() + 2 * 7 * 24 * 60 * 60 * 1000);
     }
-    setCookie(AUTH_KEY, JSON.stringify(auth), options);
 
+    setCookie(AUTH_KEY, JSON.stringify(auth), options);
     window.dispatchEvent(new Event('tokenChange'));
 };
 
@@ -80,6 +135,7 @@ const getJwtPayload = (): JwtPayload => {
 const removeToken = (skipLocalStorage = false) => {
     if (!skipLocalStorage) {
         deleteCookie(AUTH_KEY, { secure: true, domain: getCookieDomain() });
+        localStorage.removeItem(AUTH_KEY);
         sessionStorage.removeItem(AUTH_KEY);
         sessionStorage.removeItem('access_token');
     }
@@ -92,10 +148,14 @@ const removeToken = (skipLocalStorage = false) => {
 
 export const AuthStore = Loader.named('AuthStore')
     .props({
-        dontKeepMeSignedIn: types.optional(types.boolean, false),
-        isAuthorized: types.optional(types.boolean, Boolean(getToken())),
+        isAuthorized: types.optional(types.maybeNull(types.boolean), null),
         isTokenRefreshing: types.optional(types.boolean, false),
         windowId: types.optional(types.string, generateTraceId('local')),
+        isConfirmLoginRequired: types.optional(types.maybeNull(types.boolean), false),
+        login: types.optional(types.string, ''),
+        password: types.optional(types.string, ''),
+        isChecked: types.optional(types.boolean, false),
+        dontKeepMeSignedIn: types.optional(types.boolean, false),
     })
     .views(self => ({
         get token(): Auth {
@@ -105,15 +165,29 @@ export const AuthStore = Loader.named('AuthStore')
     .actions(self => {
         const { httpRpcAuth } = getEnv(self);
         const { authStore, accountStore, notificationStore, resetStore } = getRoot<typeof RootStore>(self);
+        let refreshingCall: Promise<void>;
+
+        const broadcastAuthorizedness = () => eventBus.broadcast('set_authorized', self.isAuthorized);
 
         const setAuthorized = (isAuthorized: boolean) => {
             self.isAuthorized = isAuthorized;
+            broadcastAuthorizedness();
+        };
+
+        const setIsConfirmLoginRequired = (isConfirmLoginRequired: boolean) => {
+            self.isConfirmLoginRequired = isConfirmLoginRequired;
         };
 
         const setIsTokenRefreshing = (value: boolean) => {
             self.isTokenRefreshing = value;
         };
 
+        const setLoginFormValues = (login: string, password: string, isChecked: boolean) => {
+            self.login = login;
+            self.password = password;
+            self.isChecked = isChecked;
+        };
+
         const cancelNotifications = () => {
             notificationStore.stackingNotificationInstance?.destroyAll();
             notificationStore.cancelNotifications();
@@ -125,19 +199,33 @@ export const AuthStore = Loader.named('AuthStore')
             setAuthorized(false);
             cancelPendingRequests('canceled by logout');
             eventBus.broadcast('logout');
+            getIpcRender().send('logout');
             removeToken(skipLocalStorage);
             self.setLoading(false);
         };
 
-        const fetchLoginUser = flow(function* ({
-            login,
-            password,
-            dont_keep_me_signed_in: dontKeepMeSignedIn,
-        }: LoginUser) {
-            self.setLoading(true);
-            self.dontKeepMeSignedIn = dontKeepMeSignedIn;
+        const loginSSO = flow(function* (username: string, password: string, is_checked: boolean) {
+            try {
+                yield httpSSOClient('api-login', {
+                    username,
+                    password,
+                    project: getProject(),
+                    identity_provider: 'comagic_db',
+                    sliding_expiration: !is_checked,
+                });
+
+                setAuthorized(true);
+                window.dispatchEvent(new Event('loginSSO'));
+                // setToken({ jwt: localStorage.getItem('auth'), refresh: 'sso' }, is_checked);
+            } catch (e) {
+                return Promise.reject(e);
+            } finally {
+                self.setLoading(false);
+            }
+        });
 
-            getParent<RootInstance>(self).setAuthError('');
+        const loginJWT = flow(function* (login: string, password: string, is_checked: boolean, confirmCode?: string) {
+            self.setLoading(true);
 
             try {
                 const token = getToken();
@@ -148,10 +236,18 @@ export const AuthStore = Loader.named('AuthStore')
                     password,
                     project: getProject(),
                     old_jwt,
+                    code: confirmCode,
                 });
 
-                setToken(auth, dontKeepMeSignedIn);
-                setAuthorized(true);
+                if (auth.is_2fa_enabled) {
+                    setIsConfirmLoginRequired(true);
+                    setLoginFormValues(login, password, is_checked);
+                } else {
+                    setToken(auth, is_checked);
+                    setIsConfirmLoginRequired(false);
+                    setLoginFormValues('', '', false);
+                    setAuthorized(true);
+                }
             } catch (e) {
                 removeToken();
 
@@ -161,7 +257,34 @@ export const AuthStore = Loader.named('AuthStore')
             }
         });
 
+        const hasSSOAuth = () => process.env.REACT_APP_TEST_MODE == 'true'
+            ? window.hasSSOAuth
+            : !ssoAuthUrl.endsWith('REACT_APP_SSO_AUTH_URL') && Boolean(ssoAuthUrl);
+
+        const fetchLoginUser = flow(function* ({ login, password, is_checked, dont_keep_me_signed_in }: LoginUser) {
+            self.dontKeepMeSignedIn = dont_keep_me_signed_in;
+            hasSSOAuth() ? yield loginSSO(login, password, is_checked) : yield loginJWT(login, password, is_checked);
+
+            getRoot(self).setAuthError('');
+        });
+
         const fetchRefresh = flow(function* () {
+            if (hasSSOAuth()) {
+                return;
+            }
+
+            let resolve = (): void => null,
+                reject = (e: any): void => null;
+
+            if (self.isTokenRefreshing) {
+                return refreshingCall;
+            }
+
+            refreshingCall = new Promise((value1, value2) => {
+                resolve = value1;
+                reject = value2;
+            });
+
             try {
                 setIsTokenRefreshing(true);
 
@@ -170,24 +293,42 @@ export const AuthStore = Loader.named('AuthStore')
                 const nextAuth = yield httpRpcAuth('refresh', auth);
 
                 setToken(nextAuth);
+                window.dispatchEvent(new Event('tokenRefreshed'));
+
+                resolve();
             } catch (e) {
-                void fetchLogoutUser();
+                reject(e);
+                e?.message !== 'canceled by logout' && void fetchLogoutUser();
                 return Promise.reject(e);
             } finally {
                 setIsTokenRefreshing(false);
             }
+
+        });
+
+        const fetchResendConfirmationCode = flow(function* () {
+            yield loginJWT(self.login, self.password, self.isChecked);
+        });
+
+        const fetchConfirmLogin = flow(function* (code: string) {
+            yield loginJWT(self.login, self.password, self.isChecked, code);
         });
 
         const fetchLogoutUser = flow(function* () {
             self.setLoading(true);
 
             try {
-                const token = getToken();
-                const jwt = token?.jwt;
-
-                yield httpRpcAuth('logout', {
-                    jwt,
-                });
+                if (hasSSOAuth()) {
+                    yield httpSSOClient('api-logout');
+                    window.dispatchEvent(new Event('logoutSSO'));
+                } else {
+                    const token = getToken();
+                    const jwt = token?.jwt;
+
+                    yield httpRpcAuth('logout', {
+                        jwt,
+                    });
+                }
             } catch (e) {
                 return Promise.reject(e);
             } finally {
@@ -195,11 +336,86 @@ export const AuthStore = Loader.named('AuthStore')
             }
         });
 
+        const checkAuth = flow(function* () {
+            if (!hasSSOAuth()) {
+                setAuthorized(Boolean(getToken()));
+                return;
+            }
+
+            try {
+                yield axios.get('sso/check', {
+                    baseURL: ssoAuthUrl,
+                    withCredentials: true,
+                });
+
+                setAuthorized(true);
+            } catch (e) {
+                setAuthorized(false);
+
+                return Promise.reject(e);
+            }
+        });
+
+        const getRecoveryPasswordInfo = flow(function* ({ login }: RecoverParams) {
+            try {
+                const response: { data: RecoveryPasswordResponse } = yield httpSSOClient(
+                    'api-recovery-password/comagic_db/sid/login',
+                    {
+                        login,
+                        project: 'megafon',
+                    }
+                );
+                return response.data;
+            } catch (e) {
+                return Promise.reject(e);
+            }
+        });
+
+        const fetchSendCodeToRecoveryPassword = flow(function* ({ email, phone }: SendCodeParamsToRecoveryPassword) {
+            try {
+                const response: { data: SendCodeResponseToRecoveryPassword } = yield httpSSOClient(
+                    'api-recovery-password/comagic_db/sid/send',
+                    {
+                        email,
+                        phone,
+                    }
+                );
+                return response.data;
+            } catch (e) {
+                return Promise.reject(e);
+            }
+        });
+
+        const fetchCheckCodeToRecoveryPassword = flow(function* ({ secret }: CheckCodeParamsToRecoveryPassword) {
+            try {
+                const response: { data: ResponseCheckData } = yield httpSSOClient(
+                    'api-recovery-password/comagic_db/sid/check',
+                    { secret }
+                );
+                return response.data;
+            } catch (e) {
+                return Promise.reject(e);
+            }
+        });
+
+        const fetchUpdatePassword = flow(function* ({ password }: UpdatePasswordParams) {
+            try {
+                yield httpSSOClient('api-recovery-password/comagic_db/sid/password', {
+                    new_password1: password,
+                    new_password2: password,
+                });
+            } catch (e) {
+                return Promise.reject(e);
+            }
+        });
+
         const afterCreate = () => {
+            eventBus.subscribe('get_authorized', broadcastAuthorizedness);
+
             window.addEventListener('doLogoutUser', (event: CustomEvent) => {
                 const eventWindowId = event.detail;
                 if (eventWindowId !== authStore.windowId) {
-                    void authStore.logout(true);
+                    void authStore.fetchLogoutUser();
                 }
             });
             window.addEventListener('doRefreshToken', (event: CustomEvent) => {
@@ -207,10 +423,6 @@ export const AuthStore = Loader.named('AuthStore')
                 if (eventWindowId !== authStore.windowId) {
                     authStore
                         .fetchRefresh()
-                        .then(() => {
-                            const tokenRefreshedEvent = new Event('tokenRefreshed');
-                            window.dispatchEvent(tokenRefreshedEvent);
-                        })
                         .catch(e => console.error(e));
                 }
             });
@@ -226,6 +438,8 @@ export const AuthStore = Loader.named('AuthStore')
                         if (accountStoreUserId !== null && jwtUserId !== accountStoreUserId) {
                             window.location.href = '/';
                         }
+                    } else if (accountStore.account.project === 'novofon') {
+                        window.location.reload();
                     }
                 }
             }, 1000);
@@ -233,10 +447,20 @@ export const AuthStore = Loader.named('AuthStore')
 
         return {
             fetchLoginUser,
+            fetchResendConfirmationCode,
+            fetchConfirmLogin,
             fetchLogoutUser,
             fetchRefresh,
             logout,
             setIsTokenRefreshing,
             afterCreate,
+            setIsConfirmLoginRequired,
+            setLoginFormValues,
+            fetchUpdatePassword,
+            checkAuth,
+            getRecoveryPasswordInfo,
+            fetchSendCodeToRecoveryPassword,
+            fetchCheckCodeToRecoveryPassword,
+            hasSSOAuth,
         };
     });
diff --git a/src/rpc/httpRpc.ts b/src/rpc/httpRpc.ts
index 8c0a28d7..ce190fe9 100644
--- a/src/rpc/httpRpc.ts
+++ b/src/rpc/httpRpc.ts
@@ -25,10 +25,11 @@ export type HttpRpc = <T>(
 
 const baseUrl: string = process.env.REACT_APP_BASE_URL || '$REACT_APP_BASE_URL';
 
-let cancelTokenSource: CancelTokenSource = axios.CancelToken.source();
+let cancelTokenSource: CancelTokenSource = null;
+const getCancelTokenSource = () => cancelTokenSource || (cancelTokenSource = axios.CancelToken.source());
 
 export const cancelPendingRequests = (message?: string): void => {
-    cancelTokenSource.cancel(message);
+    getCancelTokenSource().cancel(message);
     cancelTokenSource = axios.CancelToken.source();
 };
 
@@ -45,7 +46,7 @@ const httpRpc: HttpRpc = async <T>(method: string, params = {}, headers = {}, ur
         data: rpcParams,
         url: `${url}?method=${method}`,
         headers,
-        cancelToken: cancelTokenSource.token,
+        cancelToken: getCancelTokenSource().token,
     };
 
     try {
diff --git a/src/utils/cookie.ts b/src/utils/cookie.ts
index 05ee942e..bb7ab355 100644
--- a/src/utils/cookie.ts
+++ b/src/utils/cookie.ts
@@ -40,6 +40,7 @@ const resetElectronCookiesManager = () => {
     return electronCookiesManager;
 };
 
+window.resetElectronCookiesManager = resetElectronCookiesManager;
 window.getElectronCookiesManager = resetElectronCookiesManager;
 const prepareName = (name: string) => encodeURIComponent(name.replace(/([.$?*|{}()[\]\\/+^])/g, '\\$1'));
 
diff --git a/src/utils/index.ts b/src/utils/index.ts
index 09650fcc..19e5cbaf 100644
--- a/src/utils/index.ts
+++ b/src/utils/index.ts
@@ -5,6 +5,9 @@ export { default as getComagicWebUrl } from './getComagicWebUrl';
 export { default as loadTheme } from './loadTheme';
 export { default as setAxiosGlobalInterceptors } from './setAxiosGlobalInterceptors';
 export { default as getWorkplaceAvailability } from './getWorkplaceAvailability';
+export { default as getChatSettingsAvailability } from './getChatSettingsAvailability';
 export { default as isSoftphoneAvailable } from './isSoftphoneAvailable';
 export { default as isManager } from './isManager';
-export { default as createIconFactory } from './createIcon';
+export { default as getIpcRender } from './getIpcRender';
+
+export const createIconFactory = (os = 'windows') => counter => [os, counter].join(', ');
