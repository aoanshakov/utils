diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 4bb7d78..f8f8b48 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -2,7 +2,7 @@ import { intlMessages } from '../i18n';
 import { AuthStore } from './auth/AuthStore';
 import { CallHistoryStore } from './call_history/CallHistoryStore';
 import { EmployeesStore } from './employees/EmployeesStore';
-import { RootStore as SoftphoneStore, createRootStore } from 'uis-softphone/models/RootStore';
+import { RootStore as SoftphoneStore, createRootStore as createSoftphoneStore } from 'uis-softphone/models/RootStore';
 import { StatusesStore } from './statuses/StatusesStore';
 import { WebsocketStore } from './websocket/WebsocketStore';
 import { CallStatsStore } from '@models/call_stats/CallStatsStore';
@@ -37,7 +37,7 @@ const createFocusednessGetter = () => {
 
     return createDefaultFocusednessGetter({
         handleFocusChange: isFocused => !isFocused && (clicked = false),
-        shouldConsiderFocused: () => clicked
+        shouldConsiderFocused: () => clicked,
     });
 };
 
@@ -64,7 +64,6 @@ export const RootStore = types
         websocketStore: types.optional(WebsocketStore, {}),
         feedbackStore: types.optional(FeedbackStore, {}),
         promperStore: types.optional(PromperStore, {}),
-        softphoneStore: types.optional(types.maybeNull(SoftphoneStore), null),
         statusesStore: types.optional(StatusesStore, {}),
         callHistoryStore: types.optional(CallHistoryStore, {}),
         callStatsStore: types.optional(CallStatsStore, {}),
@@ -77,7 +76,7 @@ export const RootStore = types
     .actions(self => {
         let initialState: RootInstanceSnapshotOut,
             hasError = false,
-            doRequest = () => null,
+            doRequest = () => null;
 
         const accountFetchedHandlers = [],
             applicationChangeHandlers = [],
@@ -87,6 +86,7 @@ export const RootStore = types
             setSoftphoneAvailable = value => (self.isSoftphoneAvailable = value),
             incrementResizeCount = () => (self.resizeCount ++);
 
+
         const removeSubscriptions = () => {
             subscriptionRemovers.forEach(removeSubscription => removeSubscription());
             subscriptionRemovers = [];
@@ -98,12 +98,13 @@ export const RootStore = types
                 isSingleApp = isElectron(),
                 enablingHandlers = [];
             hasError = false;
-            subscriptionRemovers = [];
 
             let authStore,
                 call = () => null,
                 isAuthorized = false;
 
+            removeSubscriptions();
+
             self.toTopOnCall = localStorage.getItem('clct:to_top_on_call') !== 'false';
             self.closeOnCallEnd = localStorage.getItem('clct:close_on_call_end') !== 'false';
 
@@ -185,7 +186,7 @@ export const RootStore = types
 
             const shouldDisplayCallNotification = phone => !self.promperStore.checkPendingCallToPrompt(phone); 
 
-            self.softphoneStore = createRootStore( {
+            self.softphoneStore = createSoftphoneStore({
                 shouldDisplayCallNotification,
                 getPhoneNumber: () => '',
                 getWebRTCConfig: doGetWebRTCConfig,
@@ -254,9 +255,9 @@ export const RootStore = types
                                     shouldInitialize,
                                     coreStore: {
                                         changeAuthToken,
-                                        authorize,
+                                        authenticate,
                                     },
-                                } = self.softphoneStore.coreStore;
+                                } = self.softphoneStore;
 
                                 shouldInitialize ? authorize() : changeAuthToken(token);
                                 requests.forEach(action => action.request(action.args));
@@ -321,11 +322,11 @@ export const RootStore = types
 
                 subscribe('update_downloaded', () => self.softphoneStore.uiStore.showMessage({
                     id: 'update-downloaded',
-                    title: 'Update received',
+                    title: self.i18n('Update received'),
                     buttons: [{
                         id: 'update',
-                        text: 'Update',
-                        handler: () => eventBus.broadcast('quit_and_install')
+                        text: self.i18n('Update'),
+                        event: 'quit_and_install'
                     }]
                 }));
 
@@ -362,7 +363,44 @@ export const RootStore = types
             };
 
             addMiddleware(self.softphoneStore, (call, next) => {
-                const result = next(call);
+                next(call, result => {
+                    if (call.name == 'interceptRequest') {
+                        const { request, ...args } = result;
+
+                        [['success', response => {
+                            const url = (url => url[0] == '/' ? url : `/${url}`)(args.url);
+
+                            url == '/sup/api/v1/users/me/calls' &&
+                                self.callHistoryStore.resetLostCallsCount();
+
+                            url == '/sup/api/v1/users/me' &&
+                                self.callHistoryStore.setLostCallsCount(response.lost_call_count);
+                        }], ['failure', () => null]].forEach(([name, additionalCallback]) => {
+                            const callback = args[name] || (() => null);
+
+                            args[name] = response => {
+                                additionalCallback(response);
+
+                                switch (response?.error?.mnemonic) {
+                                    case 'expired_token':
+                                        requests.push({ request, args });
+                                        self.authStore.doShellRefreshToken();
+                                        break;
+                                    case 'invalid_token':
+                                        logout();
+                                        break;
+                                    default:
+                                        callback(response);
+                                }
+                            };
+                        });
+
+                        request(args);
+                        return;
+                    }
+
+                    return result;
+                });
 
                 call.name == 'toggleCallInfoCollapsedness' && self.setNotLarge();
                 call.name == 'setSettings' && broadcast('settings_fetched', ...call.args);
@@ -388,43 +426,6 @@ export const RootStore = types
                         !data.data?.destroyed &&
                         self.softphoneStore.coreStore.error == 'appAlreadyOpened' &&
                         authorize();
-
-                    return;
-                }
-
-                if (call.name == 'interceptRequest') {
-                    const { request, ...args } = result;
-
-                    [['success', response => {
-                        const url = (url => url[0] == '/' ? url : `/${url}`)(args.url);
-
-                        url == '/sup/api/v1/users/me/calls' &&
-                            self.callHistoryStore.resetLostCallsCount();
-
-                        url == '/sup/api/v1/users/me' &&
-                            self.callHistoryStore.setLostCallsCount(response.lost_call_count);
-                    }], ['failure', () => null]].forEach(([name, additionalCallback]) => {
-                        const callback = args[name] || (() => null);
-
-                        args[name] = response => {
-                            additionalCallback(response);
-
-                            switch (response?.error?.mnemonic) {
-                                case 'expired_token':
-                                    requests.push(action);
-                                    self.authStore.doShellRefreshToken();
-                                    break;
-                                case 'invalid_token':
-                                    logout();
-                                    break;
-                                default:
-                                    callback(response);
-                            }
-                        };
-                    });
-
-                    request(args);
-                    return;
                 }
             });
 
@@ -558,8 +559,6 @@ export const RootStore = types
                 () => self.softphoneStore.uiStore.toggleWidgetVisiblity()
             );
 
-            removeSubscriptions();
-
             subscribe('outgoing_call', phoneNumber => self.call(phoneNumber));
             subscribe('contacts_page_initialized', () => broadcast('settings_fetched', self.softphoneStore.settings));
 
@@ -704,4 +703,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
\ No newline at end of file
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
\ No newline at end of file
