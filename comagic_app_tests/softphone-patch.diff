diff --git a/package.json b/package.json
index 57ea05a..691ceb7 100644
--- a/package.json
+++ b/package.json
@@ -57,9 +57,6 @@
   },
   "dependencies": {
     "@babel/runtime": "^7.13.9",
-    "@comagic/core": "^0.7.0",
-    "@comagic/softphone-core": "2.0.1",
-    "@comagic/softphone-widget": "2.0.10",
     "async-mutex": "^0.3.2",
     "axios": "^0.24.0",
     "classnames": "^2.2.6",
@@ -71,18 +68,13 @@
     "filesize": "^8.0.3",
     "formik": "^2.2.9",
     "janus-gateway": "1.1.4",
-    "magic-ui": "0.0.0-int1",
     "mobx": "^6.1.8",
     "mobx-react-lite": "^3.2.0",
     "mobx-state-tree": "^5.0.1",
     "moment": "2.29.1",
     "nanoid": "^3.2.0",
-    "react": "^18.2.0",
     "react-csv": "^2.0.3",
-    "react-dom": "^18.2.0",
-    "react-intl": "6.3.2",
     "react-redux": "^7.0.0",
-    "react-router-dom": "6.9.0",
     "redux": "^4.0.0",
     "redux-thunk": "^2.3.0",
     "short-uuid": "^4.2.0",
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index b6ca744..3c5f3c6 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -4,6 +4,7 @@ import { CallHistoryStore } from './call_history/CallHistoryStore';
 import { CallStatsStore } from '@models/call_stats/CallStatsStore';
 import { FeedbackDesktopStore } from '@models/feedback/FeedbackDesktopStore';
 import { PromperStore, ChannelNumber } from '@models/prompter/PromperStore';
+import Logger, { EventBasedLoggerStrategy } from '@comagic/logger';
 import { autorun } from 'mobx';
 import { AxiosResponse, AxiosError } from 'axios';
 import React from 'react';
@@ -39,7 +40,7 @@ import {
 } from '@comagic/softphone-widget';
 
 import { Session } from '@comagic/softphone-core';
-import { getResponse, createFileLogger } from '@comagic/softphone-core/src/utils';
+import { getResponse } from '@comagic/softphone-core/src/utils';
 import { eventBus } from '@comagic/core';
 import { AccountStoreInstance } from '@comagic/core/lib/models/account/account.d';
 
@@ -115,54 +116,18 @@ export const RootStore = types
             hasError = false,
             doRequest = (args: unknown): Promise<unknown> => Promise.reject(),
             setMounted = (): void => null,
-            subscriptionRemovers: Array<() => void> = [],
             authStore: HostAuthStore,
             isAuthorized = false,
             isInChatsMode = false,
             handleAccountFetched = (args: unknown): void => null;
 
         const isSingleApp = isElectron();
-
-        const logger = isSingleApp
-            ? {
-                  downloadLog: () => eventBus.broadcast('collect_logs'),
-                  log: (...messages: unknown[]) => eventBus.broadcast('log', ...messages),
-              }
-            : createFileLogger();
-
-        const loggingEventBus = {
-            broadcast(eventName: string, ...args: unknown[]): void {
-                logger.log(`EventBus: Broadcast event "${eventName}" with arguments`, args);
-                eventBus.broadcast(eventName, ...args);
-            },
-
-            subscribe(eventName: string, callback: (...args: unknown[]) => void): () => void {
-                logger.log(`EventBus: Subscribe to event "${eventName}"`);
-
-                const removeSubscription = eventBus.subscribe(eventName, (...args: unknown[]) => {
-                    logger.log(`EventBus: Event "${eventName}" occured with arguments`, args);
-                    callback.apply(null, args);
-                });
-
-                return () => {
-                    logger.log(`EventBus: Remove subscription to event "${eventName}"`);
-                    removeSubscription();
-                };
-            },
-        };
-
-        const subscribe = (...args: unknown[]) =>
-            subscriptionRemovers.push(loggingEventBus.subscribe.apply(eventBus, args));
+        self.logger = new Logger(new EventBasedLoggerStrategy(eventBus));
 
         const accountFetchedHandlers: Array<AccountFetchedHandlers> = [],
             setSoftphoneAvailable = (value: boolean) => (self.isSoftphoneAvailable = value),
             incrementResizeCount = () => self.resizeCount++;
 
-        const removeSubscriptions = () => {
-            subscriptionRemovers.forEach(removeSubscription => removeSubscription());
-            subscriptionRemovers = [];
-        };
-
         const size = {
             width: 0,
             height: 0,
@@ -174,13 +139,11 @@ export const RootStore = types
                 enablingHandlers: Array<() => void> = [];
             hasError = false;
 
-            removeSubscriptions();
-
             self.toTopOnCall = localStorage.getItem('clct:to_top_on_call') !== 'false';
             self.closeOnCallEnd = localStorage.getItem('clct:close_on_call_end') !== 'false';
 
             const broadcast = (...args: unknown[]) => {
-                const doBroadcast = (): void => void loggingEventBus.broadcast.apply(eventBus, args),
+                const doBroadcast = (): void => void eventBus.broadcast.apply(eventBus, args),
                     force = args[2];
 
                 if (!(self as RootInstance).softphoneStore.coreStore.available && !force) {
@@ -218,9 +181,9 @@ export const RootStore = types
                           userAgent: 'UIS Softphone Web',
                           opaqueIdPrefix: 'janus-softphone-web',
                       }),
-                createFileLogger: () => logger,
-                triggerEvent: (eventName: string) => loggingEventBus.broadcast(eventName),
+                triggerEvent: (eventName: string) => eventBus.broadcast(eventName),
                 softphoneHost: process.env.REACT_APP_SOFTPHONE_BACKEND_HOST || '$REACT_APP_SOFTPHONE_BACKEND_HOST',
+                logger: self.logger,
                 debugMode: localStorage.getItem('debugMode') == '1',
                 getPhoneNumber: () => '',
                 createFocusednessGetter: isSingleApp ? createFocusednessGetter : createDefaultFocusednessGetter,
@@ -346,7 +309,7 @@ export const RootStore = types
                             if (isSoftphoneAvailable()) {
                                 const {
                                     shouldInitialize,
-                                    coreStore: { changeAuthToken, authenticate },
+                                    coreStore: { changeAuthToken },
                                 } = (self as RootInstance).softphoneStore;
 
                                 shouldInitialize ? authorize() : changeAuthToken(token);
@@ -397,7 +360,7 @@ export const RootStore = types
                         isAuthenticatedDesktopWithoutSoftphone &&
                         !isWorkplaceAvailable
                     ) {
-                        loggingEventBus.broadcast(
+                        eventBus.broadcast(
                             'set_auth_error',
                             self.i18n('No permissions for workplace'),
                         );
@@ -439,16 +402,21 @@ export const RootStore = types
                         mounted: true,
                     });
 
-                subscribe('checkautolauncher', (isStartApp: boolean) => (self as RootInstance).setStartApp(isStartApp));
-                subscribe('checkstartminimize', (isStartMinimize: boolean) =>
+                eventBus.subscribe(
+                    'checkautolauncher',
+                    (isStartApp: boolean) => (self as RootInstance).setStartApp(isStartApp)
+                );
+
+                eventBus.subscribe('checkstartminimize', (isStartMinimize: boolean) =>
                     (self as RootInstance).setStartMinimize(isStartMinimize)
                 );
-                subscribe('maximize', () => (self as RootInstance).setLarge(true));
-                subscribe('unmaximize', () => (self as RootInstance).setLarge(false));
 
-                loggingEventBus.broadcast('app_ready');
-                size.width && size.height && loggingEventBus.broadcast('size', size);
-                loggingEventBus.broadcast(self.isLarge ? 'maximize' : 'unmaximize');
+                eventBus.subscribe('maximize', () => (self as RootInstance).setLarge(true));
+                eventBus.subscribe('unmaximize', () => (self as RootInstance).setLarge(false));
+
+                eventBus.broadcast('app_ready');
+                size.width && size.height && eventBus.broadcast('size', size);
+                eventBus.broadcast(self.isLarge ? 'maximize' : 'unmaximize');
 
                 return { authorize };
             })();
@@ -526,13 +494,13 @@ export const RootStore = types
                 );
 
                 coreStore.on(['ended', 'failed'], () => {
-                    loggingEventBus.broadcast('call_end', self.closeOnCallEnd);
+                    eventBus.broadcast('call_end', self.closeOnCallEnd);
                     self.callHistoryStore.refreshData(RECENT_REFRESH_DELAY);
                 });
 
                 const handleCallStart = () => {
                     isSingleApp && self.callHistoryStore.setContact(null);
-                    loggingEventBus.broadcast('call_start', self.toTopOnCall);
+                    eventBus.broadcast('call_start', self.toTopOnCall);
                 };
 
                 coreStore.on('sending', handleCallStart);
@@ -602,15 +570,15 @@ export const RootStore = types
                 (self as RootInstance).softphoneStore.uiStore.toggleWidgetVisiblity()
             );
 
-            subscribe('outgoing_call', (phoneNumber: string) =>
+            eventBus.subscribe('outgoing_call', (phoneNumber: string) =>
                 (self as RootInstance).softphoneStore.coreStore.call(phoneNumber)
             );
 
-            subscribe('contacts_page_initialized', () =>
+            eventBus.subscribe('contacts_page_initialized', () =>
                 broadcast('settings_fetched', (self as RootInstance).softphoneStore.settings)
             );
 
-            subscribe('prepare_to_prompter_call', (data: PrompterCall) => {
+            eventBus.subscribe('prepare_to_prompter_call', (data: PrompterCall) => {
                 const {
                     coreStore: { sendCrossTabMessage },
                     uiStore: { showWidget },
@@ -632,7 +600,7 @@ export const RootStore = types
                 handlePrompterCallPreparing(data, broadcast);
             });
 
-            subscribe('end_prompter_call', () => {
+            eventBus.subscribe('end_prompter_call', () => {
                 const {
                     coreStore: { terminate },
                 } = (self as RootInstance).softphoneStore;
@@ -662,7 +630,7 @@ export const RootStore = types
             self.isLarge = false;
             localStorage.setItem('isLarge', 'false');
 
-            loggingEventBus.broadcast('unmaximize');
+            eventBus.broadcast('unmaximize');
         };
 
         const setIsLarge = () => {
@@ -690,7 +658,7 @@ export const RootStore = types
             self.isLarge = true;
             localStorage.setItem('isLarge', 'true');
 
-            loggingEventBus.broadcast('maximize');
+            eventBus.broadcast('maximize');
         };
 
         const setLarge = (value: boolean) =>
@@ -719,7 +687,7 @@ export const RootStore = types
 
         const onStartAppChange = (checked: boolean) => {
             setStartApp(checked);
-            loggingEventBus.broadcast('autolauncherchange', checked);
+            eventBus.broadcast('autolauncherchange', checked);
         };
 
         const setStartMinimize = (isStartMinimize: boolean) => {
@@ -728,7 +696,7 @@ export const RootStore = types
 
         const onStartMinimize = (checked: boolean) => {
             setStartMinimize(checked);
-            loggingEventBus.broadcast('startminimizechange', checked);
+            eventBus.broadcast('startminimizechange', checked);
         };
 
         return {
@@ -786,7 +754,7 @@ export const RootStore = types
 
                 newSize.height += isIncomingCallInProgressOnOtherChannel && !isInChatsMode ? 64 : 0;
                 (size.width != newSize.width || size.height != newSize.height) &&
-                    loggingEventBus.broadcast('resize', newSize);
+                    eventBus.broadcast('resize', newSize);
 
                 size.width = newSize.width;
                 size.height = newSize.height;
@@ -800,4 +768,5 @@ export type RootInstance = Instance<typeof RootStore> & {
 
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
