diff --git a/package.json b/package.json
index 18318f8..2d66e26 100644
--- a/package.json
+++ b/package.json
@@ -20,7 +20,6 @@
     "@types/node": "^14.14.37",
     "@types/react": "^17.0.2",
     "@types/react-dom": "^17.0.1",
-    "@types/react-router-dom": "^5.1.6",
     "@types/uuid": "^8.3.1",
     "@types/yup": "^0.29.11",
     "@typescript-eslint/eslint-plugin": "^4.16.1",
@@ -56,7 +55,6 @@
     "string-hash": "^1.1.3",
     "nanoid": "^3.2.0",
     "@babel/runtime": "^7.13.9",
-    "@comagic/core": "^0.6.7",
     "async-mutex": "^0.3.2",
     "axios": "^0.21.1",
     "classnames": "^2.2.6",
@@ -65,7 +63,6 @@
     "filesize": "^8.0.3",
     "formik": "^2.2.9",
     "history": "^4.10.1",
-    "magic-ui": "./magic_ui",
     "mobx": "^6.1.8",
     "mobx-react-lite": "^3.2.0",
     "mobx-state-tree": "^5.0.1",
@@ -73,15 +70,12 @@
     "react": "^17.0.1",
     "react-csv": "^2.0.3",
     "react-dom": "^17.0.1",
-    "react-intl": "^5.13.2",
-    "react-router-dom": "^5.2.0",
     "react-redux": "^7.0.0",
     "redux": "^4.0.0",
     "redux-thunk": "^2.3.0",
     "short-uuid": "^4.2.0",
     "uuid": "^8.3.2",
     "yup": "^0.32.9",
-    "uis-softphone": "git+https://sip_lib:glpat-Xzs1ef2zY2QoxFSchj8P@gitlab.uis.dev/web/sip_lib.git#multitab-local",
-    "@uiscom/uis_webrtc": "git+https://uis_webrtc:glpat-ydssS-Qi8NFPN7dmjkcp@gitlab.uis.dev/web/uis_webrtc.git#local-multitab"
+    "uis-softphone": "./misc/sip_lib"
   }
 }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 7a692dd..679ece8 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -84,7 +84,10 @@ const returnTrue = () => true,
 
 export const RootStore = types
     .model('RootStore', {
-        callCenterRole: types.optional(types.string, 'employee'),
+        account: types.optional(types.model('Account', {
+            call_center_role:  types.optional(types.string, 'employee'),
+            feature_flags: types.optional(types.array(types.string), []) 
+        }), {}),
         isLarge: types.optional(types.boolean, false),
         authStore: types.optional(AuthStore, {}),
         configStore: types.optional(ConfigStore, {}),
@@ -95,7 +98,8 @@ export const RootStore = types
         callStatsStore: types.optional(CallStatsStore, {}),
     })
     .views(self => ({
-        i18n: key => intlMessages(self.configStore.REACT_APP_LOCALE)[key] 
+        i18n: key => intlMessages(self.configStore.REACT_APP_LOCALE)[key],
+        hasFeature: key => self.account.feature_flags.includes(key)
     }))
     .actions(self => {
         let initialState: RootInstanceSnapshotOut,
@@ -523,7 +527,7 @@ export const RootStore = types
                     updateState({ accessGranted });
 
                     account?.app_id && isSingleApp && !accessGranted && logout();
-                    self.setCallCenterRole(account?.call_center_role);
+                    self.setAccount(account);
                 };
 
                 window.addEventListener('tokenChange', () => updateState(getTokenParams()));
@@ -634,12 +638,12 @@ export const RootStore = types
             handleLargenessChange();
         };
 
-        const setCallCenterRole = value => (self.callCenterRole = value);
+        const setAccount = account => (self.account = (account || {}));
 
         return {
             afterCreate,
             resetStore,
-            setCallCenterRole,
+            setAccount,
             request,
             setNotLarge,
             setIsLarge,
@@ -650,4 +654,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
