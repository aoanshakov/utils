diff --git a/package.json b/package.json
index 18318f8..2d66e26 100644
--- a/package.json
+++ b/package.json
@@ -20,7 +20,6 @@
     "@types/node": "^14.14.37",
     "@types/react": "^17.0.2",
     "@types/react-dom": "^17.0.1",
-    "@types/react-router-dom": "^5.1.6",
     "@types/uuid": "^8.3.1",
     "@types/yup": "^0.29.11",
     "@typescript-eslint/eslint-plugin": "^4.16.1",
@@ -56,7 +55,6 @@
     "string-hash": "^1.1.3",
     "nanoid": "^3.2.0",
     "@babel/runtime": "^7.13.9",
-    "@comagic/core": "^0.6.7",
     "async-mutex": "^0.3.2",
     "axios": "^0.21.1",
     "classnames": "^2.2.6",
@@ -65,7 +63,6 @@
     "filesize": "^8.0.3",
     "formik": "^2.2.9",
     "history": "^4.10.1",
-    "magic-ui": "./magic_ui",
     "mobx": "^6.1.8",
     "mobx-react-lite": "^3.2.0",
     "mobx-state-tree": "^5.0.1",
@@ -73,15 +70,12 @@
     "react": "^17.0.1",
     "react-csv": "^2.0.3",
     "react-dom": "^17.0.1",
-    "react-intl": "^5.13.2",
-    "react-router-dom": "^5.2.0",
     "react-redux": "^7.0.0",
     "redux": "^4.0.0",
     "redux-thunk": "^2.3.0",
     "short-uuid": "^4.2.0",
     "uuid": "^8.3.2",
     "yup": "^0.32.9",
-    "uis-softphone": "git+https://sip_lib:glpat-Xzs1ef2zY2QoxFSchj8P@gitlab.uis.dev/web/sip_lib.git#multitab-local",
-    "@uiscom/uis_webrtc": "git+https://uis_webrtc:glpat-ydssS-Qi8NFPN7dmjkcp@gitlab.uis.dev/web/uis_webrtc.git#local-multitab"
+    "uis-softphone": "./misc/sip_lib"
   }
 }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 77cc4b0..56705fa 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -45,7 +45,6 @@ import { STATUSES_MANAGER_CREATED, HANDLE_WEBRTC_CREATED } from 'uis-softphone/a
 
 import {
     INTERCEPT_REQUEST,
-    SET_STATUSES,
     JSSIP_INBOUNDING_CALL_INCOMING,
     JSSIP_CALL_ENDED,
     JSSIP_INBOUNDING_CALL_ENDED,
@@ -353,14 +352,31 @@ export const RootStore = types
 
                             break;
                         }
-                        case SET_STATUSES:
-                            self.statusesStore.setStatuses(action.data || []);
-                            break;
                         case STATUSES_MANAGER_CREATED:
-                            action.statusesManager.on('employeeChanged', employee =>
+                            const { statusesManager } = action;
+
+                            statusesManager.on('employeeChanged', employee =>
                                 self.employeesStore.setEmployee(employee)
                             );
 
+                            statusesManager.on('statusesChanged', statuses => {
+                                const changedStatuses = self.statusesStore.allStatuses.reduce(
+                                    (statuses, status) => ((statuses[status.id] = status), statuses),
+                                    {}
+                                );
+
+                                statuses.forEach(status => {
+                                    const { id } = status;
+
+                                    changedStatuses[id] = {
+                                        ...(changedStatuses[id] || {}),
+                                        ...status
+                                    };
+                                });
+
+                                self.statusesStore.setStatuses(Object.values(changedStatuses))
+                            });
+
                             break;
                         case INTERCEPT_REQUEST: {
                             const { args, request } = action;
@@ -668,4 +684,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
