diff --git a/package.json b/package.json
index db2565a..95e8d85 100644
--- a/package.json
+++ b/package.json
@@ -18,8 +18,6 @@
     "@svgr/webpack": "^5.5.0",
     "@types/classnames": "^2.2.11",
     "@types/node": "^14.14.37",
-    "@types/react": "^17.0.2",
-    "@types/react-dom": "^17.0.1",
     "@types/uuid": "^8.3.1",
     "@types/yup": "^0.29.11",
     "@typescript-eslint/eslint-plugin": "^4.16.1",
@@ -55,7 +53,6 @@
     "string-hash": "^1.1.3",
     "nanoid": "^3.2.0",
     "@babel/runtime": "^7.13.9",
-    "@comagic/core": "^0.6.7",
     "async-mutex": "^0.3.2",
     "axios": "^0.21.1",
     "classnames": "^2.2.6",
@@ -63,23 +60,17 @@
     "dotenv-expand": "^5.1.0",
     "filesize": "^8.0.3",
     "formik": "^2.2.9",
-    "magic-ui": "./magic_ui",
     "mobx": "^6.1.8",
     "mobx-react-lite": "^3.2.0",
     "mobx-state-tree": "^5.0.1",
     "moment": "^2.29.1",
-    "react": "^17.0.1",
     "react-csv": "^2.0.3",
-    "react-dom": "^17.0.1",
-    "react-intl": "^5.13.2",
-    "react-router-dom": "^6.4.0",
     "react-redux": "^7.0.0",
     "redux": "^4.0.0",
     "redux-thunk": "^2.3.0",
     "short-uuid": "^4.2.0",
     "uuid": "^8.3.2",
     "yup": "^0.32.9",
-    "uis-softphone": "git+https://sip_lib:glpat-Xzs1ef2zY2QoxFSchj8P@gitlab.uis.dev/web/sip_lib.git#multitab-local",
-    "@uiscom/uis_webrtc": "git+https://uis_webrtc:glpat-ydssS-Qi8NFPN7dmjkcp@gitlab.uis.dev/web/uis_webrtc.git#local-multitab"
+    "uis-softphone": "./misc/sip_lib"
   }
 }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 082964c..992a24c 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -45,35 +45,8 @@ import {
 
 type RootInstanceSnapshotOut = SnapshotOut<typeof RootStore>;
 
-export type ConfigProps = {
-    REACT_APP_LOCALE: string;
-};
-
 export const RECENT_REFRESH_DELAY = 1500;
 
-export const ConfigStore = types
-    .model('ConfigStore', {
-        REACT_APP_LOCALE: types.optional(types.string, 'en'),
-        REACT_APP_SOFTPHONE_BACKEND_HOST: types.optional(types.string, ''),
-        REACT_APP_AUTH_COOKIE: types.optional(types.string, ''),
-    })
-    .actions(self => {
-        const rootStore = getRoot<typeof RootStore>(self)
-
-        const setConfig = (config: ConfigProps) => {
-            const { REACT_APP_LOCALE } = config;
-            moment.locale(REACT_APP_LOCALE);
-
-            rootStore.callHistoryStore.setDefaultDateStart();
-
-            self.REACT_APP_LOCALE = REACT_APP_LOCALE;
-            self.REACT_APP_SOFTPHONE_BACKEND_HOST = config.REACT_APP_SOFTPHONE_BACKEND_HOST;
-            self.REACT_APP_AUTH_COOKIE = config.REACT_APP_AUTH_COOKIE;
-        };
-
-        return { setConfig };
-    });
-
 const returnTrue = () => true,
     shouldDisplayCallNotification = (phone, state) => !checkPendingCallToPrompt(state, phone),
     body = createObservable(document.body);
@@ -100,10 +73,10 @@ export const RootStore = types
             }),
             {}
         ),
+        locale: types.optional(types.string, 'en'),
         isSoftphoneAvailable: types.optional(types.boolean, false),
         isLarge: types.optional(types.boolean, false),
         authStore: types.optional(AuthStore, {}),
-        configStore: types.optional(ConfigStore, {}),
         employeesStore: types.optional(EmployeesStore, {}),
         websocketStore: types.optional(WebsocketStore, {}),
         feedbackStore: types.optional(FeedbackStore, {}),
@@ -112,7 +85,7 @@ export const RootStore = types
         callStatsStore: types.optional(CallStatsStore, {}),
     })
     .views(self => ({
-        i18n: key => intlMessages(self.configStore.REACT_APP_LOCALE)[key],
+        i18n: key => intlMessages(self.locale)[key],
         hasFeature: key => self.account.feature_flags.includes(key)
     }))
     .actions(self => {
@@ -136,8 +109,7 @@ export const RootStore = types
         };
 
         const afterCreate = () => {
-            const SET_SOFTPHONE_HOST = 'SET_SOFTPHONE_HOST',
-                requests = [],
+            const requests = [],
                 removeAllRequests = () => requests.splice(0, requests.length),
                 i18n = createI18N(),
                 isSingleApp = window.rootConfig?.appName == 'softphone',
@@ -219,18 +191,10 @@ export const RootStore = types
                     prompter,
                     requestUrls: (
                         state = {
-                            httpServerUrl: window.location.host,
+                            httpServerUrl: process.env.REACT_APP_SOFTPHONE_BACKEND_HOST ||
+                                '$REACT_APP_SOFTPHONE_BACKEND_HOST',
                         },
-                        action
-                    ) => {
-                        if (action.type == SET_SOFTPHONE_HOST) {
-                            return {
-                                httpServerUrl: action.value,
-                            };
-                        }
-
-                        return state;
-                    },
+                    ) => state,
                     mayHideSoftphone: () => returnTrue,
                     shouldDisplayCallNotification: () => shouldDisplayCallNotification,
                     getPhoneNumber: () => () => '',
@@ -492,14 +456,13 @@ export const RootStore = types
             const { authorize } = (() => {
                 const { updateState, authorize } = (() => {
                     const state = {
-                        configFetched: false,
+                        mounted: false,
                         accessGranted: false,
                         token: '',
-                        softphoneHost: '',
                     };
 
                     const isSoftphoneAvailable = () =>
-                        state.accessGranted && state.configFetched && state.token && state.softphoneHost;
+                        state.accessGranted && state.mounted && state.token;
 
                     const authorize = () =>
                         isSoftphoneAvailable() &&
@@ -588,35 +551,20 @@ export const RootStore = types
 
                 window.addEventListener('tokenChange', () => updateState(getTokenParams()));
 
-                window.addEventListener('tokenRemove', () =>
-                    updateState({
-                        token: '',
-                        configFetched: false,
-                        accessGranted: false,
-                    })
-                );
+                window.addEventListener('tokenRemove', () => updateState({
+                    token: '',
+                    mounted: false,
+                    accessGranted: false,
+                }));
 
                 self.showMessage = message => self.reduxStore.dispatch(showMessage(message));
                 self.setStartApp = isStartApp => self.reduxStore.dispatch(setStartApp(isStartApp));
                 self.setStartMinimize = isStartMinimize => self.reduxStore.dispatch(setStartMinimize(isStartMinimize));
 
-                self.setConfigFetched = () =>
-                    updateState({
-                        ...getTokenParams(),
-                        configFetched: true,
-                    });
-
-                self.setConfig = ({ REACT_APP_SOFTPHONE_BACKEND_HOST: softphoneHost }) => {
-                    self.reduxStore.dispatch({
-                        type: SET_SOFTPHONE_HOST,
-                        value: softphoneHost,
-                    });
-
-                    updateState({
-                        ...getTokenParams(),
-                        softphoneHost,
-                    });
-                };
+                self.setMounted = () => updateState({
+                    ...getTokenParams(),
+                    mounted: true,
+                });
 
                 return { authorize };
             })();
@@ -712,6 +660,11 @@ export const RootStore = types
 
         const setAccount = account => (self.account = (account || {}));
 
+        const setLocale = (locale: string): void => {
+            console.log('SET LOCALE', locale);
+            self.locale = locale;
+        };
+
         return {
             afterCreate,
             resetStore,
@@ -720,11 +673,13 @@ export const RootStore = types
             request,
             setNotLarge,
             setIsLarge,
-            maybeHidePhoneNumber: maybeHidePhoneNumberMethod 
+            maybeHidePhoneNumber: maybeHidePhoneNumberMethod,
+            setLocale,
         };
     });
 
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
\ No newline at end of file
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
\ No newline at end of file
