diff --git a/.env b/.env
index debf8e05..6a97aa48 100644
--- a/.env
+++ b/.env
@@ -8,6 +8,6 @@ REACT_APP_SITE_SETTINGS_SERVER_URL=
 REACT_APP_ANALYTICS_SERVER_URL=
 REACT_APP_COMAGIC_WEB_URL=https://ca0.dev.uis.st
 REACT_APP_PROJECT=
-REACT_APP_MODULE_CHATS=
-REACT_APP_LEADGEN_MODULE=
-REACT_APP_MODULE_SOFTPHONE=https://softphone-va0-softphone.uis.st
+REACT_APP_MODULE_CHATS=https://localhost:8082
+REACT_APP_LEADGEN_MODULE=https://localhost:8084
+REACT_APP_MODULE_SOFTPHONE=https://localhost:8083
diff --git a/config/webpack.config.js b/config/webpack.config.js
index 689b3bc5..41e7e42a 100644
--- a/config/webpack.config.js
+++ b/config/webpack.config.js
@@ -9,6 +9,7 @@ const MiniCssExtractPlugin = require('mini-css-extract-plugin');
 const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
 const TerserPlugin = require('terser-webpack-plugin');
 const comagicCoreDeps = require('@comagic/core/package.json');
+const hash = require('string-hash');
 
 const { ModuleFederationPlugin } = webpack.container;
 const deps = require('../package.json').dependencies;
@@ -17,21 +18,27 @@ const NODE_ENV = process.env.NODE_ENV || 'prod';
 const REACT_APP = /^REACT_APP_/i;
 
 const appDirectory = fs.realpathSync(process.cwd());
+const miscDirectory = `${appDirectory}/misc`;
 const dotenv = path.resolve(appDirectory, '.env');
 const themeLessFileName = path.resolve(appDirectory, 'theme', 'theme.less');
 const isProductionMode = NODE_ENV !== 'development';
 const webpackMode = isProductionMode ? 'production' : 'development';
 const localIdentName = isProductionMode ? '[hash:base64]' : '[path][name]__[local]';
 const isBundleAnalyzerPlugin = false;
+const subModules = ['chats', 'employees'];
 
 const lessLoader = {
     loader: 'less-loader',
     options: {
-        modifyVars: {
-            'hack': `true; @import "${themeLessFileName}";`,
-        },
-        javascriptEnabled: true,
-    },
+        lessOptions: {
+            modifyVars: {
+                'hack': `true; @import "${themeLessFileName}"; ${
+                    subModules.map(module => `@import "${miscDirectory}/${module}/theme/theme.less"`).join('; ')
+                }`,
+            },
+            javascriptEnabled: true,
+        }
+    }
 };
 
 const fontsOptions = isProductionMode
@@ -178,7 +185,7 @@ const plugins = () => {
             ignoreOrder: true,
         }),
 
-        new ModuleFederationPlugin({
+        /*new ModuleFederationPlugin({
             name: 'shell',
             shared: getSharedDeps(),
             remotes: {
@@ -186,7 +193,11 @@ const plugins = () => {
                 chats: `chats@${process.env.REACT_APP_MODULE_CHATS}/remoteEntry.js`,
                 softphone: `softphone@${process.env.REACT_APP_MODULE_SOFTPHONE}/remoteEntry.js`,
             },
-        }),
+        }),*/
+
+        new webpack.optimize.LimitChunkCountPlugin({
+            maxChunks: 1
+        })
     ];
 
     if (isBundleAnalyzerPlugin) {
@@ -196,6 +207,13 @@ const plugins = () => {
     return pluginsList;
 };
 
+const createAliases = appDirectory => ({
+    '@': path.resolve(appDirectory, './src'),
+    '@models': path.resolve(appDirectory, './src/models'),
+    '@lib': path.resolve(appDirectory, './src/components/lib'),
+    '@hooks': path.resolve(appDirectory, './src/hooks'),
+});
+
 module.exports = {
     entry: './src/index.tsx',
     target: 'web',
@@ -215,6 +233,21 @@ module.exports = {
     module: {
         rules: [
             {
+                test: /\.js$/,
+                exclude: /node_modules(?!\/uis-softphone\/)/,
+                use: [{
+                    loader: 'babel-loader',
+                    options: {
+                        presets: ['@babel/preset-react', '@babel/preset-env'],
+                        comments: false,
+                        plugins: [
+                            '@babel/plugin-proposal-private-methods',
+                            '@babel/plugin-proposal-class-properties',
+                        ]
+                    }
+                }]
+            },
+            {
                 test: /\.(ts|tsx)$/,
                 use: {
                     loader: 'ts-loader',
@@ -265,6 +298,7 @@ module.exports = {
             },
             {
                 test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
+                exclude: /\/(softphone|uis_webrtc\/src)\/icons\//,
                 use: [
                     {
                         loader: '@svgr/webpack',
@@ -280,17 +314,89 @@ module.exports = {
                     },
                 ],
             },
+            {
+                test: /\/(softphone|uis_webrtc\/src)\/icons\//,
+                use: ({resource}) => {
+                    return [{
+                        loader: 'babel-loader',
+                        options: {
+                            presets: ['@babel/preset-react', '@babel/preset-env'],
+                            comments: false
+                        }
+                    }, {
+                        loader: '@svgr/webpack',
+                        options: {
+                            babel: false,
+                            icon: true,
+                            svgoConfig: {
+                                plugins: [{
+                                    cleanupIDs: {
+                                        prefix: `svg${hash(path.relative(__dirname, resource))}`,
+                                        force: true
+                                    }
+                                }]
+                            }
+                        }
+                    }];
+                }
+            },
         ],
     },
     resolve: {
         extensions: ['.tsx', '.ts', '.js'],
         alias: {
-            '@': path.resolve(appDirectory, './src'),
-            '@models': path.resolve(appDirectory, './src/models'),
-            '@lib': path.resolve(appDirectory, './src/components/lib'),
-            '@hooks': path.resolve(appDirectory, './src/hooks'),
+            ...createAliases(appDirectory),
             '@ant-design/icons/lib/dist$': path.resolve(appDirectory, './src/icons.ts'),
+            'leadgen/Root': `${miscDirectory}/Stub.js`,
+            'employees/Root': 'employees/src/Root.tsx',
+            'softphone/Root': 'softphone/src/Root.tsx',
+            'softphone/Account': 'softphone/src/Account.tsx',
+            'softphone/Settings': 'softphone/src/Settings.tsx',
+            'chats/Root': 'chats/src/Root.tsx',
+            'chats/Account': 'chats/src/components/account/index.tsx',
+            'chats/BasicAccount': 'chats/src/components/account/BasicAccount.tsx',
+            'chats/ReportChatHistoryDrawer': 'chats/src/components/chats/chat-panel/ReportChatHistoryDrawer.tsx',
+            'chats/Menu': 'chats/src/components/main/menu/index.tsx',
         },
+        plugins: [{
+            apply: resolver => resolver.getHook('resolve').tapAsync('RelativeAliasResolvingPlugin', (
+                request,
+                resolveContext,
+                callback
+            ) =>  {
+                const target = resolver.ensureHook('resolve'),
+                    splitted = request.request.split('/');
+
+                const {
+                    directory,
+                    aliases
+                } = subModules.concat(['softphone']).map(module => {
+                    const directory = `${miscDirectory}/${module}`;
+
+                    return {
+                        directory,
+                        aliases: createAliases(directory)
+                    };
+                }).find(({
+                    directory,
+                    aliases
+                }) => request.path.indexOf(directory) === 0 && Object.keys(aliases).some(
+                    alias => splitted[0] == alias
+                )) || {};
+
+                if (!directory) {
+                    callback();
+                    return;
+                }
+
+                splitted[0] = aliases[splitted[0]]
+
+                return resolver.doResolve(target, {
+                    ...request,
+                    request: splitted.join('/') 
+                }, null, resolveContext, callback);
+            })
+        }]
     },
     output: {
         filename: isProductionMode ? 'static/js/[name].[contenthash:8].js' : 'static/js/bundle.js',
diff --git a/package.json b/package.json
index e96a3d22..9985c04a 100644
--- a/package.json
+++ b/package.json
@@ -60,7 +60,7 @@
     "husky": "^6.0.0",
     "json-server": "^0.16.0",
     "less": "^3.10.3",
-    "less-loader": "^5.0.0",
+    "less-loader": "^6.0.0",
     "mini-css-extract-plugin": "^1.3.9",
     "nanoid": "^2.1.11",
     "prettier": "^1.19.1",
@@ -79,8 +79,11 @@
     "webpack-merge": "^5.7.3"
   },
   "dependencies": {
+    "softphone": "./misc/softphone",
+    "employees": "./misc/employees",
+    "chats": "./misc/chats",
     "@comagic/core": "git+https://comagic-core:bCb2p2VJ6HxAMxries77@gitlab.uis.dev/web/comagic_app_modules/core.git#0.0.8",
-    "antd": "^3.26.7",
+    "antd": "3.26.7",
     "axios": "^0.19.2",
     "classnames": "^2.2.6",
     "dotenv": "^8.2.0",
@@ -106,10 +109,11 @@
     "react-intl": "^5.15.8",
     "react-list": "^0.8.13",
     "react-resizable": "^1.10.1",
-    "react-resize-detector": "^5.2.0",
+    "react-resize-detector": "^6.0.0",
     "react-router-dom": "^5.1.2",
     "react-transition-group": "^4.4.2",
     "wavesurfer.js": "^4.0.1",
-    "yup": "^0.28.1"
+    "yup": "^0.28.1",
+    "babel-loader": "^8.0.4"
   }
 }
diff --git a/public/index.html b/public/index.html
index 98e0c107..5851e692 100644
--- a/public/index.html
+++ b/public/index.html
@@ -22,6 +22,24 @@
     })(window, document, 'script', 'dataLayer', 'GTM-TJXG5CR');</script>
     <!-- End Google Tag Manager -->
     <% } %>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/jasmine.js"></script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/jasmine-html.js"></script>
+    <script>
+        var windowLoadHandler = window.onload;
+    </script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/boot.js"></script>
+    <script>
+        window.onload = windowLoadHandler;
+    </script>
+    <script src="/tests/utils/jasmine/lib/jasmine-ajax/lib/mock-ajax.js"></script>
+    <script src="/tests/utils/jasmine/console-reporter.js"></script>
+    <script src="/tests/utils/js-tester.js"></script>
+    <script type="text/javascript">
+        var tests = new JsTester_Tests(new JsTester_Factory());
+        tests.exposeDebugUtils('jsTestDebug');
+    </script>
+    <script src="/tests/utils/require.js"></script>
+    <script src="/tests/tests.js"></script>
 </head>
 <body>
     <% if (htmlWebpackPlugin.options.env.production) { %>
@@ -33,5 +51,6 @@
     <% } %>
     <noscript>You need to enable JavaScript to run this app.</noscript>
     <div id="root"></div>
+    <script src="/tests/utils/tests.js"></script>
 </body>
 </html>
\ No newline at end of file
diff --git a/src/bootstrap.tsx b/src/bootstrap.tsx
index fea0f2d4..1f1fdd00 100644
--- a/src/bootstrap.tsx
+++ b/src/bootstrap.tsx
@@ -8,7 +8,10 @@ import { observer } from 'mobx-react-lite';
 import { CoreProvider } from '@comagic/core';
 import moment from 'moment';
 
-import { Provider, rootStore } from '@models/RootStore';
+import { Provider, rootStore, createRootStore } from '@models/RootStore';
+import { createRootStore as createChatsRootStore } from 'chats/src/models/RootStore';
+import { createRootStore as createEmployeesRootStore } from 'employees/src/models/RootStore';
+import { createRootStore as createSoftphoneRootStore } from 'softphone/src/models/RootStore';
 
 import history from './history';
 import { getAntdLocale, getIntlLocale, getIntlMessages } from './i18n';
@@ -67,4 +70,31 @@ const Root: React.FC = observer(() => {
     );
 });
 
-ReactDOM.render(<Root />, document.getElementById('root'));
+window.application = {
+    run({setHistory = () => null}) {
+        createRootStore();
+        createChatsRootStore();
+        createEmployeesRootStore();
+        createSoftphoneRootStore();
+        setHistory(history);
+
+        this.exit();
+
+        const container = document.createElement('div');
+        container.id = 'root';
+        document.body.appendChild(container);
+
+        ReactDOM.render(<Root />, container);
+    },
+
+    exit() {
+        const container = document.getElementById('root');
+
+        if (!container) {
+            return;
+        }
+
+        container.firstChild && ReactDOM.unmountComponentAtNode(container);
+        container.remove();
+    }
+};
diff --git a/src/history.ts b/src/history.ts
index 33bf6a02..fe524735 100644
--- a/src/history.ts
+++ b/src/history.ts
@@ -1,6 +1,6 @@
-import { createBrowserHistory } from 'history';
+import { createMemoryHistory } from 'history';
 
-const history = createBrowserHistory();
+const history = window.memoryHistory = createMemoryHistory();
 
 //TODO: может заменить на location.reload()?
 export const reloadPage = (): void => {
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index c0fbe9a1..b159ccd2 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -161,7 +161,7 @@ export const RootStore = types
 
             setAuthHeaders();
 
-            axios.interceptors.response.use(
+            window.axiosInterceptors = axios.interceptors.response.use(
                 response => {
                     if (response.data.error) {
                         const {
@@ -238,6 +238,7 @@ export const RootStore = types
         };
 
         const afterCreate = () => {
+            window.axiosInterceptors !== undefined && axios.interceptors.response.eject(window.axiosInterceptors);
             initialState = getSnapshot(self);
 
             setHighchartsOptions();
@@ -257,7 +258,8 @@ export type DependencyInjection = {
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({}, { httpRpc, httpRpcAuth });
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}, { httpRpc, httpRpcAuth }));
 
 type RootInstanceSnapshotOut = SnapshotOut<typeof RootStore>;
 
diff --git a/src/models/auth/AuthStore.ts b/src/models/auth/AuthStore.ts
index ca1e21ed..70b68e72 100644
--- a/src/models/auth/AuthStore.ts
+++ b/src/models/auth/AuthStore.ts
@@ -105,7 +105,7 @@ const removeToken = (skipLocalStorage = false) => {
 
 export const AuthStore = Loader.named('AuthStore')
     .props({
-        isAuthorized: types.optional(types.boolean, Boolean(getToken())),
+        isAuthorized: types.optional(types.boolean, false),
         isTokenRefreshing: types.optional(types.boolean, false),
         windowId: types.optional(types.string, generateTraceId('local')),
     })
@@ -204,6 +204,8 @@ export const AuthStore = Loader.named('AuthStore')
             isTokenRefreshing = false;
             refreshingCall = null;
 
+            setAuthorized(Boolean(getToken()));
+
             window.addEventListener('doLogoutUser', (event: CustomEvent) => {
                 const eventWindowId = event.detail;
                 if (eventWindowId !== authStore.windowId) {
diff --git a/src/rpc/httpRpc.ts b/src/rpc/httpRpc.ts
index 742f44e3..8a47a0d6 100644
--- a/src/rpc/httpRpc.ts
+++ b/src/rpc/httpRpc.ts
@@ -27,10 +27,11 @@ const buildMode: string = process.env.REACT_APP_BUILD_MODE;
 const baseUrl: string =
     buildMode === 'e2e_test' ? process.env.REACT_APP_BASE_URL_FOR_E2E : process.env.REACT_APP_BASE_URL;
 
-let cancelTokenSource: CancelTokenSource = axios.CancelToken.source();
+let cancelTokenSource: CancelTokenSource = null;
+const getCancelTokenSource = () => cancelTokenSource || (cancelTokenSource = axios.CancelToken.source());
 
 export const cancelPendingRequests = (message?: string): void => {
-    cancelTokenSource.cancel(message);
+    getCancelTokenSource().cancel(message);
     cancelTokenSource = axios.CancelToken.source();
 };
 
@@ -47,7 +48,7 @@ const httpRpc: HttpRpc = async <T>(method: string, params = {}, headers = {}, ur
         data: rpcParams,
         url: `${url}?method=${method}`,
         headers,
-        cancelToken: cancelTokenSource.token,
+        cancelToken: getCancelTokenSource().token,
     };
 
     try {
