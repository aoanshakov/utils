diff --git a/package.json b/package.json
index 77ba5d9..3101001 100644
--- a/package.json
+++ b/package.json
@@ -18,8 +18,6 @@
       "@svgr/webpack": "^5.5.0",
       "@types/classnames": "^2.2.11",
       "@types/node": "^14.14.37",
-      "@types/react": "^18.0.17",
-      "@types/react-dom": "^18.0.6",
       "@types/uuid": "^8.3.1",
       "@types/yup": "^0.29.11",
       "@typescript-eslint/eslint-plugin": "^4.16.1",
@@ -34,7 +32,6 @@
       "eslint-plugin-react-hooks": "^4.2.0",
       "file-loader": "^6.2.0",
       "html-webpack-plugin": "^5.2.0",
-      "husky": "^6.0.0",
       "less": "^4.1.1",
       "less-loader": "^8.0.0",
       "mini-css-extract-plugin": "^1.4.0",
@@ -55,7 +52,6 @@
       "string-hash": "^1.1.3",
       "nanoid": "^3.2.0",
       "@babel/runtime": "^7.13.9",
-      "@comagic/core": "^0.6.7",
       "async-mutex": "^0.3.2",
       "axios": "^0.21.1",
       "classnames": "^2.2.6",
@@ -64,23 +60,16 @@
       "exports-loader": "2.0.0",
       "filesize": "^8.0.3",
       "formik": "^2.2.9",
-      "magic-ui": "0.0.0-int0",
       "mobx": "^6.1.8",
       "mobx-react-lite": "^3.2.0",
       "mobx-state-tree": "^5.0.1",
       "moment": "^2.29.1",
-      "react": "^18.2.0",
       "react-csv": "^2.0.3",
-      "react-dom": "^18.2.0",
-      "react-intl": "^5.13.2",
-      "react-router-dom": "^6.4.0",
       "react-redux": "^7.0.0",
       "redux": "^4.0.0",
       "redux-thunk": "^2.3.0",
       "short-uuid": "^4.2.0",
       "uuid": "^8.3.2",
-      "yup": "^0.32.9",
-      "uis-softphone": "0.0.0-int1",
-      "@uiscom/uis_webrtc": "0.0.0-int3"
+      "yup": "^0.32.9"
     }
   }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index f9ebfad..46de59e 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -66,7 +66,9 @@ export const RECENT_REFRESH_DELAY = 1500;
 export const ACCESS_TOKEN_EXPIRED = 'access_token_expired';
 export const REFRESH_TOKEN_EXPIRED = 'refresh_token_expired';
 export const ACCESS_TOKEN_INVALID = 'access_token_invalid';
-const returnTrue = () => true,
+
+const SET_NEW_SOFTPHONE_BACKEND = 'SET_NEW_SOFTPHONE_BACKEND',
+    returnTrue = () => true,
     shouldDisplayCallNotification = (phone, state) => !checkPendingCallToPrompt(state, phone),
     body = createObservable(document.body);
 
@@ -206,12 +208,22 @@ export const RootStore = types
             self.reduxStore = createStore(
                 combineReducers({
                     prompter,
-                    requestUrls: (
+                    requestUrls: (state = (
                         state = {
                             httpServerUrl:
                                 process.env.REACT_APP_SOFTPHONE_BACKEND_HOST || '$REACT_APP_SOFTPHONE_BACKEND_HOST',
                         }
-                    ) => state,
+                    ), action) => {
+                        switch (action.type) {
+                            case SET_NEW_SOFTPHONE_BACKEND:
+                                return {
+                                    httpServerUrl: process.env.REACT_APP_NEW_SOFTPHONE_BACKEND_HOST ||
+                                        '$REACT_APP_NEW_SOFTPHONE_BACKEND_HOST',
+                                };
+                        }
+                        
+                        return state;
+                    },
                     mayHideSoftphone: () => returnTrue,
                     shouldDisplayCallNotification: () => shouldDisplayCallNotification,
                     getPhoneNumber: () => () => '',
@@ -582,6 +594,8 @@ export const RootStore = types
                 });
 
                 self.handleAccountFetched = ({ accountStore, isSoftphoneAvailable, ...args }) => {
+                    accountStore.hasFeatureFlag('new_softphone_backend') && dispatch({ type: SET_NEW_SOFTPHONE_BACKEND });
+
                     authStore = args.authStore;
                     const accessGranted = isSoftphoneAvailable(accountStore),
                         account = accountStore.toJSON()?.account;
@@ -737,4 +751,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
