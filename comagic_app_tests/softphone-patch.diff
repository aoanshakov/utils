diff --git a/package.json b/package.json
index 8b727ad..c047c3d 100644
--- a/package.json
+++ b/package.json
@@ -55,7 +55,7 @@
   "dependencies": {
     "nanoid": "2.1.11",
     "@babel/runtime": "^7.13.9",
-    "antd": "^4.13.0",
+    "antd": "3.26.7",
     "async-mutex": "^0.3.2",
     "axios": "^0.21.1",
     "classnames": "^2.2.6",
@@ -79,6 +79,6 @@
     "short-uuid": "^4.2.0",
     "uuid": "^8.3.2",
     "yup": "^0.32.9",
-    "uis-softphone": "0.0.160"
+    "uis-softphone": "./misc/sip_lib"
   }
 }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index b5ca458..0d5971c 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -56,6 +56,13 @@ export const RootStore = types
 
             let handleIncomingCall = () => null;
 
+            let fileLogger = {
+                downloadLog: () => null,
+                log: () => null
+            };
+
+            self.setFileLogger = value => (fileLogger = value);
+
             self.reduxStore = createStore(combineReducers({
                 requestUrls: (state = {
                     httpServerUrl: window.location.host
@@ -71,7 +78,12 @@ export const RootStore = types
                 mayHideSoftphone: () => () => true,
                 getPhoneNumber: () => () => '',
                 createSlavesNotification: () => state => ({}),
-                getWebRTCConfig: () => () => ({}),
+                getWebRTCConfig: () => () => window.rootConfig?.appName == 'softphone' ? {
+                    createFileLogger: () => ({
+                        downloadLog: () => fileLogger.downloadLog(),
+                        log: (...messages) => fileLogger.log(...messages)
+                    })
+                } : {},
                 ...createSoftphoneReducer({
                     i18n: i18n.translate,
                     appProject: '',
@@ -250,4 +262,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
