diff --git a/config/webpack.config.js b/config/webpack.config.js
index 8c325253..5b400648 100644
--- a/config/webpack.config.js
+++ b/config/webpack.config.js
@@ -7,11 +7,12 @@ const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
 const MiniCssExtractPlugin = require('mini-css-extract-plugin');
 const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
 const TerserPlugin = require('terser-webpack-plugin');
-const ExternalRemotesPlugin = require('external-remotes-plugin');
+//const ExternalRemotesPlugin = require('external-remotes-plugin');
 const CopyPlugin = require('copy-webpack-plugin');
 const comagicCoreDeps = require('@comagic/core/package.json');
 const magicUIDeps = require('magic-ui/package.json');
 const uisWebRTCDeps = require('@uiscom/uis_webrtc/package.json');
+const hash = require('string-hash');
 
 const { ModuleFederationPlugin } = webpack.container;
 const pkgJson = require('../package.json');
@@ -21,6 +22,8 @@ const NODE_ENV = process.env.NODE_ENV || 'prod';
 const REACT_APP = /^REACT_APP_/i;
 
 const appDirectory = fs.realpathSync(process.cwd());
+const miscDirectory = `${appDirectory}/misc`;
+const magicUIDirectory = `${miscDirectory}/magic_ui`;
 const publicDir = path.resolve(appDirectory, 'public');
 const buildDir = path.resolve(appDirectory, 'build');
 const dotenv = path.resolve(appDirectory, '.env');
@@ -28,9 +31,20 @@ const isProductionMode = NODE_ENV !== 'development';
 const webpackMode = isProductionMode ? 'production' : 'development';
 const localIdentName = isProductionMode ? '[hash:base64]' : '[path][name]__[local]';
 const isBundleAnalyzerPlugin = false;
+const subModules = ['chats', 'analytics/frontend'];
 
 const lessLoader = {
     loader: 'less-loader',
+    options: {
+        lessOptions: {
+            modifyVars: {
+                'hack': `true; ${
+                    subModules.map(module => `@import "${miscDirectory}/${module}/theme/theme.less"`).join('; ')
+                }`,
+            },
+            javascriptEnabled: true,
+        },
+    },
 };
 
 const fontsOptions = isProductionMode
@@ -107,10 +121,11 @@ const webpackDefinePlugin = () => {
     return opts;
 };
 
-const cssLoaders = extra => {
+const cssLoaders = (extra, loaderParams = {}) => {
     const loaders = [
         {
             loader: isProductionMode ? MiniCssExtractPlugin.loader : 'style-loader',
+            ...loaderParams
         },
         {
             loader: 'css-loader',
@@ -215,7 +230,7 @@ const plugins = () => {
             ignoreOrder: true,
         }),
 
-        new ModuleFederationPlugin({
+        /*new ModuleFederationPlugin({
             name: 'shell',
             shared: getSharedDeps(),
             remotes: {
@@ -242,6 +257,11 @@ const plugins = () => {
             },
         }),
         new ExternalRemotesPlugin(),
+        }),*/
+
+        new webpack.optimize.LimitChunkCountPlugin({
+            maxChunks: 1
+        })
     ];
 
     if (isProductionMode) {
@@ -265,6 +285,17 @@ const plugins = () => {
     return pluginsList;
 };
 
+const createAliases = appDirectory => ({
+    '@': path.resolve(appDirectory, './src'),
+    '@models': path.resolve(appDirectory, './src/models'),
+    '@lib': path.resolve(appDirectory, './src/components/lib'),
+    '@hooks': path.resolve(appDirectory, './src/hooks'),
+});
+
+const iconsRegExp = new RegExp(
+    ['', '(softphone|softphone', 'src|call_history|uis_webrtc', 'src)', 'icons', ''].join('\\' + path.sep)
+);
+
 module.exports = {
     entry: './src/index.tsx',
     target: NODE_ENV == 'softphone' ? 'electron-renderer' : 'web',
@@ -286,6 +317,21 @@ module.exports = {
     module: {
         rules: [
             {
+                test: /\.js$/,
+                exclude: /node_modules(?!\/(uis-softphone|magic-ui)\/)/,
+                use: [{
+                    loader: 'babel-loader',
+                    options: {
+                        presets: ['@babel/preset-react', '@babel/preset-env'],
+                        comments: false,
+                        plugins: [
+                            '@babel/plugin-proposal-private-methods',
+                            '@babel/plugin-proposal-class-properties',
+                        ]
+                    }
+                }]
+            },
+            {
                 test: /\.(ts|tsx)$/,
                 use: {
                     loader: 'ts-loader',
@@ -305,7 +351,7 @@ module.exports = {
                         }),
                     },
                 },
-                exclude: /node_modules/,
+                exclude: /node_modules(?!\/(uis-softphone|magic-ui)\/)/,
             },
             {
                 test: /\.css$/,
@@ -316,6 +362,29 @@ module.exports = {
                 use: cssLoaders(lessLoader),
             },
             {
+                test: /\.(sa|sc|c)ss$/,
+                include: `${magicUIDirectory}/src`,
+                use: [
+                    {
+                        loader: 'style-loader',
+                    },
+                    {
+                        loader: 'css-loader',
+                    },
+                    {
+                        loader: 'resolve-url-loader',
+                    },
+                    {
+                        loader: 'sass-loader',
+                        options: {
+                            sassOptions: {
+                                includePaths: [magicUIDirectory]
+                            }
+                        }
+                    },
+                ],
+            },
+            {
                 test: /\.(png|jpg)$/,
                 loader: 'url-loader',
                 options: {
@@ -331,6 +400,7 @@ module.exports = {
             },
             {
                 test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
+                exclude: iconsRegExp,
                 use: [
                     {
                         loader: '@svgr/webpack',
@@ -346,17 +416,122 @@ module.exports = {
                     },
                 ],
             },
+            {
+                test: iconsRegExp,
+                use: ({resource}) => [{
+                    loader: 'babel-loader',
+                    options: {
+                        presets: ['@babel/preset-react', '@babel/preset-env'],
+                        comments: false
+                    }
+                }, {
+                    loader: '@svgr/webpack',
+                    options: {
+                        babel: false,
+                        icon: true,
+                        svgoConfig: {
+                            plugins: [{
+                                cleanupIDs: {
+                                    prefix: `svg${hash(path.relative(__dirname, resource))}`,
+                                    force: true
+                                }
+                            }]
+                        }
+                    }
+                }]
+            },
         ],
     },
     resolve: {
         extensions: ['.tsx', '.ts', '.js'],
 
         alias: {
-            '@': path.resolve(appDirectory, './src'),
-            '@models': path.resolve(appDirectory, './src/models'),
-            '@lib': path.resolve(appDirectory, './src/components/lib'),
-            '@hooks': path.resolve(appDirectory, './src/hooks'),
+            ...createAliases(appDirectory),
+            'visitors/Root': `${miscDirectory}/visitors/src/Root.tsx`,
+            'leadgen/Root': `${miscDirectory}/Stub.js`,
+            'softphone/Root': 'softphone/src/Root.tsx',
+            'softphone/Account': 'softphone/src/Account.tsx',
+            'softphone/Settings': 'softphone/src/Settings.tsx',
+            'softphone/CallHistory': 'softphone/src/call_history/index.tsx',
+            'softphone/CallStats': 'softphone/src/call_stats/index.tsx',
+            'chats/Root': 'chats/src/Root.tsx',
+            'chats/Account': 'chats/src/components/account/index.tsx',
+            'chats/BasicAccount': 'chats/src/components/account/BasicAccount.tsx',
+            'chats/ReportChatHistoryDrawer': 'chats/src/components/chats/chat-panel/ReportChatHistoryDrawer.tsx',
+            'chats/Menu': 'chats/src/components/main/menu/index.tsx',
+            'chats/NotificationWrapper': `${miscDirectory}/Stub.js`,
+            'chatsDistribution/Root': `${miscDirectory}/Stub.js`,
+            'callTracking/CalltrackingSubstitutionControl': `${miscDirectory}/Stub.js`,
+            'callTracking/CalltrackingTrafficControl': `${miscDirectory}/Stub.js`,
+            'callTracking/CalltrackingNumbers': `${miscDirectory}/Stub.js`,
+            'callTracking/CalltrackingSubstitutionRules': `${miscDirectory}/Stub.js`,
+            'callTracking/NumberPools': `${miscDirectory}/Stub.js`,
+            'callTracking/Sites': `${miscDirectory}/Stub.js`,
+            'analytics/CreateDashboardButton': `${miscDirectory}/Stub.js`,
+            'analytics/AdAnalytics': `${miscDirectory}/Stub.js`,
+            'analytics/CreateReport': `${miscDirectory}/Stub.js`,
+            'analytics/Dashboards/ChiefDashboard': `${miscDirectory}/Stub.js`,
+            'analytics/Communications':
+                `${miscDirectory}/analytics/frontend/src/components/reports/communications/index.tsx`,
+            'analytics/Dashboards/Dashboard': `${miscDirectory}/Stub.js`,
+            'analytics/DealsAnalytics': `${miscDirectory}/Stub.js`,
+            'analytics/Deals': `${miscDirectory}/Stub.js`,
+            'analytics/Leads': `${miscDirectory}/Stub.js`,
+            'analytics/Dashboards/MarketerDashboard': `${miscDirectory}/Stub.js`,
+            'analytics/SharedReport': `${miscDirectory}/Stub.js`,
+            'analytics/cancelPendingRequests': `${miscDirectory}/Stub.js`,
+            'analytics/ReportTable':
+                `${miscDirectory}/analytics/frontend/src/components/reports/communications/ReportTable.tsx`,
+            'analytics/CalendarButton':
+                `${miscDirectory}/analytics/frontend/src/components/lib/calendar/BasicCalendarButton.tsx`,
+            'analytics/RadioButton':
+                `${miscDirectory}/analytics/frontend/src/components/lib/radio-button/RadioButton.tsx`,
+            'analytics/RadioGroup':
+                `${miscDirectory}/analytics/frontend/src/components/lib/radio-button/RadioGroup.tsx`,
+            'supervisorWorkplace/Root': `${miscDirectory}/Stub.js`,
+            'supervisorWorkplace/Menu': `${miscDirectory}/Stub.js`,
+            'supervisorWorkplace/NotificationWorkplace': `${miscDirectory}/Stub.js`
         },
+
+        plugins: [{
+            apply: resolver => resolver.getHook('resolve').tapAsync('RelativeAliasResolvingPlugin', (
+                request,
+                resolveContext,
+                callback
+            ) =>  {
+                const target = resolver.ensureHook('resolve'),
+                    splitted = request.request.split('/');
+
+                const {
+                    directory,
+                    aliases
+                } = subModules.concat(['softphone', 'visitors']).map(module => {
+                    const directory = `${miscDirectory}/${module}`;
+
+                    return {
+                        directory,
+                        aliases: createAliases(directory)
+                    };
+                }).find(({
+                    directory,
+                    aliases
+                }) => request.path.indexOf(directory) === 0 && Object.keys(aliases).some(
+                    alias => splitted[0] == alias
+                )) || {};
+
+                if (!directory) {
+                    callback();
+                    return;
+                }
+
+                splitted[0] = aliases[splitted[0]]
+
+                return resolver.doResolve(target, {
+                    ...request,
+                    request: splitted.join('/') 
+                }, null, resolveContext, callback);
+            })
+        }]
     },
     output: {
         clean: true,
diff --git a/package.json b/package.json
index 3b468556..7c779b1a 100644
--- a/package.json
+++ b/package.json
@@ -59,8 +59,8 @@
     "style-loader": "^2.0.0",
     "terser-webpack-plugin": "^5.1.4",
     "ts-import-plugin": "^1.6.7",
-    "ts-loader": "^8.0.17",
-    "typescript": "4.4.3",
+    "ts-loader": "8.0.17",
+    "typescript": "4.2.2",
     "url-loader": "^3.0.0",
     "webpack": "^5.72.0",
     "webpack-bundle-analyzer": "^4.4.0",
@@ -69,13 +69,17 @@
     "webpack-merge": "^5.7.3"
   },
   "dependencies": {
-    "@comagic/core": "^0.6.7",
+    "@comagic/core": "./misc/core",
     "@sentry/react": "^6.17.6",
     "@sentry/tracing": "^6.17.6",
     "ajv": "^8.8.2",
+    "analytics": "./misc/analytics/frontend",
+    "antd": "3.26.7",
     "archiver": "^5.3.0",
     "auto-launch": "^5.0.5",
     "axios": "^0.24.0",
+    "babel-loader": "^8.0.4",
+    "chats": "./misc/chats",
     "classnames": "^2.2.6",
     "dotenv": "^8.2.0",
     "dotenv-expand": "^5.1.0",
@@ -87,7 +91,7 @@
     "formik": "^2.2.9",
     "history": "^4.10.1",
     "lodash": "^4.17.20",
-    "magic-ui": "git+https://magic-ui:9d_M4ruzxtnTCt__5qs1@gitlab.uis.dev/web/magic_ui.git#int_2022_13.0",
+    "magic-ui": "./misc/magic_ui",
     "mobx": "^6.3.8",
     "mobx-react-lite": "^3.2.2",
     "mobx-state-tree": "^5.1.0",
@@ -97,10 +101,15 @@
     "react-dom": "^17.0.2",
     "stream-buffers": "^3.0.2",
     "react-flow-renderer": "^9.7.4",
-    "react-intl": "^5.15.8",
-    "react-router-dom": "^5.2.0",
+    "react-intl": "5.13.2",
+    "react-router": "5.2.1",
+    "react-router-dom": "5.2.1",
+    "simplebar-react": "^2.4.1",
+    "softphone": "./misc/softphone",
+    "string-hash": "^1.1.3",
+    "visitors": "./misc/visitors",
     "yup": "^0.28.1",
-    "@uiscom/uis_webrtc": "git+https://uis_webrtc:glpat-ydssS-Qi8NFPN7dmjkcp@gitlab.uis.dev/web/uis_webrtc.git#local-multitab"
+    "@uiscom/uis_webrtc": "./misc/softphone/misc/sip_lib/uis_webrtc"
   },
   "optionalDependencies": {
     "dmg-license": "^1.0.9"
diff --git a/public/index.html b/public/index.html
index fd0f39d9..6741d8aa 100644
--- a/public/index.html
+++ b/public/index.html
@@ -23,7 +23,29 @@
     })(window, document, 'script', 'dataLayer', 'GTM-TJXG5CR');</script>
     <!-- End Google Tag Manager -->
     <% } %>
-    <script>window.rootConfig = <%= rootConfig %>;</script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/jasmine.js"></script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/jasmine-html.js"></script>
+    <script>
+        var windowLoadHandler = window.onload;
+    </script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/boot.js"></script>
+    <script>
+        window.onload = windowLoadHandler;
+    </script>
+    <script src="/tests/utils/jasmine/lib/jasmine-ajax/lib/mock-ajax.js"></script>
+    <script src="/tests/utils/jasmine/console-reporter.js"></script>
+    <script src="/tests/utils/js-tester.js"></script>
+    <script type="text/javascript">
+        var tests = new JsTester_Tests(new JsTester_Factory());
+        tests.exposeDebugUtils('jsTestDebug');
+    </script>
+    <script src="/tests/utils/require.js"></script>
+    <script src="/tests/{script}.js"></script>
+    <style>
+        #root {
+            position: static !important;
+        }
+    </style>
 </head>
 <body class="cm-body">
     <% if (htmlWebpackPlugin.options.env.production) { %>
@@ -35,5 +57,6 @@
     <% } %>
     <noscript>You need to enable JavaScript to run this app.</noscript>
     <div id="root"></div>
+    <script src="/tests/utils/tests.js"></script>
 </body>
 </html>
\ No newline at end of file
diff --git a/scripts/dev.js b/scripts/dev.js
index 54c1319c..abc75561 100644
--- a/scripts/dev.js
+++ b/scripts/dev.js
@@ -12,7 +12,8 @@ const compiler = webpack(configFactory);
 const devServer = new WebpackDevServer(
     {
         port: parseInt(process.env.PORT, 10) || 8080,
-        hot: true,
+        hot: false,
+        liveReload: false,
         headers: { 'Access-Control-Allow-Origin': '*' },
         historyApiFallback: true,
     },
diff --git a/src/bootstrap.tsx b/src/bootstrap.tsx
index 68f48551..f69a2eb7 100644
--- a/src/bootstrap.tsx
+++ b/src/bootstrap.tsx
@@ -4,13 +4,17 @@ import ReactDOM from 'react-dom';
 import { Router } from 'react-router-dom';
 import { IntlProvider } from 'react-intl';
 import moment from 'moment';
-import { CoreProvider } from '@comagic/core';
+import { CoreProvider, eventBus } from '@comagic/core';
 import * as Sentry from '@sentry/react';
 import { Integrations } from '@sentry/tracing';
 
 import { useMountEffect } from '@hooks';
 
-import { Provider, rootStore } from '@models/RootStore';
+import { Provider, rootStore, createRootStore } from '@models/RootStore';
+import { createRootStore as createSoftphoneRootStore } from 'softphone/src/models/RootStore';
+import { createRootStore as createChatsRootStore } from 'chats/src/models/RootStore';
+import { createRootStore as createAnalyticsRootStore } from 'analytics/src/models/RootStore';
+import { createRootStore as createVisitorsRootStore } from 'visitors/src/models/RootStore';
 
 import history from './history';
 import { getIntlLocale, getIntlMessages } from './i18n';
@@ -92,4 +96,40 @@ const Root: React.FC = observer(props => {
     );
 });
 
-ReactDOM.render(<Root {...(window.rootConfig || {})}/>, document.getElementById('root'));
+window.application = {
+    run({
+        setReactDOM = () => null,
+        setEventBus = () => null,
+        setHistory = () => null,
+        setChatsRootStore = () => null,
+        appName = ''
+    }) {
+        setReactDOM(ReactDOM);
+        setEventBus(eventBus);
+        createRootStore();
+        appName != 'softphone' && setChatsRootStore(createChatsRootStore());
+        createSoftphoneRootStore();
+        createAnalyticsRootStore();
+        createVisitorsRootStore();
+        setHistory(history);
+
+        this.exit();
+
+        const container = document.createElement('div');
+        container.id = 'root';
+        document.body.appendChild(container);
+
+        ReactDOM.render(<Root appName={appName} />, container);
+    },
+
+    exit() {
+        const container = document.getElementById('root');
+
+        if (!container) {
+            return;
+        }
+
+        container.firstChild && ReactDOM.unmountComponentAtNode(container);
+        container.remove();
+    }
+};
diff --git a/src/history.ts b/src/history.ts
index 33bf6a02..fe524735 100644
--- a/src/history.ts
+++ b/src/history.ts
@@ -1,6 +1,6 @@
-import { createBrowserHistory } from 'history';
+import { createMemoryHistory } from 'history';
 
-const history = createBrowserHistory();
+const history = window.memoryHistory = createMemoryHistory();
 
 //TODO: может заменить на location.reload()?
 export const reloadPage = (): void => {
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 89b9fdb7..8e641d93 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -212,7 +212,7 @@ export const RootStore = types
                 }
             );
 
-            axios.interceptors.response.use(
+            window.axiosInterceptors = axios.interceptors.response.use(
                 response => {
                     logRequest({response});
 
@@ -273,6 +273,7 @@ export const RootStore = types
         };
 
         const afterCreate = () => {
+            window.axiosInterceptors !== undefined && axios.interceptors.response.eject(window.axiosInterceptors);
             initialState = getSnapshot(self);
 
             setHttpRequestsDefault();
@@ -309,7 +310,8 @@ export type DependencyInjection = {
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({}, { httpRpc, httpRpcAuth });
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}, { httpRpc, httpRpcAuth }));
 
 type RootInstanceSnapshotOut = SnapshotOut<typeof RootStore>;
 
diff --git a/src/models/auth/AuthStore.ts b/src/models/auth/AuthStore.ts
index e6dd1223..21ca7ec0 100644
--- a/src/models/auth/AuthStore.ts
+++ b/src/models/auth/AuthStore.ts
@@ -95,7 +95,7 @@ const removeToken = (skipLocalStorage = false) => {
 
 export const AuthStore = Loader.named('AuthStore')
     .props({
-        isAuthorized: types.optional(types.boolean, Boolean(getToken())),
+        isAuthorized: types.optional(types.boolean, false),
         isTokenRefreshing: types.optional(types.boolean, false),
         windowId: types.optional(types.string, generateTraceId('local')),
     })
@@ -189,6 +189,8 @@ export const AuthStore = Loader.named('AuthStore')
         });
 
         const afterCreate = () => {
+            setAuthorized(Boolean(getToken()));
+
             window.addEventListener('doLogoutUser', (event: CustomEvent) => {
                 const eventWindowId = event.detail;
                 if (eventWindowId !== authStore.windowId) {
diff --git a/src/rpc/httpRpc.ts b/src/rpc/httpRpc.ts
index 8c0a28d7..ce190fe9 100644
--- a/src/rpc/httpRpc.ts
+++ b/src/rpc/httpRpc.ts
@@ -25,10 +25,11 @@ export type HttpRpc = <T>(
 
 const baseUrl: string = process.env.REACT_APP_BASE_URL || '$REACT_APP_BASE_URL';
 
-let cancelTokenSource: CancelTokenSource = axios.CancelToken.source();
+let cancelTokenSource: CancelTokenSource = null;
+const getCancelTokenSource = () => cancelTokenSource || (cancelTokenSource = axios.CancelToken.source());
 
 export const cancelPendingRequests = (message?: string): void => {
-    cancelTokenSource.cancel(message);
+    getCancelTokenSource().cancel(message);
     cancelTokenSource = axios.CancelToken.source();
 };
 
@@ -45,7 +46,7 @@ const httpRpc: HttpRpc = async <T>(method: string, params = {}, headers = {}, ur
         data: rpcParams,
         url: `${url}?method=${method}`,
         headers,
-        cancelToken: cancelTokenSource.token,
+        cancelToken: getCancelTokenSource().token,
     };
 
     try {
diff --git a/src/utils/cookie.ts b/src/utils/cookie.ts
index 9882b7ef..62ae7319 100644
--- a/src/utils/cookie.ts
+++ b/src/utils/cookie.ts
@@ -40,13 +40,14 @@ const resetElectronCookiesManager = () => {
 };
 
 window.getElectronCookiesManager = resetElectronCookiesManager;
+const prepareName = name => encodeURIComponent(name.replace(/([.$?*|{}()[\]\\/+^])/g, '\\$1'));
 
 export function getCookie(name: string): string {
     if (isSoftphone()) {
         return window.getElectronCookiesManager().getItem(name);
     }
 
-    const matches = new RegExp('(?:^|; )' + name.replace(/([.$?*|{}()[\]\\/+^])/g, '\\$1') + '=([^;]*)').exec(
+    const matches = new RegExp('(?:^|; )' + prepareName(name) + '=([^;]*)').exec(
         document.cookie
     );
 
@@ -68,7 +69,7 @@ export function setCookie(name: string, value: string, options: Options = {}): v
         options.expires = options.expires.toUTCString();
     }
 
-    let updatedCookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
+    let updatedCookie = prepareName(name) + '=' + encodeURIComponent(value);
 
     let optionKey: keyof Options;
     for (optionKey in options) {
