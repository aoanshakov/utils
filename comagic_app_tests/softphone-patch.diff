diff --git a/package.json b/package.json
index 7db2045..0793165 100644
--- a/package.json
+++ b/package.json
@@ -55,7 +55,7 @@
     "string-hash": "^1.1.3",
     "nanoid": "^3.2.0",
     "@babel/runtime": "^7.13.9",
-    "antd": "^4.13.0",
+    "antd": "3.26.7",
     "async-mutex": "^0.3.2",
     "axios": "^0.21.1",
     "classnames": "^2.2.6",
@@ -64,7 +64,6 @@
     "filesize": "^8.0.3",
     "formik": "^2.2.9",
     "history": "^4.10.1",
-    "magic-ui": "git+https://magic-ui:9d_M4ruzxtnTCt__5qs1@gitlab.uis.dev/web/magic_ui.git#1.2.11",
     "mobx": "^6.1.8",
     "mobx-react-lite": "^3.2.0",
     "mobx-state-tree": "^5.0.1",
@@ -79,6 +78,6 @@
     "short-uuid": "^4.2.0",
     "uuid": "^8.3.2",
     "yup": "^0.32.9",
-    "uis-softphone": "git+https://sip_lib:glpat-Xzs1ef2zY2QoxFSchj8P@gitlab.uis.dev/web/sip_lib.git#int_2022_01.1"
+    "uis-softphone": "./misc/sip_lib"
   }
 }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 54a4b49..7664eda 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -27,7 +27,8 @@ import {
     INTERCEPT_REQUEST,
     SET_STATUSES,
     JSSIP_INBOUNDING_CALL_INCOMING,
-    JSSIP_CALL_ENDED 
+    JSSIP_CALL_ENDED,
+    SOFTPHONE_HIGHT_CHANGED
 } from 'uis-softphone/constants';
 
 type RootInstanceSnapshotOut = SnapshotOut<typeof RootStore>;
@@ -64,6 +65,7 @@ export const RootStore = types
     })
     .actions(self => {
         let initialState: RootInstanceSnapshotOut;
+        const sizeChangeHandlers = [];
 
         const afterCreate = () => {
             const SET_SOFTPHONE_HOST = 'SET_SOFTPHONE_HOST',
@@ -74,7 +76,8 @@ export const RootStore = types
 
             let authStore,
                 handleIncomingCall = () => null,
-                handlerCallEnd = () => null;
+                handlerCallEnd = () => null,
+                isAuthorized = false;
 
             const logout = () => self.authStore.getToken()?.jwt && authStore && authStore.fetchLogoutUser();
 
@@ -85,6 +88,31 @@ export const RootStore = types
 
             self.setFileLogger = value => (fileLogger = value);
 
+            const size = {
+                width: 0,
+                height: 0
+            };
+
+            const fireSizeChangeEvent = isSoftphoneHigh => {
+                const newSize = isAuthorized ? {
+                    width: 340,
+                    height: (
+                        isSoftphoneHigh === undefined ?
+                            self.reduxStore.getState().softphone.isSoftphoneHigh :
+                            isSoftphoneHigh
+                    ) ? 568 : 212
+                } : {
+                    width: 300,
+                    height: 350
+                };
+
+                (size.width != newSize.width || size.height != newSize.height) &&
+                    sizeChangeHandlers.forEach(handle => handle(newSize));
+
+                size.width = newSize.width;
+                size.height = newSize.height;
+            };
+
             self.reduxStore = createStore(combineReducers({
                 requestUrls: (state = {
                     httpServerUrl: window.location.host
@@ -127,6 +155,9 @@ export const RootStore = types
                 createSoftphoneMiddleware(),
                 store => next => action => {
                     switch (action.type) {
+                        case SOFTPHONE_HIGHT_CHANGED:
+                            fireSizeChangeEvent(action.isSoftphoneHigh);
+                            break;
                         case JSSIP_CALL_ENDED:
                             handlerCallEnd(store.getState().settings.closeOnCallEnd);
                             break;
@@ -178,6 +209,11 @@ export const RootStore = types
 
             const {dispatch, getState} = self.reduxStore;
 
+            self.onSizeChange = handler => {
+                sizeChangeHandlers.push(handler);
+                size.width && size.height && handler(size);
+            };
+
             self.onDialpadKeyDown = (...args) => dispatch(onDialpadKeyDown(...args));
             self.statusesStore.setStatusUpdator((statusId: number) => dispatch(setStatus(statusId)));
             self.setDictonary = i18n.setDictonary;
@@ -197,6 +233,12 @@ export const RootStore = types
                     return newState => {
                         let isChanged = false;
 
+                        const shouldFireSizeChangeEvent = !!('token' in newState && (
+                            !newState.token && state.token
+                        ) || (
+                            newState.token && !state.token
+                        ));
+
                         Object.keys(newState).forEach(key => {
                             const value = newState[key];
 
@@ -225,9 +267,11 @@ export const RootStore = types
                                 changeAuthToken
                             } = getState();
 
-                            shouldInitialize ?
-                                dispatch(authorization({token}, false)) :
+                            if (shouldInitialize) {
+                                dispatch(authorization({token}, false));
+                            } else {
                                 changeAuthToken(token);
+                            }
 
                             requests.forEach(action => action.request(action.args));
                             removeAllRequests();
@@ -240,6 +284,9 @@ export const RootStore = types
                             !destroyed && sdk && sdk.destroy();
                             removeAllRequests();
                         }
+                        
+                        isAuthorized = !!token;
+                        shouldFireSizeChangeEvent && fireSizeChangeEvent();
                     };
                 })();
 
@@ -312,4 +359,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
