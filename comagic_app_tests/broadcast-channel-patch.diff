diff --git a/dist/esbrowser/broadcast-channel.js b/dist/esbrowser/broadcast-channel.js
index c2d4437..8d0a4ea 100644
--- a/dist/esbrowser/broadcast-channel.js
+++ b/dist/esbrowser/broadcast-channel.js
@@ -79,7 +79,7 @@ export function clearNodeFolder(options) {
       return true;
     });
   } else {
-    return PROMISE_RESOLVED_FALSE;
+    return Promise.resolve(false);
   }
 }
 
@@ -144,7 +144,7 @@ BroadcastChannel.prototype = {
     }
     OPEN_BROADCAST_CHANNELS["delete"](this);
     this.closed = true;
-    var awaitPrepare = this._prepP ? this._prepP : PROMISE_RESOLVED_VOID;
+    var awaitPrepare = this._prepP ? this._prepP : Promise.resolve();
     this._onML = null;
     this._addEL.message = [];
     return awaitPrepare
@@ -182,7 +182,7 @@ function _post(broadcastChannel, type, msg) {
     type: type,
     data: msg
   };
-  var awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : PROMISE_RESOLVED_VOID;
+  var awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : Promise.resolve();
   return awaitPrepare.then(function () {
     var sendPromise = broadcastChannel.method.postMessage(broadcastChannel._state, msgObj);
 
diff --git a/dist/esbrowser/leader-election.js b/dist/esbrowser/leader-election.js
index 4495155..ec3b0e3 100644
--- a/dist/esbrowser/leader-election.js
+++ b/dist/esbrowser/leader-election.js
@@ -14,7 +14,7 @@ var LeaderElection = function LeaderElection(broadcastChannel, options) {
    * used to ensure we do not run applyOnce()
    * in parallel.
    */
-  this._aplQ = PROMISE_RESOLVED_VOID;
+  this._aplQ = Promise.resolve();
   // amount of unfinished applyOnce() calls
   this._aplQC = 0;
 
@@ -77,7 +77,7 @@ LeaderElection.prototype = {
        * has already elected a leader.
        */
       if (_this2.isLeader) {
-        return PROMISE_RESOLVED_TRUE;
+        return Promise.resolve(true);
       }
       var stopCriteria = false;
       var stopCriteriaPromiseResolve;
@@ -197,7 +197,7 @@ LeaderElection.prototype = {
  */
 function _awaitLeadershipOnce(leaderElector) {
   if (leaderElector.isLeader) {
-    return PROMISE_RESOLVED_VOID;
+    return Promise.resolve();
   }
   return new Promise(function (res) {
     var resolved = false;
diff --git a/dist/esbrowser/methods/native.js b/dist/esbrowser/methods/native.js
index 03713d0..3517912 100644
--- a/dist/esbrowser/methods/native.js
+++ b/dist/esbrowser/methods/native.js
@@ -22,7 +22,7 @@ export function close(channelState) {
 export function postMessage(channelState, messageJson) {
   try {
     channelState.bc.postMessage(messageJson, false);
-    return PROMISE_RESOLVED_VOID;
+    return Promise.resolve();
   } catch (err) {
     return Promise.reject(err);
   }
