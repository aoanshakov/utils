diff --git a/package.json b/package.json
index 2cb4ed3..691ceb7 100644
--- a/package.json
+++ b/package.json
@@ -57,10 +57,6 @@
   },
   "dependencies": {
     "@babel/runtime": "^7.13.9",
-    "@comagic/core": "^0.7.0",
-    "@comagic/softphone-core": "^2.0.2",
-    "@comagic/softphone-widget": "^2.0.13",
-    "@comagic/logger": "^1.0.3",
     "async-mutex": "^0.3.2",
     "axios": "^0.24.0",
     "classnames": "^2.2.6",
@@ -72,18 +68,13 @@
     "filesize": "^8.0.3",
     "formik": "^2.2.9",
     "janus-gateway": "1.1.4",
-    "magic-ui": "0.0.0-int1",
     "mobx": "^6.1.8",
     "mobx-react-lite": "^3.2.0",
     "mobx-state-tree": "^5.0.1",
     "moment": "2.29.1",
     "nanoid": "^3.2.0",
-    "react": "^18.2.0",
     "react-csv": "^2.0.3",
-    "react-dom": "^18.2.0",
-    "react-intl": "6.3.2",
     "react-redux": "^7.0.0",
-    "react-router-dom": "6.9.0",
     "redux": "^4.0.0",
     "redux-thunk": "^2.3.0",
     "short-uuid": "^4.2.0",
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 975b2d4..a0c75cf 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -19,6 +19,7 @@ import {
     getRoot,
     addMiddleware,
     cast,
+    getEnv,
 } from 'mobx-state-tree';
 
 import {
@@ -39,7 +40,7 @@ import {
     mapTo,
 } from '@comagic/softphone-widget';
 
-import { Session } from '@comagic/softphone-core';
+import { Session, EmployeesAPI as BasicEmployeesAPI } from '@comagic/softphone-core';
 import { getResponse } from '@comagic/softphone-core/src/utils';
 import { eventBus } from '@comagic/core';
 import { AccountStoreInstance } from '@comagic/core/lib/models/account/account.d';
@@ -53,28 +54,6 @@ export const ACCESS_TOKEN_EXPIRED = 'access_token_expired';
 export const REFRESH_TOKEN_EXPIRED = 'refresh_token_expired';
 export const ACCESS_TOKEN_INVALID = 'access_token_invalid';
 
-const body = createObservable(document.body);
-
-const createFocusednessGetter = () => {
-    let clicked = false;
-
-    body.removeEventListeners();
-    body.addEventListener('click', () => (clicked = true));
-
-    return createDefaultFocusednessGetter({
-        handleFocusChange: isFocused => !isFocused && (clicked = false),
-        shouldConsiderFocused: () => clicked,
-    });
-};
-
-const AccountModel = types.model('Account', {
-    call_center_role: types.optional(types.maybeNull(types.string), 'employee'),
-    feature_flags: types.optional(types.array(types.string), []),
-    project: types.maybeNull(types.string),
-});
-
-type AccountSnapshot = SnapshotOut<typeof AccountModel>;
-
 type PrompterCall = {
     call_session_id: number | string;
     subscriber_number: string;
@@ -89,9 +68,48 @@ type HostAuthStore = {
     isUserLogoutProceeding: boolean;
 };
 
+class EmployeesAPI {
+    #employeesAPI = null;
+    #employeesStore = null;
+
+    constructor({
+        employeesStore,
+        ...args
+    }) {
+        this.#employeesAPI = new BasicEmployeesAPI(args);
+        this.#employeesStore = employeesStore;
+    }
+
+    getStatuses() {
+        return this.#employeesStore.getStatuses();
+    }
+
+    setStatus(status) {
+        return this.#employeesStore.setStatus(status);
+    }
+
+    onEntityChange(entityName, callback) {
+        entityName == 'employee' && this.#employeesAPI.onEntityChange(entityName, callback);
+        this.#employeesStore.onEntityChange(entityName, callback);
+    }
+
+    getEmployee() {
+        return this.#employeesStore.getEmployee().
+            then(employee => this.#employeesAPI.getEmployee().
+            then(softphoneEmployee => ({
+                ...employee,
+                ...softphoneEmployee,
+            })));
+    }
+}
+
+const createFocusednessGetterFactory = hostRootStore => () => createDefaultFocusednessGetter({
+    handleFocusChange: isFocused => !isFocused && hostRootStore.setNotClicked(),
+    shouldConsiderFocused: () => hostRootStore.getClicked(),
+});
+
 export const RootStore = types
     .model('RootStore', {
-        account: types.optional(AccountModel, {}),
         isStartApp: types.optional(types.boolean, false),
         isStartMinimize: types.optional(types.boolean, false),
         toTopOnCall: types.optional(types.boolean, false),
@@ -100,7 +118,6 @@ export const RootStore = types
         locale: types.optional(types.string, 'en'),
         isSoftphoneAvailable: types.optional(types.boolean, false),
         isLarge: types.optional(types.boolean, false),
-        authStore: types.optional(AuthStore, {}),
         feedbackDesktopStore: types.optional(FeedbackDesktopStore, {}),
         feedbackWebStore: types.optional(FeedbackWebStore, {}),
         promperStore: types.optional(PromperStore, {}),
@@ -109,18 +126,27 @@ export const RootStore = types
     })
     .views(self => ({
         i18n: (key: string) => intlMessages(self.locale)[key],
-        hasFeature: (key: string) => self.account.feature_flags.includes(key),
     }))
     .actions(self => {
         let initialState: RootInstanceSnapshotOut,
             hasError = false,
             doRequest = (args: unknown): Promise<unknown> => Promise.reject(),
-            setMounted = (): void => null,
-            authStore: HostAuthStore,
             isAuthorized = false,
             isInChatsMode = false,
             handleAccountFetched = (args: unknown): void => null;
 
+        const {
+            hostRootStore,
+            employeesAPIFactory: createEmployeesAPI,
+        } = getEnv(self);
+            
+        if (!hostRootStore) {
+            throw new Error('Host root store is empty');
+        }
+
+        const { authStore, accountStore } = hostRootStore;
+
+        self.hostRootStore = hostRootStore;
         const isSingleApp = isElectron();
 
         self.logger = new Logger({
@@ -164,9 +190,9 @@ export const RootStore = types
                     return;
                 }
 
-                self.authStore.getToken()?.jwt && authStore
+                authStore.token?.jwt && authStore
                     ? authStore.fetchLogoutUser()
-                    : self.authStore.doShellLogout();
+                    : authStore.logout();
             };
 
             const urlEndsWith = (response: AxiosResponse | AxiosError, substring: string) =>
@@ -191,7 +217,10 @@ export const RootStore = types
                 logger: self.logger,
                 debugMode: localStorage.getItem('debugMode') == '1',
                 getPhoneNumber: () => '',
-                createFocusednessGetter: isSingleApp ? createFocusednessGetter : createDefaultFocusednessGetter,
+                createFocusednessGetter: isSingleApp ?
+                    createFocusednessGetterFactory(hostRootStore) :
+                    createDefaultFocusednessGetter,
+                createEmployeesAPI,
                 processAxios: axios => {
                     axios.defaults.headers['X-Auth-Type'] = 'jwt';
 
@@ -229,7 +258,7 @@ export const RootStore = types
                                             delete error.config.headers.Authorization;
 
                                             requests.push(() => resolve(axios(error.config)));
-                                            void self.authStore.doShellRefreshToken();
+                                            void authStore.fetchRefresh();
                                         });
                                     case 'invalid_token':
                                         logout();
@@ -247,26 +276,25 @@ export const RootStore = types
                 shouldNotificationBeStickedToBottom: isSingleApp,
                 mayHideSoftphone: () => true,
                 openUrl,
-                isAbleToOpenContact: () => rootStore?.hasFeature('contacts'),
+                isAbleToOpenContact: () => accountStore.hasFeatureFlag('contacts'),
                 openContact,
                 position: {
                     leftPadding: 90,
                     topPadding: 65,
                     bottomPadding: 5,
                 },
-                getAppProject: () => self.account.project,
+                getAppProject: () => accountStore.account.project,
                 soundOverrides: {},
             });
 
             const { authorize } = (() => {
                 const { updateState, authorize } = (() => {
                     const state = {
-                        mounted: false,
                         accessGranted: false,
                         token: '',
                     };
 
-                    const isSoftphoneAvailable = () => !!(state.accessGranted && state.mounted && state.token);
+                    const isSoftphoneAvailable = () => !!(state.accessGranted && state.token);
 
                     const authorize = () =>
                         isSoftphoneAvailable() && coreStore.authenticate({ token: state.token }, false);
@@ -323,7 +351,7 @@ export const RootStore = types
                 })();
 
                 const getTokenParams = () => ({
-                    token: (token => (token ? `${token}` : ''))(self.authStore.getToken()?.jwt),
+                    token: (token => (token ? `${token}` : ''))(authStore.token?.jwt),
                 });
 
                 handleAccountFetched = ({
@@ -338,10 +366,8 @@ export const RootStore = types
                             process.env.REACT_APP_NEW_SOFTPHONE_BACKEND_HOST || '$REACT_APP_NEW_SOFTPHONE_BACKEND_HOST'
                         );
 
-                    authStore = args.authStore;
                     const accessGranted = getSoftphoneAvailability(accountStore),
                         account = getSnapshot(accountStore.account);
-                    (self as RootInstance).setAccount(account);
 
                     accessGranted && accountFetchedHandlers.forEach(handler => handler(accountStore));
                     updateState({ accessGranted });
@@ -378,6 +404,11 @@ export const RootStore = types
                         areVirtualNumberGroupsEnabled
                     );
                 };
+                
+                autorun(
+                    () => hostRootStore.accountStore?.account?.app_id && setTimeout(() =>
+                        self.handleAccountFetched(hostRootStore), 0)
+                ),
 
                 window.addEventListener('tokenChange', () => updateState(getTokenParams()));
 
@@ -386,16 +417,11 @@ export const RootStore = types
 
                     updateState({
                         token: '',
-                        mounted: false,
                         accessGranted: false,
                     });
                 });
 
-                setMounted = () =>
-                    updateState({
-                        ...getTokenParams(),
-                        mounted: true,
-                    });
+                updateState(getTokenParams());
 
                 eventBus.subscribe(
                     'checkautolauncher',
@@ -410,7 +436,6 @@ export const RootStore = types
                 eventBus.subscribe('unmaximize', () => (self as RootInstance).setLarge(false));
 
                 eventBus.broadcast('app_ready');
-                size.width && size.height && eventBus.broadcast('size', size);
                 eventBus.broadcast(self.isLarge ? 'maximize' : 'unmaximize');
 
                 return { authorize };
@@ -429,7 +454,7 @@ export const RootStore = types
 
                 error == 'appAlreadyOpened' && isMaster && authorize();
 
-                const project = self.account?.project,
+                const project = accountStore.account?.project,
                     forceBroadcast = project === 'rolands' && !isUseWidgetForCalls;
 
                 if (self.promperStore.prompterSipLine) {
@@ -585,7 +610,7 @@ export const RootStore = types
                     settings: { is_use_widget_for_calls: isUseWidgetForCalls },
                 } = (self as RootInstance).softphoneStore;
 
-                const project = self.account?.project,
+                const project = accountStore.account?.project,
                     dontShowWidget = project === 'rolands' && !isUseWidgetForCalls;
 
                 sendCrossTabMessage({
@@ -664,8 +689,6 @@ export const RootStore = types
         const setLarge = (value: boolean) =>
             value ? (self as RootInstance).setIsLarge() : (self as RootInstance).setNotLarge();
 
-        const setAccount = (account: AccountSnapshot) => (self.account = cast(account || {}));
-
         const setLocale = (locale: string): void => {
             moment.locale(locale);
             self.locale = locale;
@@ -709,7 +732,6 @@ export const RootStore = types
             setToCloseOnCallEnd,
             setToTopOnCall,
             setSoftphoneAvailable,
-            setAccount,
             setNotLarge,
             setIsLarge,
             setLarge,
@@ -724,10 +746,6 @@ export const RootStore = types
                 return doRequest(args) as Promise<Type>;
             },
 
-            setMounted() {
-                setMounted();
-            },
-
             handleAccountFetched(args: unknown) {
                 handleAccountFetched(args);
             },
@@ -768,4 +786,61 @@ export type RootInstance = Instance<typeof RootStore> & {
 
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
+
+let rootStore;
+
+const cache = process.env.REACT_APP_TEST_MODE == 'true' ? {
+    getValue: () => window.softphoneStore,
+    setValue: value => (window.softphoneStore = value),
+} : {
+    getValue: () => rootStore,
+    setValue: value => (rootStore = value),
+};
+
+const createEmployeesAPI = args => new BasicEmployeesAPI(args);
+
+const createEmployeesAPIFactory = employeesStore => args => new EmployeesAPI({
+    employeesStore,
+    ...args
+});
+
+export const getRootStore = hostRootStore => {
+    const rootStore = cache.getValue();
+
+    if (rootStore) {
+        if (rootStore instanceof Promise) {
+            return rootStore.then(() => getRootStore(hostRootStore));
+        }
+
+        if (rootStore.hostRootStore !== hostRootStore) {
+            throw new Error('Host root store inexplicably changed');
+        }
+
+        return Promise.resolve(rootStore);
+    }
+
+    const promise = new Promise(resolve => {
+        const createRootStore = employeesAPIFactory => {
+            const rootStore = RootStore.create({}, {
+                hostRootStore,
+                employeesAPIFactory,
+            });
+
+            cache.setValue(rootStore);
+            resolve(rootStore);
+        };
+
+        import('employees/getStore').
+            then(exported => {
+                const rootStore = exported.default(hostRootStore);
+                createRootStore(createEmployeesAPIFactory(rootStore.employeesStore));
+            }).
+            catch(e => {
+                console.error(e);
+                createRootStore(createEmployeesAPI);
+            });
+    });
+
+    cache.setValue(promise);
+    return promise;
+};
