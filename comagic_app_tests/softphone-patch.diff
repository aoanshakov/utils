diff --git a/package.json b/package.json
index 8b7d3d7..e5aadc4 100644
--- a/package.json
+++ b/package.json
@@ -20,7 +20,6 @@
     "@types/node": "^14.14.37",
     "@types/react": "^17.0.2",
     "@types/react-dom": "^17.0.1",
-    "@types/react-router-dom": "^5.1.6",
     "@types/uuid": "^8.3.1",
     "@types/yup": "^0.29.11",
     "@typescript-eslint/eslint-plugin": "^4.16.1",
@@ -57,7 +56,7 @@
     "nanoid": "^3.2.0",
     "@babel/runtime": "^7.13.9",
     "@comagic/core": "^0.6.1",
-    "antd": "^4.13.0",
+    "antd": "3.26.7",
     "async-mutex": "^0.3.2",
     "axios": "^0.21.1",
     "classnames": "^2.2.6",
@@ -74,14 +73,12 @@
     "react": "^17.0.1",
     "react-dom": "^17.0.1",
     "react-intl": "^5.13.2",
-    "react-router-dom": "^5.2.0",
     "react-redux": "^7.0.0",
     "redux": "^4.0.0",
     "redux-thunk": "^2.3.0",
     "short-uuid": "^4.2.0",
     "uuid": "^8.3.2",
     "yup": "^0.32.9",
-    "uis-softphone": "git+https://sip_lib:glpat-Xzs1ef2zY2QoxFSchj8P@gitlab.uis.dev/web/sip_lib.git#multitab-local",
-    "@uiscom/uis_webrtc": "git+https://uis_webrtc:glpat-ydssS-Qi8NFPN7dmjkcp@gitlab.uis.dev/web/uis_webrtc.git#local-multitab"
+    "uis-softphone": "./misc/sip_lib"
   }
 }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 384d1c7..d118b5e 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -94,8 +94,15 @@ export const RootStore = types
         const sizeChangeHandlers = [],
             accountFetchedHandlers = [],
             applicationChangeHandlers = [],
+            subscriptionRemovers = [],
+            subscribe = (...args) => subscriptionRemovers.push(eventBus.subscribe(...args)),
             request = async (...args) => doRequest(...args);
 
+        const removeSubscriptions = () => {
+            subscriptionRemovers.forEach(removeSubscription => removeSubscription());
+            subscriptionRemovers = [];
+        };
+
         const afterCreate = () => {
             const SET_SOFTPHONE_HOST = 'SET_SOFTPHONE_HOST',
                 requests = [],
@@ -103,6 +110,7 @@ export const RootStore = types
                 i18n = createI18N(),
                 isSingleApp = window.rootConfig?.appName == 'softphone';
             hasError = false;
+            subscriptionRemovers = [];
 
             let authStore,
                 call = () => null,
@@ -207,14 +215,21 @@ export const RootStore = types
                             data.name == 'application_version_changed' &&
                                 applicationChangeHandlers.forEach(handler => handler(data));
 
-                            data.data?.action == 'prepare_to_prompter_call' &&
+                            data.type == 'notify_others' && data.data?.action == 'prepare_to_prompter_call' &&
                                 handlePrompterCallPreparing(data?.data?.data);
+
+                            data.type == 'notify_slaves' &&
+                                data.data?.type == 'state_updating' &&
+                                !data.data?.destroyed && 
+                                store.getState().webRTC.state.error == 'appAlreadyOpened' &&
+                                authorize()
+
                             break;
                         }
                         case HANDLE_WEBRTC_CREATED: {
                             const {webRTC} = action;
 
-                            webRTC.on('error', () => (hasError = true));
+                            webRTC.on('error', error => (hasError = true));
                             call = phoneNumber => (dispatch(showWidget), webRTC.call(phoneNumber));
 
                             break;
@@ -347,8 +362,36 @@ export const RootStore = types
             self.setCallEndHandler = value => (handlerCallEnd = value);
             window.addEventListener('toggleSoftphoneVisiblity', () => dispatch(toggleWidgetVisiblity));
 
-            {
-                const updateState = (() => {
+            removeSubscriptions();
+
+            subscribe('prepare_to_prompter_call', data => {
+                self.reduxStore.getState().webRTC.sendCrossTabMessage({
+                    type: 'notify_others',
+                    data: {
+                        action: 'prepare_to_prompter_call',
+                        data
+                    }
+                });
+
+                handlePrompterCallPreparing(data);
+            });
+
+            subscribe('end_prompter_call', () => {
+                const {prompterSipLine} = self.reduxStore.getState().prompter;
+
+                if (!prompterSipLine) {
+                    return;
+                }
+
+                dispatch(setPrompterSipLine(null));
+                dispatch(terminateSession(prompterSipLine));
+            });
+
+            const {authorize} = (() => {
+                const {
+                    updateState,
+                    authorize
+                } = (() => {
                     const state = {
                         configFetched: false,
                         accessGranted: false,
@@ -356,61 +399,66 @@ export const RootStore = types
                         softphoneHost: ''
                     };
 
-                    return newState => {
-                        let isChanged = false;
+                    const isSoftphoneAvailable = () => state.accessGranted &&
+                        state.configFetched &&
+                        state.token &&
+                        state.softphoneHost;
 
-                        const shouldFireSizeChangeEvent = !!('token' in newState && (
-                            !newState.token && state.token
-                        ) || (
-                            newState.token && !state.token
-                        ));
+                    const authorize = () => isSoftphoneAvailable() && dispatch(authorization({
+                        token: state.token
+                    }, false));
 
-                        Object.keys(newState).forEach(key => {
-                            const value = newState[key];
+                    return {
+                        authorize,
 
-                            if (state[key] == value) {
-                                return;
-                            }
+                        updateState: newState => {
+                            let isChanged = false;
 
-                            isChanged = true;
-                            state[key] = newState[key];
-                        });
+                            const shouldFireSizeChangeEvent = !!('token' in newState && (
+                                !newState.token && state.token
+                            ) || (
+                                newState.token && !state.token
+                            ));
 
-                        if (!isChanged) {
-                            return;
-                        }
+                            Object.keys(newState).forEach(key => {
+                                const value = newState[key];
 
-                        const {
-                            accessGranted,
-                            configFetched,
-                            token,
-                            softphoneHost
-                        } = state;
+                                if (state[key] == value) {
+                                    return;
+                                }
 
-                        if (accessGranted && configFetched && token && softphoneHost) {
-                            const {
-                                webRTC: {shouldInitialize},
-                                changeAuthToken
-                            } = getState();
+                                isChanged = true;
+                                state[key] = newState[key];
+                            });
+
+                            if (!isChanged) {
+                                return;
+                            }
 
-                            shouldInitialize ?
-                                dispatch(authorization({token}, false)) :
-                                changeAuthToken(token);
+                            const {token} = state;
 
-                            requests.forEach(action => action.request(action.args));
-                            removeAllRequests();
-                        } else {
-                            const {
-                                sdk,
-                                state: {destroyed}
-                            } = getState().webRTC;
+                            if (isSoftphoneAvailable()) {
+                                const {
+                                    webRTC: {shouldInitialize},
+                                    changeAuthToken
+                                } = getState();
+
+                                shouldInitialize ? authorize() : changeAuthToken(token);
+                                requests.forEach(action => action.request(action.args));
+                                removeAllRequests();
+                            } else {
+                                const {
+                                    sdk,
+                                    state: {destroyed}
+                                } = getState().webRTC;
 
-                            !destroyed && sdk && sdk.destroy();
-                            removeAllRequests();
+                                !destroyed && sdk && sdk.destroy();
+                                removeAllRequests();
+                            }
+                            
+                            isAuthorized = !!token;
+                            shouldFireSizeChangeEvent && fireSizeChangeEvent();
                         }
-                        
-                        isAuthorized = !!token;
-                        shouldFireSizeChangeEvent && fireSizeChangeEvent();
                     };
                 })();
 
@@ -460,7 +508,9 @@ export const RootStore = types
                         softphoneHost
                     });
                 };
-            }
+
+                return {authorize};
+            })();
 
             const handlePrompterCallPreparing = ({
                 call_session_id,
@@ -470,8 +520,19 @@ export const RootStore = types
             }) => {
                 const state = self.reduxStore.getState();
 
-                if (state.prompter.prompterSipLine) {
-                    eventBus.broadcast('await_prompter_call', state.i18n('Already preparing to call'));
+                const {
+                    i18n,
+                    prompter: {prompterSipLine},
+                    softphone: {isMaster},
+                    webRTC: {
+                        state: {error}
+                    }
+                } = self.reduxStore.getState();
+
+                error == 'appAlreadyOpened' && isMaster === IS_TRUE && authorize();
+
+                if (prompterSipLine) {
+                    eventBus.broadcast('await_prompter_call', i18n('Already preparing to call'));
                 } else {
                     dispatch(addPendingCallToPrompt({
                         call_session_id,
@@ -484,29 +545,6 @@ export const RootStore = types
                 }
             };
 
-            eventBus.subscribe('prepare_to_prompter_call', data => {
-                self.reduxStore.getState().webRTC.sendCrossTabMessage({
-                    type: 'notify_others',
-                    data: {
-                        action: 'prepare_to_prompter_call',
-                        data
-                    }
-                });
-
-                handlePrompterCallPreparing(data);
-            });
-
-            eventBus.subscribe('end_prompter_call', () => {
-                const {prompterSipLine} = self.reduxStore.getState().prompter;
-
-                if (!prompterSipLine) {
-                    return;
-                }
-
-                dispatch(setPrompterSipLine(null));
-                dispatch(terminateSession(prompterSipLine));
-            });
-
             dispatch(setAxiosProcessor(axios => (axios.defaults.headers['X-Auth-Type'] = 'jwt')))
             initialState = getSnapshot(self);
 
@@ -527,4 +565,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
