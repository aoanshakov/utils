diff --git a/package.json b/package.json
index db2565a..95e8d85 100644
--- a/package.json
+++ b/package.json
@@ -18,8 +18,6 @@
     "@svgr/webpack": "^5.5.0",
     "@types/classnames": "^2.2.11",
     "@types/node": "^14.14.37",
-    "@types/react": "^17.0.2",
-    "@types/react-dom": "^17.0.1",
     "@types/uuid": "^8.3.1",
     "@types/yup": "^0.29.11",
     "@typescript-eslint/eslint-plugin": "^4.16.1",
@@ -55,7 +53,6 @@
     "string-hash": "^1.1.3",
     "nanoid": "^3.2.0",
     "@babel/runtime": "^7.13.9",
-    "@comagic/core": "^0.6.7",
     "async-mutex": "^0.3.2",
     "axios": "^0.21.1",
     "classnames": "^2.2.6",
@@ -63,23 +60,17 @@
     "dotenv-expand": "^5.1.0",
     "filesize": "^8.0.3",
     "formik": "^2.2.9",
-    "magic-ui": "./magic_ui",
     "mobx": "^6.1.8",
     "mobx-react-lite": "^3.2.0",
     "mobx-state-tree": "^5.0.1",
     "moment": "^2.29.1",
-    "react": "^17.0.1",
     "react-csv": "^2.0.3",
-    "react-dom": "^17.0.1",
-    "react-intl": "^5.13.2",
-    "react-router-dom": "^6.4.0",
     "react-redux": "^7.0.0",
     "redux": "^4.0.0",
     "redux-thunk": "^2.3.0",
     "short-uuid": "^4.2.0",
     "uuid": "^8.3.2",
     "yup": "^0.32.9",
-    "uis-softphone": "git+https://sip_lib:glpat-Xzs1ef2zY2QoxFSchj8P@gitlab.uis.dev/web/sip_lib.git#multitab-local",
-    "@uiscom/uis_webrtc": "git+https://uis_webrtc:glpat-ydssS-Qi8NFPN7dmjkcp@gitlab.uis.dev/web/uis_webrtc.git#local-multitab"
+    "uis-softphone": "./misc/sip_lib"
   }
 }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 7cdfa79..f97d711 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -27,7 +27,7 @@ import createSoftphoneReducer, {
 } from 'uis-softphone/reducer';
 import { setStartApp, setStartMinimize } from 'uis-softphone/settings/actions';
 import { createFocusednessGetter as createDefaultFocusednessGetter, createObservable } from 'uis-softphone/utils';
-import { isElectron } from '@/utils';
+import { isElectron, isSoftphoneAvailable as getSoftphoneAvailability } from '@/utils';
 
 import {
     INTERCEPT_REQUEST,
@@ -121,9 +121,7 @@ export const RootStore = types
             hasError = false,
             doRequest = () => null,
             doMaybeHidePhoneNumber = value => value;
-        const sizeChangeHandlers = [],
-            largenessChangeHandlers = [],
-            accountFetchedHandlers = [],
+        const accountFetchedHandlers = [],
             applicationChangeHandlers = [],
             subscriptionRemovers = [],
             subscribe = (...args) => subscriptionRemovers.push(eventBus.subscribe(...args)),
@@ -145,12 +143,9 @@ export const RootStore = types
                 enablingHandlers = [];
             hasError = false;
             subscriptionRemovers = [];
-            largenessChangeHandlers.splice(0, largenessChangeHandlers.length);
 
             let authStore,
                 call = () => null,
-                handleIncomingCall = () => null,
-                handlerCallEnd = () => null,
                 isAuthorized = false;
 
             const broadcast = (...args) => {
@@ -174,13 +169,7 @@ export const RootStore = types
                     : self.authStore.doShellLogout();
             };
 
-            let fileLogger = {
-                downloadLog: () => null,
-                log: () => null,
-            };
-
             self.call = phoneNumber => call(phoneNumber);
-            self.setFileLogger = value => (fileLogger = value);
 
             const size = {
                 width: 0,
@@ -207,9 +196,7 @@ export const RootStore = types
                       };
 
                 newSize.height += (isProposedToAcceptIncomingCallOnOtherSipLine(state) ? 64 : 0);
-
-                (size.width != newSize.width || size.height != newSize.height) &&
-                    sizeChangeHandlers.forEach(handle => handle(newSize));
+                (size.width != newSize.width || size.height != newSize.height) && eventBus.broadcast('resize', newSize);
 
                 size.width = newSize.width;
                 size.height = newSize.height;
@@ -241,8 +228,8 @@ export const RootStore = types
                         ...(isSingleApp ? {
                             userAgent: 'UIS Softphone Desktop',
                             createFileLogger: () => ({
-                                downloadLog: () => fileLogger.downloadLog(),
-                                log: (...messages) => fileLogger.log(...messages),
+                                downloadLog: () => eventBus.broadcast('collect_logs'),
+                                log: (...messages) => eventBus.broadcast('log', ...messages),
                             }),
                         } : {
                             multiTabEnabled: true,
@@ -326,14 +313,14 @@ export const RootStore = types
                             isSingleApp && self.callHistoryStore.setContact(null);
                             break;
                         case JSSIP_CALL_ENDED:
-                            handlerCallEnd(store.getState().settings.closeOnCallEnd);
+                            eventBus.broadcast('call_end', store.getState().settings.closeOnCallEnd);
                             self.callHistoryStore.refreshData(RECENT_REFRESH_DELAY);
                             break;
                         case JSSIP_INBOUNDING_CALL_ENDED:
                             dispatch(setPrompterSipLine(null));
                             break;
                         case JSSIP_INBOUNDING_CALL_INCOMING: {
-                            handleIncomingCall(store.getState().settings.toTopOnCall);
+                            eventBus.broadcast('incoming_call', store.getState().settings.toTopOnCall);
 
                             const state = store.getState(),
                                 { session } = action,
@@ -443,11 +430,6 @@ export const RootStore = types
 
             const { dispatch, getState } = self.reduxStore;
 
-            self.onSizeChange = handler => {
-                sizeChangeHandlers.push(handler);
-                size.width && size.height && handler(size);
-            };
-
             self.onApplicationChangeChanger = handler => applicationChangeHandlers.push(handler);
 
             self.onAccountFetched = handler => {
@@ -457,8 +439,6 @@ export const RootStore = types
             self.onDialpadKeyDown = (...args) => dispatch(onDialpadKeyDown(...args));
             self.statusesStore.setStatusUpdator((statusId: number) => dispatch(setStatus(statusId)));
             self.setDictonary = i18n.setDictonary;
-            self.setIncomingCallHandler = value => (handleIncomingCall = value);
-            self.setCallEndHandler = value => (handlerCallEnd = value);
             window.addEventListener('toggleSoftphoneVisiblity', () => dispatch(toggleWidgetVisiblity));
 
             removeSubscriptions();
@@ -574,9 +554,9 @@ export const RootStore = types
                     token: (token => (token ? `${token}` : ''))(self.authStore.getToken()?.jwt),
                 });
 
-                self.handleAccountFetched = ({ accountStore, isSoftphoneAvailable, ...args }) => {
+                self.handleAccountFetched = ({ accountStore, ...args }) => {
                     authStore = args.authStore;
-                    const accessGranted = isSoftphoneAvailable(accountStore),
+                    const accessGranted = getSoftphoneAvailability(accountStore),
                         account = accountStore.toJSON()?.account;
 
                     accessGranted && accountFetchedHandlers.forEach(handler => handler(accountStore));
@@ -619,6 +599,25 @@ export const RootStore = types
                     });
                 };
 
+                subscribe('checkautolauncher', isStartApp => self.setStartApp(isStartApp));
+                subscribe('checkstartminimize', isStartMinimize => self.setStartMinimize(isStartMinimize));
+                subscribe('maximize', () => self.setLarge(true));
+                subscribe('unmaximize', () => self.setLarge(false));
+
+                subscribe('update_downloaded', () => self.showMessage({
+                    id: 'update-downloaded',
+                    title: 'Update received',
+                    buttons: [{
+                        id: 'update',
+                        text: 'Update',
+                        handler: () => eventBus.broadcast('quit_and_install')
+                    }]
+                }));
+
+                eventBus.broadcast('app_ready');
+                size.width && size.height && eventBus.broadcast('size', size);
+                eventBus.broadcast(self.isLarge ? 'maximize' : 'unmaximize');
+
                 return { authorize };
             })();
 
@@ -671,13 +670,7 @@ export const RootStore = types
                 );
         };
 
-        self.onLargenessChange = handler => {
-            largenessChangeHandlers.push(handler);
-            handler(self.isLarge);
-        };
-
-        const resetStore = () => applySnapshot(self, initialState),
-            handleLargenessChange = () => largenessChangeHandlers.forEach(handle => handle(self.isLarge));
+        const resetStore = () => applySnapshot(self, initialState);
 
         const setNotLarge = () => {
             if (!self.isLarge) {
@@ -687,7 +680,7 @@ export const RootStore = types
             self.isLarge = false;
             localStorage.setItem('isLarge', 'false');
 
-            handleLargenessChange();
+            eventBus.broadcast('unmaximize');
         };
 
         const setIsLarge = () => {
@@ -708,10 +701,11 @@ export const RootStore = types
             self.isLarge = true;
             localStorage.setItem('isLarge', 'true');
 
-            handleLargenessChange();
+            eventBus.broadcast('maximize');
         };
 
-        const setAccount = account => (self.account = (account || {}));
+        const setLarge = value => value ? self.setIsLarge() : self.setNotLarge(),
+            setAccount = account => (self.account = (account || {}));
 
         return {
             afterCreate,
@@ -721,6 +715,7 @@ export const RootStore = types
             request,
             setNotLarge,
             setIsLarge,
+            setLarge,
             maybeHidePhoneNumber: maybeHidePhoneNumberMethod 
         };
     });
@@ -728,4 +723,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
\ No newline at end of file
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
\ No newline at end of file
