diff --git a/package.json b/package.json
index 7f1c52d..a978a99 100644
--- a/package.json
+++ b/package.json
@@ -55,7 +55,7 @@
     "string-hash": "^1.1.3",
     "nanoid": "^3.2.0",
     "@babel/runtime": "^7.13.9",
-    "antd": "^4.13.0",
+    "antd": "3.26.7",
     "async-mutex": "^0.3.2",
     "axios": "^0.21.1",
     "classnames": "^2.2.6",
@@ -71,13 +71,13 @@
     "react": "^17.0.1",
     "react-dom": "^17.0.1",
     "react-intl": "^5.13.2",
-    "react-router-dom": "^5.2.0",
+    "react-router-dom": "5.3.1",
     "react-redux": "^7.0.0",
     "redux": "^4.0.0",
     "redux-thunk": "^2.3.0",
     "short-uuid": "^4.2.0",
     "uuid": "^8.3.2",
     "yup": "^0.32.9",
-    "uis-softphone": "git+https://sip_lib:glpat-Xzs1ef2zY2QoxFSchj8P@gitlab.uis.dev/web/sip_lib.git#multitab-local"
+    "uis-softphone": "./misc/sip_lib"
   }
 }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index c72818e..96f93f8 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -89,19 +89,13 @@ export const RootStore = types
                 handlerCallEnd = () => null,
                 isAuthorized = false;
 
-            const logout = () => self.authStore.getToken()?.jwt &&
-                authStore &&
-                !authStore?.isUserLogoutProceeding &&
-                authStore.fetchLogoutUser();
-
-            const doLogout = () => {
-                console.log('DO LOGOUT?', {
-                    authStore,
-                    isUserLogoutProceeding: authStore?.isUserLogoutProceeding,
-                    hasToken: self.authStore.getToken()?.jwt
-                });
+            const logout = () => {
+                if (authStore?.isUserLogoutProceeding) {
+                    return;
+                }
 
-                authStore ? logout() : self.authStore.doShellLogout();
+                self.authStore.getToken()?.jwt && authStore ?
+                    authStore.fetchLogoutUser() : self.authStore.doShellLogout();
             };
 
             let fileLogger = {
@@ -190,16 +184,10 @@ export const RootStore = types
                             break;
                         }
                         case HANDLE_WEBRTC_CREATED:
-                            console.log('WEBRTC CREATED');
-
-                            action.webRTC.on('error', () => {
-                                console.log('ERROR OCCURED');
-                                hasError = true;
-                            });
+                            action.webRTC.on('error', () => (hasError = true));
                             break;
                         case HANDLE_LOGOUT:
-                            console.log('HANDLE LOGOUT');
-                            !hasError && doLogout();
+                            !hasError && logout();
                             break;
                         case SOFTPHONE_HIGHT_CHANGED:
                             fireSizeChangeEvent(action.isSoftphoneHigh);
@@ -236,7 +224,7 @@ export const RootStore = types
                                             self.authStore.doShellRefreshToken();
                                             break;
                                         case 'invalid_token':
-                                            doLogout();
+                                            logout();
                                             break;
                                         default:
                                             callback(response);
@@ -355,8 +343,6 @@ export const RootStore = types
                     },
                     ...args
                 }) => {
-                    console.log('FETCHED', {accountStore, authStore, args});
-
                     authStore = args.authStore;
 
                     const accessGranted = !!(
@@ -413,4 +399,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
