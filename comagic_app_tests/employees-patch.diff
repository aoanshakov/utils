diff --git a/package.json b/package.json
index 89f855b..4eb78a3 100644
--- a/package.json
+++ b/package.json
@@ -67,12 +67,10 @@
     "webpack-merge": "^5.8.0"
   },
   "dependencies": {
-    "@comagic/core": "^0.7.0",
     "axios": "^0.24.0",
     "classnames": "^2.3.1",
     "formik": "^2.2.9",
     "history": "^5.3.0",
-    "magic-ui": "0.0.0-int1",
     "mobx": "^6.6.1",
     "mobx-react-lite": "^3.4.0",
     "mobx-state-tree": "^5.1.5",
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index a0ce94b..af0f73e 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -1,4 +1,4 @@
-import { Instance, applySnapshot, getSnapshot, types } from 'mobx-state-tree';
+import { Instance, applySnapshot, getSnapshot, getEnv, types } from 'mobx-state-tree';
 import React from 'react';
 import { AxiosRequestConfig } from 'axios';
 
@@ -13,7 +13,6 @@ export const ACCESS_TOKEN_INVALID = 'access_token_invalid';
 export const RootStore = types
     .model('RootStore', {
         websocketStore: types.optional(WebsocketStore, {}),
-        authStore: types.optional(AuthStore, {}),
         employeesStore: types.optional(EmployeesStore, {}),
         locale: types.optional(types.string, 'en'),
     })
@@ -21,6 +20,8 @@ export const RootStore = types
         formatMessage: (key: string): string => getIntlMessages(self.locale)[key] || key,
     }))
     .actions(self => {
+        let initialState;
+
         const afterCreate = () => {
             initialState = getSnapshot(self);
         };
@@ -33,6 +34,8 @@ export const RootStore = types
             applySnapshot(self, initialState);
         };
 
+        self.hostRootStore = getEnv(self).hostRootStore;
+
         return {
             afterCreate,
             resetStore,
@@ -44,11 +47,26 @@ export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
 
-export let rootStore: RootInstance;
-export const createRootStore = () => (rootStore = RootStore.create({}));
+let rootStore;
+
+const cache = process.env.REACT_APP_TEST_MODE == 'true' ? {
+    getValue: () => window.employeesStore,
+    setValue: value => (window.employeesStore = value),
+} : {
+    getValue: () => rootStore,
+    setValue: value => (rootStore = value),
+};
+
+export const getRootStore = hostRootStore => {
+    const rootStore = cache.getValue();
 
-createRootStore();
+    if (rootStore) {
+        if (rootStore.hostRootStore !== hostRootStore) {
+            throw new Error('Host root store inexplicably changed');
+        }
+    } else {
+        cache.setValue(RootStore.create({}, { hostRootStore }));
+    }
 
-if (process.env.NODE_ENV === 'development') {
-    window.employeesRootStore = rootStore;
-}
+    return cache.getValue(rootStore);
+};
