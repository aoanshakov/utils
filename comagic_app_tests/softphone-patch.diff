diff --git a/package.json b/package.json
index 5374789..e4e7e3c 100644
--- a/package.json
+++ b/package.json
@@ -18,8 +18,6 @@
     "@svgr/webpack": "^5.5.0",
     "@types/classnames": "^2.2.11",
     "@types/node": "^14.14.37",
-    "@types/react": "^18.0.17",
-    "@types/react-dom": "^18.0.6",
     "@types/uuid": "^8.3.1",
     "@types/yup": "^0.29.11",
     "@typescript-eslint/eslint-plugin": "^4.16.1",
@@ -52,8 +50,6 @@
   },
   "dependencies": {
     "@babel/runtime": "^7.13.9",
-    "@comagic/core": "0.0.0-int0",
-    "@uiscom/uis_webrtc": "0.0.0-int0",
     "async-mutex": "^0.3.2",
     "axios": "^0.21.1",
     "classnames": "^2.2.6",
@@ -62,23 +58,17 @@
     "file-saver": "^2.0.5",
     "filesize": "^8.0.3",
     "formik": "^2.2.9",
-    "magic-ui": "0.0.0-int0",
     "mobx": "^6.1.8",
     "mobx-react-lite": "^3.2.0",
     "mobx-state-tree": "^5.0.1",
     "moment": "^2.29.1",
     "nanoid": "^3.2.0",
-    "react": "^18.2.0",
     "react-csv": "^2.0.3",
-    "react-dom": "^18.2.0",
-    "react-intl": "^5.13.2",
     "react-redux": "^7.0.0",
-    "react-router-dom": "^6.4.0",
     "redux": "^4.0.0",
     "redux-thunk": "^2.3.0",
     "short-uuid": "^4.2.0",
     "string-hash": "^1.1.3",
-    "uis-softphone": "git+https://sip_lib:glpat-Xzs1ef2zY2QoxFSchj8P@gitlab.uis.dev/web/sip_lib.git#multitab-local",
     "uuid": "^8.3.2",
     "yup": "^0.32.9"
   }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index 8fb19b7..60f4be3 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -14,7 +14,23 @@ import React from 'react';
 import moment from 'moment';
 import { combineReducers, createStore, applyMiddleware } from 'redux';
 import thunkMiddleware from 'redux-thunk';
-import { toggleWidgetVisiblity, setAxiosProcessor, setStatus, onDialpadKeyDown, showMessage, closeMessage, showWidget, sendBrowserNotification, addNotificationToSession, sendToWebsocket, terminateSession, doToggleCallInfoCollapsedness, makeSoftphoneHigh, openCallsPanel, setIsVirtualNumberGroupsEnabled } from 'uis-softphone/actions';
+import {
+    toggleWidgetVisiblity,
+    setAxiosProcessor,
+    setStatus,
+    onDialpadKeyDown,
+    showMessage,
+    closeMessage,
+    showWidget,
+    sendBrowserNotification,
+    addNotificationToSession,
+    sendToWebsocket,
+    terminateSession,
+    doToggleCallInfoCollapsedness,
+    makeSoftphoneHigh,
+    openCallsPanel,
+    setIsVirtualNumberGroupsEnabled 
+} from 'uis-softphone/actions';
 import { authorization } from 'uis-softphone/authorization/actions';
 import { STATUSES_MANAGER_CREATED, HANDLE_WEBRTC_CREATED } from 'uis-softphone/authorization/constants';
 import createI18N from 'uis-softphone/common/createI18N';
@@ -210,6 +226,8 @@ export const RootStore = types
                         })
                     }),
                     ...createSoftphoneReducer({
+                        getPhoneNumber: () => '',
+                        multiTabEnabled: !isSingleApp,
                         createFocusednessGetter: isSingleApp ? createFocusednessGetter : createDefaultFocusednessGetter,
                         shouldHideDialpadInIPTelephoneMode: () => !self.isLarge,
                         shouldNotificationBeStickedToBottom: isSingleApp,
@@ -553,7 +571,12 @@ export const RootStore = types
                     self.setAccount(account);
                     localStorage.getItem('isLarge') === 'true' && self.setIsLarge();
 
-                    dispatch(setIsVirtualNumberGroupsEnabled(['usa', 'rolands'].includes(account?.project)));
+                    const areVirtualNumberGroupsEnabled = ['usa', 'rolands'].includes(account?.project);
+
+                    self.reduxStore.getState().rootStore.
+                        setAreVirtualNumberGroupsEnabled(areVirtualNumberGroupsEnabled);
+
+                    dispatch(setIsVirtualNumberGroupsEnabled(areVirtualNumberGroupsEnabled));
                 };
 
                 window.addEventListener('tokenChange', () => updateState(getTokenParams()));
@@ -704,4 +727,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
\ No newline at end of file
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
\ No newline at end of file
