diff --git a/package.json b/package.json
index 8b7d3d7..e5aadc4 100644
--- a/package.json
+++ b/package.json
@@ -20,7 +20,6 @@
     "@types/node": "^14.14.37",
     "@types/react": "^17.0.2",
     "@types/react-dom": "^17.0.1",
-    "@types/react-router-dom": "^5.1.6",
     "@types/uuid": "^8.3.1",
     "@types/yup": "^0.29.11",
     "@typescript-eslint/eslint-plugin": "^4.16.1",
@@ -57,7 +56,7 @@
     "nanoid": "^3.2.0",
     "@babel/runtime": "^7.13.9",
     "@comagic/core": "^0.6.1",
-    "antd": "^4.13.0",
+    "antd": "3.26.7",
     "async-mutex": "^0.3.2",
     "axios": "^0.21.1",
     "classnames": "^2.2.6",
@@ -74,14 +73,12 @@
     "react": "^17.0.1",
     "react-dom": "^17.0.1",
     "react-intl": "^5.13.2",
-    "react-router-dom": "^5.2.0",
     "react-redux": "^7.0.0",
     "redux": "^4.0.0",
     "redux-thunk": "^2.3.0",
     "short-uuid": "^4.2.0",
     "uuid": "^8.3.2",
     "yup": "^0.32.9",
-    "uis-softphone": "git+https://sip_lib:glpat-Xzs1ef2zY2QoxFSchj8P@gitlab.uis.dev/web/sip_lib.git#multitab-local",
-    "@uiscom/uis_webrtc": "git+https://uis_webrtc:glpat-ydssS-Qi8NFPN7dmjkcp@gitlab.uis.dev/web/uis_webrtc.git#local-multitab"
+    "uis-softphone": "./misc/sip_lib"
   }
 }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index ac68ad7..57f8549 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -49,7 +49,8 @@ import {
     SOFTPHONE_HIGHT_CHANGED,
     HANDLE_EVENT,
     HANDLE_LOGOUT,
-    SET_PERMISSIONS
+    SET_PERMISSIONS,
+    IS_TRUE
 } from 'uis-softphone/constants';
 
 type RootInstanceSnapshotOut = SnapshotOut<typeof RootStore>;
@@ -206,6 +207,8 @@ export const RootStore = types
                             data.name == 'application_version_changed' &&
                                 applicationChangeHandlers.forEach(handler => handler(data));
 
+                            data.data?.action == 'prepare_to_prompter_call' &&
+                                handlePrompterCallPreparing(data?.data?.data);
                             break;
                         }
                         case HANDLE_WEBRTC_CREATED: {
@@ -236,6 +239,7 @@ export const RootStore = types
                                 {phoneNumber, channel} = session;
                             
                             const {
+                                softphone: {isMaster},
                                 prompter: {pendingPromptCall},
                                 webRTC: {
                                     sdk,
@@ -264,7 +268,6 @@ export const RootStore = types
                                     }
                                 ));
 
-                                incomingRingtone.mute();
                                 dispatch(setPrompterSipLine(channel));
 
                                 subscriber_number && dispatch(addNotificationToSession({
@@ -272,8 +275,11 @@ export const RootStore = types
                                     subscriber_number 
                                 }));
 
-                                sdk.mute();
-                                sdk.answer(channel);
+                                if (isMaster == IS_TRUE) {
+                                    incomingRingtone.mute();
+                                    sdk.mute();
+                                    sdk.answer(channel);
+                                }
                             }
 
                             break;
@@ -456,7 +462,7 @@ export const RootStore = types
                 };
             }
 
-            eventBus.subscribe('prepare_to_prompter_call', ({
+            const handlePrompterCallPreparing = ({
                 call_session_id,
                 subscriber_number,
                 employee_full_name,
@@ -474,6 +480,18 @@ export const RootStore = types
 
                     eventBus.broadcast('await_prompter_call', {call_session_id});
                 }
+            };
+
+            eventBus.subscribe('prepare_to_prompter_call', data => {
+                self.reduxStore.getState().webRTC.sendCrossTabMessage({
+                    type: 'notify_others',
+                    data: {
+                        action: 'prepare_to_prompter_call',
+                        data
+                    }
+                });
+
+                handlePrompterCallPreparing(data);
             });
 
             eventBus.subscribe('end_prompter_call', () => {
@@ -507,4 +525,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
