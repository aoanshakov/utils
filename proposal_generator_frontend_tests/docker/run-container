#!/bin/bash

action="initialize"
applicationDirectory=""
port=""
farg=""
isOsX=0
dockerArguments=""
entrypointArguments=""
buildImage=0
noCache=""

if [ $(uname | grep Darwin | wc -l) -eq 0 ]
then
    dockerArguments="$dockerArguments --mount type=bind,source=/etc/passwd,target=/etc/passwd"
    dockerArguments="$dockerArguments --mount type=bind,source=/etc/group,target=/etc/group"
    entrypointArguments="$entrypointArguments --owner $USER"
    farg="-f"
else
    isOsX=1
fi

function getAbsolutePath {
    currentDirectory=$(pwd)
    cd $@
    result=$(pwd)
    echo $result
    cd $currentDirectory
}

function usageError {
    echo $@
    echo "Для того чтобы узнать как пользоваться скриптом запуска контейнера выполни команду \"$0 --help\""
}

while [ -n "$1" ]
do
    if [ "$1" = "--exit" ]
    then
        entrypointArguments="$entrypointArguments --exit"
    elif [ "$1" = "--build-image" ]
    then
        buildImage=1
    elif [ "$1" = "--no-cache" ]
    then
        noCache="--no-cache"
    elif [ "$1" = "--application-directory" ]
    then
        if [ -z "$2" ]
        then
            echo "Укажите путь к директории с приложением."
            exit 1
        fi

        applicationDirectory="$2"
        shift
    elif [ "$1" = "--port" ]
    then
        if [ -z "$2" ]
        then
            echo "Укажите номер порта, который будет соответстовать восьмидесятому порту в контейнере."
            exit 1
        fi

        dockerArguments="$dockerArguments -p $2:80"
        action='run-server'
        shift
    elif [ "$1" = "--action" ]
    then
        action=$2
        shift
    elif [ "$1" = "--help" ] || [ "$1" = "-h" ]
    then
        echo "Для того чтобы указать путь к приложению определи переменную PROPOSAL_GENERATOR_FRONTEND_APP_DIRECTORY " \
            "или вызови скрипт с опцией --application-directory /path/to/application"
        echo "Для того чтобы собрать приложение в контейнере выполни команду \"$0 --action initialize\""
        echo "Для того чтобы запустить веб-приложение, выполни команду \"$0 --port 1234\" и открой URL " \
            "http://127.0.0.1:1234/index.html в Google Chrome."
        exit 0
    else
        usageError "Аргумент $1 не поддерживается. Скрипту могут быть переданы только опции --application-directory, " \
            "--port, --action, --no-cache, --build-image, --exit, или --server."
        exit 1
    fi

    shift
done

docker --version
if [ $? -ne 0 ]
then
    echo "Установи докер"
    exit 1
fi

currentFile=$0

if [ -L $currentFile ]
then
    currentFile=$(readlink $farg $currentFile)
    if [ $? -ne 0 ]
    then
        echo "Не удалось получить путь к скрипту"
        exit 1
    fi
fi

currentDir=$(dirname $currentFile)
if [ $? -ne 0 ]
then
    echo "Не удалось получить текущую директорию"
    exit 1
fi

imageTag='proposal_generator_frontend_tests'

if [ $buildImage -eq 1 ]
then
    docker build $noCache -t $imageTag $currentDir
    if [ $? -ne 0 ]
    then
        echo "Не удалось собрать образ"
        exit 1
    fi

    exit 0
fi

if [ -z "$applicationDirectory" ]
then
    if [ -n "$PROPOSAL_GENERATOR_FRONTEND_APP_DIRECTORY" ]
    then
        applicationDirectory=$PROPOSAL_GENERATOR_FRONTEND_APP_DIRECTORY
    fi
fi

if [ -n "$applicationDirectory" ]
then
    if [ ! -d $applicationDirectory ]
    then
        echo "Директория $applicationDirectory не существует"
        exit 1
    fi

    applicationDirectory="-v $applicationDirectory:/usr/local/src/proposal_generator_frontend"
fi

if [ -z "$applicationDirectory" ]
then
    echo "Путь к приложению не указан"
    echo "Для того чтобы указать путь к приложению определи переменную PROPOSAL_GENERATOR_FRONTEND_APP_DIRECTORY " \
        "или вызови скрипт с опцией --application-directory /path/to/application"
    exit 1
fi

linesCount=$(docker images ${imageTag} | wc -l)
if [ $? -ne 0 ]
then
    echo "Не удалось получить список образов"
    exit 1
fi

if [ $linesCount -eq 1 ]
then
    docker build --no-cache -t $imageTag $currentDir

    if [ $? -ne 0 ]
    then
        echo "Не удалось собрать образ"
        exit 1
    fi
fi

testsDir="$currentDir/.."

if [ $isOsX -eq 0 ]
then
    testsDir=$(readlink -f $testsDir)
    if [ $? -ne 0 ]
    then
        echo "Не удалось получить директорию с приложением"
        exit 1
    fi
else
    testsDir=$(getAbsolutePath $testsDir)
fi

docker run -it --rm \
    $applicationDirectory \
    -v $testsDir:/usr/local/src/tests \
    --mount type=bind,source=$HOME/.ssh/known_hosts,target=/root/.ssh/known_hosts \
    --mount type=bind,source=$HOME/.ssh/id_rsa,target=/root/.ssh/id_rsa \
    $dockerArguments \
    $imageTag \
    --action $action \
    $entrypointArguments
