diff --git a/package.json b/package.json
index 18318f8..5b94846 100644
--- a/package.json
+++ b/package.json
@@ -18,9 +18,6 @@
     "@svgr/webpack": "^5.5.0",
     "@types/classnames": "^2.2.11",
     "@types/node": "^14.14.37",
-    "@types/react": "^17.0.2",
-    "@types/react-dom": "^17.0.1",
-    "@types/react-router-dom": "^5.1.6",
     "@types/uuid": "^8.3.1",
     "@types/yup": "^0.29.11",
     "@typescript-eslint/eslint-plugin": "^4.16.1",
@@ -56,7 +53,6 @@
     "string-hash": "^1.1.3",
     "nanoid": "^3.2.0",
     "@babel/runtime": "^7.13.9",
-    "@comagic/core": "^0.6.7",
     "async-mutex": "^0.3.2",
     "axios": "^0.21.1",
     "classnames": "^2.2.6",
@@ -65,23 +61,17 @@
     "filesize": "^8.0.3",
     "formik": "^2.2.9",
     "history": "^4.10.1",
-    "magic-ui": "./magic_ui",
     "mobx": "^6.1.8",
     "mobx-react-lite": "^3.2.0",
     "mobx-state-tree": "^5.0.1",
     "moment": "^2.29.1",
-    "react": "^17.0.1",
     "react-csv": "^2.0.3",
-    "react-dom": "^17.0.1",
-    "react-intl": "^5.13.2",
-    "react-router-dom": "^5.2.0",
     "react-redux": "^7.0.0",
     "redux": "^4.0.0",
     "redux-thunk": "^2.3.0",
     "short-uuid": "^4.2.0",
     "uuid": "^8.3.2",
     "yup": "^0.32.9",
-    "uis-softphone": "git+https://sip_lib:glpat-Xzs1ef2zY2QoxFSchj8P@gitlab.uis.dev/web/sip_lib.git#multitab-local",
-    "@uiscom/uis_webrtc": "git+https://uis_webrtc:glpat-ydssS-Qi8NFPN7dmjkcp@gitlab.uis.dev/web/uis_webrtc.git#local-multitab"
+    "uis-softphone": "./misc/sip_lib"
   }
 }
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index afe421b..8ac3c5b 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -123,9 +123,9 @@ export const RootStore = types
         let initialState: RootInstanceSnapshotOut,
             hasError = false,
             doRequest = () => null,
-            doMaybeHidePhoneNumber = value => value;
+            doMaybeHidePhoneNumber = value => value,
+            listeners = {};
         const sizeChangeHandlers = [],
-            largenessChangeHandlers = [],
             accountFetchedHandlers = [],
             applicationChangeHandlers = [],
             subscriptionRemovers = [],
@@ -148,7 +148,7 @@ export const RootStore = types
                 enablingHandlers = [];
             hasError = false;
             subscriptionRemovers = [];
-            largenessChangeHandlers.splice(0, largenessChangeHandlers.length);
+            listeners = {};
 
             let authStore,
                 call = () => null,
@@ -443,11 +443,6 @@ export const RootStore = types
 
             const { dispatch, getState } = self.reduxStore;
 
-            self.onSizeChange = handler => {
-                sizeChangeHandlers.push(handler);
-                size.width && size.height && handler(size);
-            };
-
             self.onApplicationChangeChanger = handler => applicationChangeHandlers.push(handler);
 
             self.onAccountFetched = handler => {
@@ -671,10 +666,19 @@ export const RootStore = types
                 );
         };
 
-        self.onLargenessChange = handler => largenessChangeHandlers.push(handler);
+        self.addEventListener = (eventName, handler) => {
+            !listeners[eventName] && (listeners[eventName] = []);
+
+            self.onSizeChange = handler => {
+                sizeChangeHandlers.push(handler);
+                size.width && size.height && handler(size);
+            };
+        };
+
+        const resetStore = () => applySnapshot(self, initialState);
 
-        const resetStore = () => applySnapshot(self, initialState),
-            handleLargenessChange = () => largenessChangeHandlers.forEach(handle => handle(self.isLarge));
+        const handleLargenessChange = () => listeners[self.isLarge ? 'maximize' : 'unmaximize']?.
+            forEach(handle => handle());
 
         const setNotLarge = () => {
             if (!self.isLarge) {
@@ -725,4 +729,5 @@ export const RootStore = types
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({});
+export let rootStore;
+export const createRootStore = () => (rootStore = RootStore.create({}));
