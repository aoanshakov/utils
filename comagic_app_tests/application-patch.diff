diff --git a/config/webpack.config.js b/config/webpack.config.js
index 64299acc..9af0c361 100644
--- a/config/webpack.config.js
+++ b/config/webpack.config.js
@@ -7,11 +7,12 @@ const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
 const MiniCssExtractPlugin = require('mini-css-extract-plugin');
 const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
 const TerserPlugin = require('terser-webpack-plugin');
-const ExternalRemotesPlugin = require('external-remotes-plugin');
+//const ExternalRemotesPlugin = require('external-remotes-plugin');
 const CopyPlugin = require('copy-webpack-plugin');
 const comagicCoreDeps = require('@comagic/core/package.json');
 const magicUIDeps = require('magic-ui/package.json');
 const uisWebRTCDeps = require('@uiscom/uis_webrtc/package.json');
+const hash = require('string-hash');
 
 const { ModuleFederationPlugin } = webpack.container;
 const pkgJson = require('../package.json');
@@ -21,6 +22,8 @@ const NODE_ENV = process.env.NODE_ENV || 'prod';
 const REACT_APP = /^REACT_APP_/i;
 
 const appDirectory = fs.realpathSync(process.cwd());
+const miscDirectory = `${appDirectory}/misc`;
+const magicUIDirectory = `${miscDirectory}/magic_ui`;
 const publicDir = path.resolve(appDirectory, 'public');
 const buildDir = path.resolve(appDirectory, 'build');
 const dotenv = path.resolve(appDirectory, '.env');
@@ -28,9 +31,20 @@ const isProductionMode = NODE_ENV !== 'development';
 const webpackMode = isProductionMode ? 'production' : 'development';
 const localIdentName = isProductionMode ? '[hash:base64]' : '[path][name]__[local]';
 const isBundleAnalyzerPlugin = false;
+const subModules = ['chats', 'analytics/frontend'];
 
 const lessLoader = {
     loader: 'less-loader',
+    options: {
+        lessOptions: {
+            modifyVars: {
+                'hack': `true; ${
+                    subModules.map(module => `@import "${miscDirectory}/${module}/theme/theme.less"`).join('; ')
+                }`,
+            },
+            javascriptEnabled: true,
+        },
+    },
 };
 
 const fontsOptions = isProductionMode
@@ -107,10 +121,11 @@ const webpackDefinePlugin = () => {
     return opts;
 };
 
-const cssLoaders = extra => {
+const cssLoaders = (extra, loaderParams = {}) => {
     const loaders = [
         {
             loader: isProductionMode ? MiniCssExtractPlugin.loader : 'style-loader',
+            ...loaderParams
         },
         {
             loader: 'css-loader',
@@ -215,7 +230,7 @@ const plugins = () => {
             ignoreOrder: true,
         }),
 
-        new ModuleFederationPlugin({
+        /*new ModuleFederationPlugin({
             name: 'shell',
             shared: getSharedDeps(),
             remotes: {
@@ -245,6 +260,11 @@ const plugins = () => {
             },
         }),
         new ExternalRemotesPlugin(),
+        }),*/
+
+        new webpack.optimize.LimitChunkCountPlugin({
+            maxChunks: 1
+        })
     ];
 
     if (isProductionMode) {
@@ -268,6 +288,17 @@ const plugins = () => {
     return pluginsList;
 };
 
+const createAliases = appDirectory => ({
+    '@': path.resolve(appDirectory, './src'),
+    '@models': path.resolve(appDirectory, './src/models'),
+    '@lib': path.resolve(appDirectory, './src/components/lib'),
+    '@hooks': path.resolve(appDirectory, './src/hooks'),
+});
+
+const iconsRegExp = new RegExp(
+    ['', '(softphone|softphone', 'src|call_history|uis_webrtc', 'src)', 'icons', ''].join('\\' + path.sep)
+);
+
 module.exports = {
     entry: './src/index.tsx',
     target: NODE_ENV == 'softphone' ? 'electron-renderer' : 'web',
@@ -289,6 +320,21 @@ module.exports = {
     module: {
         rules: [
             {
+                test: /\.js$/,
+                exclude: /node_modules(?!\/(uis-softphone|magic-ui)\/)/,
+                use: [{
+                    loader: 'babel-loader',
+                    options: {
+                        presets: ['@babel/preset-react', '@babel/preset-env'],
+                        comments: false,
+                        plugins: [
+                            '@babel/plugin-proposal-private-methods',
+                            '@babel/plugin-proposal-class-properties',
+                        ]
+                    }
+                }]
+            },
+            {
                 test: /\.(ts|tsx)$/,
                 use: {
                     loader: 'ts-loader',
@@ -308,7 +354,7 @@ module.exports = {
                         }),
                     },
                 },
-                exclude: /node_modules/,
+                exclude: /node_modules(?!\/(uis-softphone|magic-ui)\/)/,
             },
             {
                 test: /\.css$/,
@@ -319,6 +365,29 @@ module.exports = {
                 use: cssLoaders(lessLoader),
             },
             {
+                test: /\.(sa|sc|c)ss$/,
+                include: `${magicUIDirectory}/src`,
+                use: [
+                    {
+                        loader: 'style-loader',
+                    },
+                    {
+                        loader: 'css-loader',
+                    },
+                    {
+                        loader: 'resolve-url-loader',
+                    },
+                    {
+                        loader: 'sass-loader',
+                        options: {
+                            sassOptions: {
+                                includePaths: [magicUIDirectory]
+                            }
+                        }
+                    },
+                ],
+            },
+            {
                 test: /\.(png|jpg)$/,
                 loader: 'url-loader',
                 options: {
@@ -334,6 +403,7 @@ module.exports = {
             },
             {
                 test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
+                exclude: iconsRegExp,
                 use: [
                     {
                         loader: '@svgr/webpack',
@@ -349,17 +419,122 @@ module.exports = {
                     },
                 ],
             },
+            {
+                test: iconsRegExp,
+                use: ({resource}) => [{
+                    loader: 'babel-loader',
+                    options: {
+                        presets: ['@babel/preset-react', '@babel/preset-env'],
+                        comments: false
+                    }
+                }, {
+                    loader: '@svgr/webpack',
+                    options: {
+                        babel: false,
+                        icon: true,
+                        svgoConfig: {
+                            plugins: [{
+                                cleanupIDs: {
+                                    prefix: `svg${hash(path.relative(__dirname, resource))}`,
+                                    force: true
+                                }
+                            }]
+                        }
+                    }
+                }]
+            },
         ],
     },
     resolve: {
         extensions: ['.tsx', '.ts', '.js'],
 
         alias: {
-            '@': path.resolve(appDirectory, './src'),
-            '@models': path.resolve(appDirectory, './src/models'),
-            '@lib': path.resolve(appDirectory, './src/components/lib'),
-            '@hooks': path.resolve(appDirectory, './src/hooks'),
+            ...createAliases(appDirectory),
+            'contacts/Root': `${miscDirectory}/contacts/src/Wrapper.tsx`,
+            'leadgen/Root': `${miscDirectory}/Stub.js`,
+            'softphone/Root': 'softphone/src/Root.tsx',
+            'softphone/Account': 'softphone/src/Account.tsx',
+            'softphone/Settings': 'softphone/src/Settings.tsx',
+            'softphone/CallHistory': 'softphone/src/call_history/index.tsx',
+            'softphone/CallStats': 'softphone/src/call_stats/index.tsx',
+            'chats/Root': 'chats/src/Root.tsx',
+            'chats/Account': 'chats/src/components/account/index.tsx',
+            'chats/BasicAccount': 'chats/src/components/account/BasicAccount.tsx',
+            'chats/ReportChatHistoryDrawer': 'chats/src/components/chats/chat-panel/ReportChatHistoryDrawer.tsx',
+            'chats/Menu': 'chats/src/components/main/menu/index.tsx',
+            'chats/NotificationWrapper': `${miscDirectory}/Stub.js`,
+            'chatsDistribution/Root': `${miscDirectory}/Stub.js`,
+            'callTracking/CalltrackingSubstitutionControl': `${miscDirectory}/Stub.js`,
+            'callTracking/CalltrackingTrafficControl': `${miscDirectory}/Stub.js`,
+            'callTracking/CalltrackingNumbers': `${miscDirectory}/Stub.js`,
+            'callTracking/CalltrackingSubstitutionRules': `${miscDirectory}/Stub.js`,
+            'callTracking/NumberPools': `${miscDirectory}/Stub.js`,
+            'callTracking/Sites': `${miscDirectory}/Stub.js`,
+            'analytics/CreateDashboardButton': `${miscDirectory}/Stub.js`,
+            'analytics/AdAnalytics': `${miscDirectory}/Stub.js`,
+            'analytics/CreateReport': `${miscDirectory}/Stub.js`,
+            'analytics/Dashboards/ChiefDashboard': `${miscDirectory}/Stub.js`,
+            'analytics/Communications':
+                `${miscDirectory}/analytics/frontend/src/components/reports/communications/index.tsx`,
+            'analytics/Dashboards/Dashboard': `${miscDirectory}/Stub.js`,
+            'analytics/DealsAnalytics': `${miscDirectory}/Stub.js`,
+            'analytics/Deals': `${miscDirectory}/Stub.js`,
+            'analytics/Leads': `${miscDirectory}/Stub.js`,
+            'analytics/Dashboards/MarketerDashboard': `${miscDirectory}/Stub.js`,
+            'analytics/SharedReport': `${miscDirectory}/Stub.js`,
+            'analytics/cancelPendingRequests': `${miscDirectory}/Stub.js`,
+            'analytics/ReportTable':
+                `${miscDirectory}/analytics/frontend/src/components/reports/communications/ReportTable.tsx`,
+            'analytics/CalendarButton':
+                `${miscDirectory}/analytics/frontend/src/components/lib/calendar/BasicCalendarButton.tsx`,
+            'analytics/RadioButton':
+                `${miscDirectory}/analytics/frontend/src/components/lib/radio-button/RadioButton.tsx`,
+            'analytics/RadioGroup':
+                `${miscDirectory}/analytics/frontend/src/components/lib/radio-button/RadioGroup.tsx`,
+            'supervisorWorkplace/Root': `${miscDirectory}/Stub.js`,
+            'supervisorWorkplace/Menu': `${miscDirectory}/Stub.js`,
+            'supervisorWorkplace/NotificationWorkplace': `${miscDirectory}/Stub.js`
         },
+
+        plugins: [{
+            apply: resolver => resolver.getHook('resolve').tapAsync('RelativeAliasResolvingPlugin', (
+                request,
+                resolveContext,
+                callback
+            ) =>  {
+                const target = resolver.ensureHook('resolve'),
+                    splitted = request.request.split('/');
+
+                const {
+                    directory,
+                    aliases
+                } = subModules.concat(['softphone', 'contacts']).map(module => {
+                    const directory = `${miscDirectory}/${module}`;
+
+                    return {
+                        directory,
+                        aliases: createAliases(directory)
+                    };
+                }).find(({
+                    directory,
+                    aliases
+                }) => request.path.indexOf(directory) === 0 && Object.keys(aliases).some(
+                    alias => splitted[0] == alias
+                )) || {};
+
+                if (!directory) {
+                    callback();
+                    return;
+                }
+
+                splitted[0] = aliases[splitted[0]]
+
+                return resolver.doResolve(target, {
+                    ...request,
+                    request: splitted.join('/') 
+                }, null, resolveContext, callback);
+            })
+        }]
     },
     output: {
         clean: true,
diff --git a/package.json b/package.json
index 3b468556..047e348e 100644
--- a/package.json
+++ b/package.json
@@ -59,8 +59,8 @@
     "style-loader": "^2.0.0",
     "terser-webpack-plugin": "^5.1.4",
     "ts-import-plugin": "^1.6.7",
-    "ts-loader": "^8.0.17",
-    "typescript": "4.4.3",
+    "ts-loader": "8.0.17",
+    "typescript": "4.2.2",
     "url-loader": "^3.0.0",
     "webpack": "^5.72.0",
     "webpack-bundle-analyzer": "^4.4.0",
@@ -69,13 +69,17 @@
     "webpack-merge": "^5.7.3"
   },
   "dependencies": {
-    "@comagic/core": "^0.6.7",
+    "@comagic/core": "./misc/core",
     "@sentry/react": "^6.17.6",
     "@sentry/tracing": "^6.17.6",
     "ajv": "^8.8.2",
+    "analytics": "./misc/analytics/frontend",
+    "antd": "3.26.7",
     "archiver": "^5.3.0",
     "auto-launch": "^5.0.5",
     "axios": "^0.24.0",
+    "babel-loader": "^8.0.4",
+    "chats": "./misc/chats",
     "classnames": "^2.2.6",
     "dotenv": "^8.2.0",
     "dotenv-expand": "^5.1.0",
@@ -87,7 +91,7 @@
     "formik": "^2.2.9",
     "history": "^4.10.1",
     "lodash": "^4.17.20",
-    "magic-ui": "git+https://magic-ui:9d_M4ruzxtnTCt__5qs1@gitlab.uis.dev/web/magic_ui.git#int_2022_13.0",
+    "magic-ui": "./misc/magic_ui",
     "mobx": "^6.3.8",
     "mobx-react-lite": "^3.2.2",
     "mobx-state-tree": "^5.1.0",
@@ -97,10 +101,15 @@
     "react-dom": "^17.0.2",
     "stream-buffers": "^3.0.2",
     "react-flow-renderer": "^9.7.4",
-    "react-intl": "^5.15.8",
-    "react-router-dom": "^5.2.0",
+    "react-intl": "5.13.2",
+    "react-router": "5.2.1",
+    "react-router-dom": "5.2.1",
+    "simplebar-react": "^2.4.1",
+    "softphone": "./misc/softphone",
+    "string-hash": "^1.1.3",
+    "contacts": "./misc/contacts",
     "yup": "^0.28.1",
-    "@uiscom/uis_webrtc": "git+https://uis_webrtc:glpat-ydssS-Qi8NFPN7dmjkcp@gitlab.uis.dev/web/uis_webrtc.git#local-multitab"
+    "@uiscom/uis_webrtc": "./misc/softphone/misc/sip_lib/uis_webrtc"
   },
   "optionalDependencies": {
     "dmg-license": "^1.0.9"
diff --git a/public/index.html b/public/index.html
index fd0f39d9..6741d8aa 100644
--- a/public/index.html
+++ b/public/index.html
@@ -23,7 +23,29 @@
     })(window, document, 'script', 'dataLayer', 'GTM-TJXG5CR');</script>
     <!-- End Google Tag Manager -->
     <% } %>
-    <script>window.rootConfig = <%= rootConfig %>;</script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/jasmine.js"></script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/jasmine-html.js"></script>
+    <script>
+        var windowLoadHandler = window.onload;
+    </script>
+    <script src="/tests/utils/jasmine/lib/jasmine-3.4.0/boot.js"></script>
+    <script>
+        window.onload = windowLoadHandler;
+    </script>
+    <script src="/tests/utils/jasmine/lib/jasmine-ajax/lib/mock-ajax.js"></script>
+    <script src="/tests/utils/jasmine/console-reporter.js"></script>
+    <script src="/tests/utils/js-tester.js"></script>
+    <script type="text/javascript">
+        var tests = new JsTester_Tests(new JsTester_Factory());
+        tests.exposeDebugUtils('jsTestDebug');
+    </script>
+    <script src="/tests/utils/require.js"></script>
+    <script src="/tests/{script}.js"></script>
+    <style>
+        #root {
+            position: static !important;
+        }
+    </style>
 </head>
 <body class="cm-body">
     <% if (htmlWebpackPlugin.options.env.production) { %>
@@ -35,5 +57,6 @@
     <% } %>
     <noscript>You need to enable JavaScript to run this app.</noscript>
     <div id="root"></div>
+    <script src="/tests/utils/tests.js"></script>
 </body>
 </html>
\ No newline at end of file
diff --git a/scripts/dev.js b/scripts/dev.js
index 54c1319c..94add9fd 100644
--- a/scripts/dev.js
+++ b/scripts/dev.js
@@ -2,17 +2,27 @@
 
 process.env.NODE_ENV = 'development';
 
+const { Args, isString } = require('./arguments');
 const webpack = require('webpack');
 const WebpackDevServer = require('webpack-dev-server');
-
 const configFactory = require('../config/webpack.config.js');
 
-const compiler = webpack(configFactory);
+const params = (new Args({
+    entry: {
+        validate: isString
+    },
+})).createObjectFromArgsArray(process.argv);
+
+const compiler = webpack({
+    ...configFactory,
+    ...params
+});
 
 const devServer = new WebpackDevServer(
     {
         port: parseInt(process.env.PORT, 10) || 8080,
-        hot: true,
+        hot: false,
+        liveReload: false,
         headers: { 'Access-Control-Allow-Origin': '*' },
         historyApiFallback: true,
     },
diff --git a/src/bootstrap.tsx b/src/bootstrap.tsx
index 68f48551..4fda9bbb 100644
--- a/src/bootstrap.tsx
+++ b/src/bootstrap.tsx
@@ -1,95 +1,24 @@
-import React, { useState } from 'react';
-import { observer } from 'mobx-react-lite';
+import React from 'react';
 import ReactDOM from 'react-dom';
-import { Router } from 'react-router-dom';
-import { IntlProvider } from 'react-intl';
-import moment from 'moment';
-import { CoreProvider } from '@comagic/core';
-import * as Sentry from '@sentry/react';
-import { Integrations } from '@sentry/tracing';
 
-import { useMountEffect } from '@hooks';
+import Root from '@comagic/core/src/components/bootstrap';
 
+import { useMst } from '@/hooks';
 import { Provider, rootStore } from '@models/RootStore';
 
 import history from './history';
-import { getIntlLocale, getIntlMessages } from './i18n';
+import { intl } from './i18n';
 
 import App from './App';
 
-import './global';
-import { createPureHistory, loadTheme } from './utils';
-
-const sentryDSN = process.env.SENTRY_DSN;
-
-if (sentryDSN) {
-    Sentry.init({
-        dsn: sentryDSN,
-        integrations: [
-            new Integrations.BrowserTracing({
-                startTransactionOnLocationChange: false,
-            }),
-        ],
-        tracesSampleRate: 1.0,
-        beforeSend: (event, hint) => {
-            if (
-                hint &&
-                hint.originalException &&
-                typeof hint.originalException !== 'string' &&
-                'message' in hint.originalException
-            ) {
-                const { message } = hint.originalException;
-                const ignoreErrors = ['Invalid JWT', 'Access token has been expired', 'canceled by'];
-                const hasError = ignoreErrors.some(e => message.startsWith(e));
-
-                if (hasError) {
-                    return null;
-                }
-            }
-
-            return event;
-        },
-    });
-}
-
-const Root: React.FC = observer(props => {
-    const { accountStore, notificationStore } = rootStore;
-    const {
-        projectData: { locale },
-    } = accountStore;
-    const [themeLoaded, setThemeLoaded] = useState(false);
-    const query = new URLSearchParams(history.location.search);
-    const theme = query.get('theme');
-
-    /**
-     * Создаем историю для нормального функционирования связки Route/Popup
-     */
-    useMountEffect(() => {
-        void loadTheme(theme).then(() => {
-            setThemeLoaded(true);
-        });
-        createPureHistory();
-        moment.updateLocale('ru', {
-            monthsShort: {
-                format: 'янв_фев_мар_апр_мая_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
-                standalone: 'Янв_Фев_Мар_Апр_Май_Июн_Июл_Авг_Сен_Окт_Ноя_Дек'.split('_'),
-            },
-        });
-    });
-
-    if (!themeLoaded) return null;
-
-    return (
-        <CoreProvider isHostApp accountStore={accountStore} locale={locale} notificationStore={notificationStore}>
-            <Provider value={rootStore}>
-                <Router history={history}>
-                    <IntlProvider locale={getIntlLocale(locale)} messages={getIntlMessages(locale)}>
-                        <App {...(props || {})} />
-                    </IntlProvider>
-                </Router>
-            </Provider>
-        </CoreProvider>
-    );
-});
-
-ReactDOM.render(<Root {...(window.rootConfig || {})}/>, document.getElementById('root'));
+ReactDOM.render(<Root
+    {...(window.rootConfig || {})}
+    {...({
+        history,
+        appName,
+        Provider,
+        rootStore,
+        useMst,
+        i18n: intl
+    })}
+><App /></Root>, document.getElementById('root'));
diff --git a/src/history.ts b/src/history.ts
index 33bf6a02..fe524735 100644
--- a/src/history.ts
+++ b/src/history.ts
@@ -1,6 +1,6 @@
-import { createBrowserHistory } from 'history';
+import { createMemoryHistory } from 'history';
 
-const history = createBrowserHistory();
+const history = window.memoryHistory = createMemoryHistory();
 
 //TODO: может заменить на location.reload()?
 export const reloadPage = (): void => {
diff --git a/src/models/RootStore.ts b/src/models/RootStore.ts
index d5eb547b..ad50b7f4 100644
--- a/src/models/RootStore.ts
+++ b/src/models/RootStore.ts
@@ -1,318 +1,44 @@
 import React from 'react';
-import { applySnapshot, getSnapshot, Instance, SnapshotOut, types } from 'mobx-state-tree';
-import axios, { AxiosRequestConfig } from 'axios';
-import moment from 'moment';
-import * as fileSaver from 'file-saver';
-import { AccountStore, projectsData, NotificationStore } from '@comagic/core';
+import { Instance, SnapshotOut, types } from 'mobx-state-tree';
+import { projectsData } from '@comagic/core';
+import { cancelPendingRequests } from '@/rpc/httpRpc';
+import { intl } from '@/i18n';
 
 import { GOD_MODE } from '@/config';
 import { httpRpc, httpRpcAuth } from '@/rpc';
-import { HttpRpc } from '@/rpc/httpRpc';
 
-import { AuthStore, getToken } from '@models/auth/AuthStore';
 import { MenuStore } from '@models/menu/MenuStore';
 import { RootReportStore } from '@models/reports/RootReportStore';
 import { MarketplaceStore } from '@models/marketplace/MarketplaceStore';
 
-const ACCESS_TOKEN_EXPIRED = 'access_token_expired';
-const ACCESS_TOKEN_INVALID = 'access_token_invalid';
-const LOGOUT_USER = 'logout.user';
+import { RootStore as BasicRootStore } from '@comagic/core/src/models/host/DesktopRootStore';
 
 const isGodMode = () => {
     return localStorage.getItem(GOD_MODE) === '*';
 };
 
-type HttpRpcErrorModel = {
-    code: number;
-    message: string;
-    data: any;
-    request: any | null;
-};
-
-type RequestToRefresh = (nextResolve: boolean) => void;
-
-const getIpcRender = () => (
-    window.rootConfig?.appName == 'softphone' &&
-    ((window.require || (() => null))('electron')?.ipcRenderer)
-) || {
-    on: () => null,
-    send: () => null
-};
-
-const createSoftphoneStoreCreatingHandler = rootStore => {
-    let handleStoreCreating = store => {
-        [{
-            channelName: 'checkautolauncher',
-            paramName: 'isStartApp',
-            setParamValue: 'setStartApp'
-        }, {
-            channelName: 'checkstartminimize',
-            paramName: 'isStartMinimize',
-            setParamValue: 'setStartMinimize'
-        }].forEach(({channelName, paramName, setParamValue}) =>
-            getIpcRender().on(channelName, (event, data) => store[setParamValue]((data || {})[paramName])));
-
-        getIpcRender().send('app-ready');
-
-        getIpcRender().on('update-downloaded', () => store.showMessage({
-            id: 'update-downloaded',
-            title: 'Update received',
-            buttons: [{
-                id: 'update',
-                text: 'Update',
-                handler: () => getIpcRender().send('quit-and-install')
-            }]
-        }));
-
-        getIpcRender().on('maximize', () => store.setIsLarge());
-        getIpcRender().on('unmaximize', () => store.setNotLarge());
-
-        store.onLargenessChange(isLarge => {
-            rootStore.setLarge(isLarge);
-            getIpcRender().send(isLarge ? 'maximize' : 'unmaximize');
-        });
-
-        store.onApplicationChangeChanger(data => getIpcRender().send(
-            'application-version-changed',
-            data?.params?.application_version
-        ));
-
-        store.onSizeChange(size => getIpcRender().send('resize', size));
-        handleStoreCreating = () => null;
-    };
-
-    return store => handleStoreCreating(store);
-};
-
-const log = (...messages) => getIpcRender().send('log', messages.map(
-    message => typeof message == 'object' ? JSON.stringify(message) : `${message}`
-).join(' ').trim());
-
-window.addEventListener('error', function(event) {
-    log(((error => error ? (error + '') : '')(event?.error?.stack || event?.message)).trim())
-    return false;
-});
-
-export const RootStore = types
-    .model('RootStore', {
-        isLarge: types.optional(types.boolean, false),
+export const RootStore = BasicRootStore.named('RootStore')
+    .props({
         isGodMode: types.optional(types.boolean, isGodMode()),
-        isLogDownloading: types.optional(types.boolean, false),
-        authStore: types.optional(AuthStore, {}),
-        accountStore: types.optional(AccountStore, {}),
         menuStore: types.optional(MenuStore, {}),
         reportStore: types.optional(RootReportStore, {}),
         marketplaceStore: types.optional(MarketplaceStore, {}),
-        notificationStore: types.optional(NotificationStore, {}),
-    })
-    .actions(self => {
-        let initialState: RootInstanceSnapshotOut;
-        let requestsToRefresh: RequestToRefresh[] = [];
-        let isRefreshRequesting = false;
-
-        const refreshAccessToken = (error: HttpRpcErrorModel, config: AxiosRequestConfig): Promise<any> => {
-            const auth = getToken();
-            let method;
-            try {
-                method = JSON.parse(config.data).method;
-            } catch {
-                // REST case
-            }
-            if (!auth || method === LOGOUT_USER) {
-                return Promise.reject(error);
-            }
-
-            if (!isRefreshRequesting) {
-                isRefreshRequesting = true;
-
-                self.authStore
-                    .fetchRefresh()
-                    .then(() => {
-                        requestsToRefresh.forEach(cb => cb(true));
-                    })
-                    .catch(() => {
-                        requestsToRefresh.forEach(cb => cb(false));
-                    })
-                    .finally(() => {
-                        requestsToRefresh = [];
-                        isRefreshRequesting = false;
-                    });
-            }
-
-            return new Promise((resolve, reject) => {
-                const requestToRefresh = (resolveNext: boolean) => {
-                    if (resolveNext) {
-                        resolve(axios(config));
-                    }
-
-                    reject(error);
-                };
-
-                requestsToRefresh.push(requestToRefresh);
-            });
-        };
-
-        const logRequest = ({
-            response: r,
-            isError
-        }) => {
-            if (!r) {
-                return;
-            }
-
-            const {
-                data: response,
-                config: {
-                    data,
-                    url,
-                    method
-                }
-            } = r;
-
-            log([
-                'Ajax request',
-                `URL "${url}"`,
-                `Method "${method}"`,
-                `Parameters ${typeof data == 'object' ? JSON.stringify(data) : data}`,
-                `${isError ? 'Error' : 'Response'} ${JSON.stringify(response)}`
-            ].join("\n"));
-        };
-
-        const setHttpRequestsDefault = () => {
-            axios.defaults.headers.post['Accept'] = 'application/json';
-            axios.defaults.headers.post['Content-Type'] = 'application/json';
-
-            axios.interceptors.request.use(
-                config => {
-                    const auth = getToken();
-
-                    if (auth) {
-                        const { jwt } = auth;
-                        const headers = config.headers;
-
-                        // todo проблема с РМР - протестировали на БОЮ =)
-                        // let configData = config.data;
-                        //
-                        // if (typeof configData === 'string') {
-                        //     configData = JSON.parse(configData);
-                        // }
-                        //
-                        // const method = configData?.method;
-                        // if (method) {
-                        //     headers['Authorization'] = `Bearer ${jwt}`;
-                        // } else {
-                        //     headers['X-Auth-Token'] = jwt;
-                        // }
-                        headers['Authorization'] = `Bearer ${jwt}`;
-                        headers['X-Auth-Token'] = jwt;
-                        headers['X-Auth-Type'] = 'jwt';
-                    }
-
-                    return config;
-                },
-                error => {
-                    return Promise.reject(error);
-                }
-            );
-
-            axios.interceptors.response.use(
-                response => {
-                    logRequest({response});
-
-                    if (response.data.error) {
-                        const {
-                            config,
-                            data: { error },
-                        } = response;
-                        const errorMnemonic = error?.data?.mnemonic;
-
-                        if (errorMnemonic === ACCESS_TOKEN_EXPIRED) {
-                            return refreshAccessToken(error, config);
-                        } else if (errorMnemonic === ACCESS_TOKEN_INVALID) {
-                            self.authStore.logout();
-
-                            return Promise.reject(error);
-                        }
-                    }
-
-                    return response;
-                },
-                error => {
-                    logRequest({
-                        response: error.response,
-                        isError: true
-                    });
-
-                    if (error?.response?.status === 401) {
-                        const errorMnemonic = error.response.data.split(' ').slice(-1)[0];
-                        if (errorMnemonic === ACCESS_TOKEN_EXPIRED) {
-                            return refreshAccessToken(error, error.response.config);
-                        } else if (
-                            errorMnemonic === ACCESS_TOKEN_INVALID ||
-                            error.response.data === '401: "Authorization" header not found'
-                        ) {
-                            self.authStore.logout();
-                        }
-                    }
-
-                    return Promise.reject(error);
-                }
-            );
-        };
-
-        let setSoftphoneStore = () => null;
-
-        const downloadLog = () => {
-            self.isLogDownloading = true;
-            getIpcRender().send('collect_logs');
-        };
-
-        const handleLogsCollected = data => {
-            self.isLogDownloading = false;
-
-            fileSaver.saveAs(new Blob([data], {
-                type: 'application/zip'
-            }), `Softphone.${moment().format('YYYYMMDD.HHmmss.SSS')}.log.zip`)
-        };
-
-        const afterCreate = () => {
-            initialState = getSnapshot(self);
-
-            setHttpRequestsDefault();
-
-            getIpcRender().on('logs_collected', (event, data) => self.handleLogsCollected(data));
-            setSoftphoneStore = createSoftphoneStoreCreatingHandler(self);
-        };
-
-        const resetStore = () => {
-            applySnapshot(self, initialState);
-        };
-
-        const setLarge = value => (self.isLarge = value);
-
-        self.fileLogger = {
-            downloadLog: () => self.downloadLog(),
-            log
-        };
-
-        return {
-            afterCreate,
-            resetStore,
-            setLarge,
-            downloadLog,
-            handleLogsCollected,
-            setSoftphoneStore: store => setSoftphoneStore(store) 
-        };
     });
 
-export type DependencyInjection = {
-    httpRpc: HttpRpc;
-    httpRpcAuth: HttpRpc;
-};
 export type RootInstance = Instance<typeof RootStore>;
 export const RootStoreContext = React.createContext<null | RootInstance>(null);
 export const Provider = RootStoreContext.Provider;
-export const rootStore = RootStore.create({}, { httpRpc, httpRpcAuth });
+
+export let rootStore;
+
+export const createRootStore = () => (rootStore = RootStore.create({}, {
+    appName: window.rootConfig?.appName,
+    httpRpc,
+    httpRpcAuth,
+    i18n: intl,
+    cancelPendingRequests,
+    AUTH_KEY: process.env.REACT_APP_AUTH_COOKIE || '$REACT_APP_AUTH_COOKIE',
+}));
 
 type RootInstanceSnapshotOut = SnapshotOut<typeof RootStore>;
 
diff --git a/src/models/auth/AuthStore.ts b/src/models/auth/AuthStore.ts
deleted file mode 100644
index e6dd1223..00000000
--- a/src/models/auth/AuthStore.ts
+++ /dev/null
@@ -1,235 +0,0 @@
-import { flow, getEnv, getRoot, types } from 'mobx-state-tree';
-import axios from 'axios';
-
-import { RootStore } from '../RootStore';
-import { Loader } from '../shared';
-import { getProject } from '@/i18n';
-import { getCookie, setCookie, deleteCookie } from '@/utils';
-import { cancelPendingRequests } from '@/rpc/httpRpc';
-import { generateTraceId } from '@/utils';
-import { Options } from '@/utils/cookie';
-import { cancelAnalyticPendingRequests } from '@/rpc/httpRpcAnalytic';
-
-export type LoginUser = {
-    login: string;
-    password: string;
-    dont_keep_me_signed_in: boolean;
-};
-
-type Auth = {
-    jwt: string;
-    refresh: string;
-};
-
-const AUTH_KEY = process.env.REACT_APP_AUTH_COOKIE || '$REACT_APP_AUTH_COOKIE';
-
-const getCookieDomain = () => {
-    return window.location.hostname
-        .split('.')
-        .slice(-2)
-        .join('.');
-};
-
-export const getToken = (): Auth => {
-    const token = getCookie(AUTH_KEY);
-
-    if (!token) return;
-
-    return JSON.parse(token);
-};
-
-const setToken = (auth: Auth, dontKeepMeSignedIn = false) => {
-    const options = {
-        secure: true,
-        domain: getCookieDomain(),
-    } as Options;
-    if (!dontKeepMeSignedIn) {
-        const twoWeeks = new Date(Date.now() + 2 * 7 * 24 * 60 * 60 * 1000);
-        options.expires = twoWeeks;
-    }
-    setCookie(AUTH_KEY, JSON.stringify(auth), options);
-
-    window.dispatchEvent(new Event('tokenChange'));
-};
-
-type JwtPayload = {
-    app_id: number;
-    user_id: number;
-    exp: number;
-};
-
-const getJwtPayload = (): JwtPayload => {
-    const token = getToken();
-
-    if (!token) {
-        return null;
-    }
-
-    const jwt = token.jwt;
-
-    if (!jwt) {
-        return null;
-    }
-
-    const jwtPayload = jwt.split('.')[1];
-
-    if (!jwtPayload) {
-        return null;
-    }
-
-    return JSON.parse(atob(jwtPayload));
-};
-
-const removeToken = (skipLocalStorage = false) => {
-    if (!skipLocalStorage) {
-        deleteCookie(AUTH_KEY, { secure: true, domain: getCookieDomain() });
-        sessionStorage.removeItem(AUTH_KEY);
-        sessionStorage.removeItem('access_token');
-    }
-
-    delete axios.defaults.headers.common['Authorization'];
-    delete axios.defaults.headers.common['X-Auth-Type'];
-
-    window.dispatchEvent(new Event('tokenRemove'));
-};
-
-export const AuthStore = Loader.named('AuthStore')
-    .props({
-        isAuthorized: types.optional(types.boolean, Boolean(getToken())),
-        isTokenRefreshing: types.optional(types.boolean, false),
-        windowId: types.optional(types.string, generateTraceId('local')),
-    })
-    .actions(self => {
-        const { httpRpcAuth } = getEnv(self);
-        const { authStore, accountStore, notificationStore } = getRoot<typeof RootStore>(self);
-
-        const setAuthorized = (isAuthorized: boolean) => {
-            self.isAuthorized = isAuthorized;
-        };
-
-        const setIsTokenRefreshing = (value: boolean) => {
-            self.isTokenRefreshing = value;
-        };
-
-        const cancelNotifications = () => {
-            notificationStore.stackingNotificationInstance?.destroyAll();
-            notificationStore.cancelNotifications();
-        };
-
-        const logout = (skipLocalStorage = false) => {
-            cancelNotifications();
-            setAuthorized(false);
-            cancelPendingRequests('canceled by logout');
-            cancelAnalyticPendingRequests('canceled by logout');
-            removeToken(skipLocalStorage);
-            self.setLoading(false);
-        };
-
-        const fetchLoginUser = flow(function*({
-            login,
-            password,
-            dont_keep_me_signed_in: dontKeepMeSignedIn,
-        }: LoginUser) {
-            self.setLoading(true);
-
-            try {
-                const token = getToken();
-                const old_jwt = token?.jwt;
-
-                const auth = yield httpRpcAuth('login', {
-                    login,
-                    password,
-                    project: getProject(),
-                    old_jwt,
-                });
-
-                setToken(auth, dontKeepMeSignedIn);
-                setAuthorized(true);
-            } catch (e) {
-                removeToken();
-
-                return Promise.reject(e);
-            } finally {
-                self.setLoading(false);
-            }
-        });
-
-        const fetchRefresh = flow(function*() {
-            try {
-                setIsTokenRefreshing(true);
-
-                const auth = getToken();
-
-                const nextAuth = yield httpRpcAuth('refresh', auth);
-
-                setToken(nextAuth);
-            } catch (e) {
-                void fetchLogoutUser();
-                return Promise.reject(e);
-            } finally {
-                setIsTokenRefreshing(false);
-            }
-        });
-
-        const fetchLogoutUser = flow(function*() {
-            self.setLoading(true);
-
-            try {
-                const token = getToken();
-                const jwt = token?.jwt;
-
-                yield httpRpcAuth('logout', {
-                    jwt,
-                });
-            } catch (e) {
-                return Promise.reject(e);
-            } finally {
-                logout();
-            }
-        });
-
-        const afterCreate = () => {
-            window.addEventListener('doLogoutUser', (event: CustomEvent) => {
-                const eventWindowId = event.detail;
-                if (eventWindowId !== authStore.windowId) {
-                    void authStore.logout(true);
-                }
-            });
-            window.addEventListener('doRefreshToken', (event: CustomEvent) => {
-                const eventWindowId = event.detail;
-                if (eventWindowId !== authStore.windowId) {
-                    authStore
-                        .fetchRefresh()
-                        .then(() => {
-                            const tokenRefreshedEvent = new Event('tokenRefreshed');
-                            window.dispatchEvent(tokenRefreshedEvent);
-                        })
-                        .catch(e => console.error(e));
-                }
-            });
-
-            window.setInterval(() => {
-                if (authStore.isAuthorized) {
-                    const payload = getJwtPayload();
-
-                    if (payload) {
-                        const jwtUserId = payload.user_id;
-                        const accountStoreUserId = accountStore.account.user_id;
-
-                        if (accountStoreUserId !== null && jwtUserId !== accountStoreUserId) {
-                            window.location.href = '/';
-                        }
-                    }
-                }
-            }, 1000);
-        };
-
-        return {
-            fetchLoginUser,
-            fetchLogoutUser,
-            fetchRefresh,
-            logout,
-            setIsTokenRefreshing,
-            afterCreate,
-        };
-    });
diff --git a/src/rpc/httpRpc.ts b/src/rpc/httpRpc.ts
index 8c0a28d7..ce190fe9 100644
--- a/src/rpc/httpRpc.ts
+++ b/src/rpc/httpRpc.ts
@@ -25,10 +25,11 @@ export type HttpRpc = <T>(
 
 const baseUrl: string = process.env.REACT_APP_BASE_URL || '$REACT_APP_BASE_URL';
 
-let cancelTokenSource: CancelTokenSource = axios.CancelToken.source();
+let cancelTokenSource: CancelTokenSource = null;
+const getCancelTokenSource = () => cancelTokenSource || (cancelTokenSource = axios.CancelToken.source());
 
 export const cancelPendingRequests = (message?: string): void => {
-    cancelTokenSource.cancel(message);
+    getCancelTokenSource().cancel(message);
     cancelTokenSource = axios.CancelToken.source();
 };
 
@@ -45,7 +46,7 @@ const httpRpc: HttpRpc = async <T>(method: string, params = {}, headers = {}, ur
         data: rpcParams,
         url: `${url}?method=${method}`,
         headers,
-        cancelToken: cancelTokenSource.token,
+        cancelToken: getCancelTokenSource().token,
     };
 
     try {
diff --git a/src/utils/cookie.ts b/src/utils/cookie.ts
index 9882b7ef..62ae7319 100644
--- a/src/utils/cookie.ts
+++ b/src/utils/cookie.ts
@@ -40,13 +40,14 @@ const resetElectronCookiesManager = () => {
 };
 
 window.getElectronCookiesManager = resetElectronCookiesManager;
+const prepareName = name => encodeURIComponent(name.replace(/([.$?*|{}()[\]\\/+^])/g, '\\$1'));
 
 export function getCookie(name: string): string {
     if (isSoftphone()) {
         return window.getElectronCookiesManager().getItem(name);
     }
 
-    const matches = new RegExp('(?:^|; )' + name.replace(/([.$?*|{}()[\]\\/+^])/g, '\\$1') + '=([^;]*)').exec(
+    const matches = new RegExp('(?:^|; )' + prepareName(name) + '=([^;]*)').exec(
         document.cookie
     );
 
@@ -68,7 +69,7 @@ export function setCookie(name: string, value: string, options: Options = {}): v
         options.expires = options.expires.toUTCString();
     }
 
-    let updatedCookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
+    let updatedCookie = prepareName(name) + '=' + encodeURIComponent(value);
 
     let optionKey: keyof Options;
     for (optionKey in options) {
